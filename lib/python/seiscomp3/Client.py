# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4a
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Client', [dirname(__file__)])
        except ImportError:
            import _Client
            return _Client
        if fp is not None:
            try:
                _mod = imp.load_module('_Client', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Client = swig_import_helper()
    del swig_import_helper
else:
    import _Client
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Client.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Client.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Client.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Client.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Client.SwigPyIterator_equal(self, *args)
    def copy(self): return _Client.SwigPyIterator_copy(self)
    def next(self): return _Client.SwigPyIterator_next(self)
    def __next__(self): return _Client.SwigPyIterator___next__(self)
    def previous(self): return _Client.SwigPyIterator_previous(self)
    def advance(self, *args): return _Client.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Client.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Client.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Client.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Client.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Client.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Client.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Client.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import Logging
import Config
import Communication
import Core
import DataModel
import IO
import Math
import Utils
class CommandLine(_object):
    """Proxy of C++ Seiscomp::Client::CommandLine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandLine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CommandLine"""
        this = _Client.new_CommandLine()
        try: self.this.append(this)
        except: self.this = this
    def addGroup(self, *args):
        """addGroup(self, char arg0)"""
        return _Client.CommandLine_addGroup(self, *args)

    def addOption(self, *args):
        """addOption(self, char group, char option, char description)"""
        return _Client.CommandLine_addOption(self, *args)

    def parse(self, *args):
        """parse(self, int argc, char argv) -> bool"""
        return _Client.CommandLine_parse(self, *args)

    def printOptions(self):
        """printOptions(self)"""
        return _Client.CommandLine_printOptions(self)

    def hasOption(self, *args):
        """hasOption(self, string option) -> bool"""
        return _Client.CommandLine_hasOption(self, *args)

    def unrecognizedOptions(self):
        """unrecognizedOptions(self) -> vectorStr"""
        return _Client.CommandLine_unrecognizedOptions(self)

    def optionInt(self, *args):
        """optionInt(self, string option) -> int"""
        return _Client.CommandLine_optionInt(self, *args)

    def optionBool(self, *args):
        """optionBool(self, string option) -> bool"""
        return _Client.CommandLine_optionBool(self, *args)

    def optionDouble(self, *args):
        """optionDouble(self, string option) -> double"""
        return _Client.CommandLine_optionDouble(self, *args)

    def optionString(self, *args):
        """optionString(self, string option) -> string"""
        return _Client.CommandLine_optionString(self, *args)

    def addIntOption(self, *args):
        """
        addIntOption(self, char group, char option, char description)
        addIntOption(self, char group, char option, char description, int defaultValue)
        """
        return _Client.CommandLine_addIntOption(self, *args)

    def addDoubleOption(self, *args):
        """
        addDoubleOption(self, char group, char option, char description)
        addDoubleOption(self, char group, char option, char description, double defaultValue)
        """
        return _Client.CommandLine_addDoubleOption(self, *args)

    def addBoolOption(self, *args):
        """
        addBoolOption(self, char group, char option, char description)
        addBoolOption(self, char group, char option, char description, bool defaultValue)
        """
        return _Client.CommandLine_addBoolOption(self, *args)

    def addStringOption(self, *args):
        """
        addStringOption(self, char group, char option, char description)
        addStringOption(self, char group, char option, char description, string defaultValue)
        """
        return _Client.CommandLine_addStringOption(self, *args)

    __swig_destroy__ = _Client.delete_CommandLine
    __del__ = lambda self : None;
CommandLine_swigregister = _Client.CommandLine_swigregister
CommandLine_swigregister(CommandLine)

class RunningAverage(_object):
    """Proxy of C++ Seiscomp::Client::RunningAverage class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunningAverage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunningAverage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int timeSpanInSeconds) -> RunningAverage"""
        this = _Client.new_RunningAverage(*args)
        try: self.this.append(this)
        except: self.this = this
    def timeSpan(self):
        """timeSpan(self) -> int"""
        return _Client.RunningAverage_timeSpan(self)

    def push(self, *args):
        """
        push(self, Time time, size_t count = 1)
        push(self, Time time)
        """
        return _Client.RunningAverage_push(self, *args)

    def count(self, *args):
        """count(self, Time time) -> int"""
        return _Client.RunningAverage_count(self, *args)

    def value(self, *args):
        """value(self, Time time) -> double"""
        return _Client.RunningAverage_value(self, *args)

    def last(self):
        """last(self) -> Time"""
        return _Client.RunningAverage_last(self)

    def dumpBins(self):
        """dumpBins(self)"""
        return _Client.RunningAverage_dumpBins(self)

    __swig_destroy__ = _Client.delete_RunningAverage
    __del__ = lambda self : None;
RunningAverage_swigregister = _Client.RunningAverage_swigregister
RunningAverage_swigregister(RunningAverage)

class ObjectMonitor(_object):
    """Proxy of C++ Seiscomp::Client::ObjectMonitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int timeSpanInSeconds) -> ObjectMonitor"""
        this = _Client.new_ObjectMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Client.delete_ObjectMonitor
    __del__ = lambda self : None;
    def add(self, *args):
        """
        add(self, string name, string channel = "") -> Log
        add(self, string name) -> Log
        """
        return _Client.ObjectMonitor_add(self, *args)

    def update(self, *args):
        """update(self, Time time)"""
        return _Client.ObjectMonitor_update(self, *args)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _Client.ObjectMonitor_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _Client.ObjectMonitor_end(self)

    def size(self):
        """size(self) -> size_t"""
        return _Client.ObjectMonitor_size(self)

ObjectMonitor_swigregister = _Client.ObjectMonitor_swigregister
ObjectMonitor_swigregister(ObjectMonitor)

STARTED = _Client.STARTED
FINISHED = _Client.FINISHED
EApplicationStatusQuantity = _Client.EApplicationStatusQuantity
class EApplicationStatusNames(_object):
    """Proxy of C++ Seiscomp::Client::EApplicationStatusNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EApplicationStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EApplicationStatusNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> EApplicationStatusNames"""
        this = _Client.new_EApplicationStatusNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char"""
        return _Client.EApplicationStatusNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _Client.delete_EApplicationStatusNames
    __del__ = lambda self : None;
EApplicationStatusNames_swigregister = _Client.EApplicationStatusNames_swigregister
EApplicationStatusNames_swigregister(EApplicationStatusNames)

def EApplicationStatusNames_name(*args):
  """EApplicationStatusNames_name(int i) -> char"""
  return _Client.EApplicationStatusNames_name(*args)

class ApplicationStatusMessage(Core.Message):
    """Proxy of C++ Seiscomp::Client::ApplicationStatusMessage class"""
    __swig_setmethods__ = {}
    for _s in [Core.Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationStatusMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationStatusMessage, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char"""
        return _Client.ApplicationStatusMessage_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _Client.ApplicationStatusMessage_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(self) -> char"""
        return _Client.ApplicationStatusMessage_className(self)

    def typeInfo(self):
        """typeInfo(self) -> RTTI"""
        return _Client.ApplicationStatusMessage_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ApplicationStatusMessage
        Cast(BaseObjectPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ApplicationStatusMessage
        ConstCast(BaseObjectCPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(self, Archive ar)"""
        return _Client.ApplicationStatusMessage_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ApplicationStatusMessage
        __init__(self, string module, ApplicationStatus status) -> ApplicationStatusMessage
        __init__(self, string module, string username, ApplicationStatus status) -> ApplicationStatusMessage
        """
        this = _Client.new_ApplicationStatusMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(self) -> bool"""
        return _Client.ApplicationStatusMessage_empty(self)

    def module(self):
        """module(self) -> string"""
        return _Client.ApplicationStatusMessage_module(self)

    def username(self):
        """username(self) -> string"""
        return _Client.ApplicationStatusMessage_username(self)

    def status(self):
        """status(self) -> ApplicationStatus"""
        return _Client.ApplicationStatusMessage_status(self)

    __swig_destroy__ = _Client.delete_ApplicationStatusMessage
    __del__ = lambda self : None;
ApplicationStatusMessage_swigregister = _Client.ApplicationStatusMessage_swigregister
ApplicationStatusMessage_swigregister(ApplicationStatusMessage)

def ApplicationStatusMessage_ClassName():
  """ApplicationStatusMessage_ClassName() -> char"""
  return _Client.ApplicationStatusMessage_ClassName()

def ApplicationStatusMessage_TypeInfo():
  """ApplicationStatusMessage_TypeInfo() -> RTTI"""
  return _Client.ApplicationStatusMessage_TypeInfo()

def ApplicationStatusMessage_Cast(*args):
  """
    Cast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_Cast(BaseObjectPtr o) -> ApplicationStatusMessage
    """
  return _Client.ApplicationStatusMessage_Cast(*args)

def ApplicationStatusMessage_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_ConstCast(BaseObjectCPtr o) -> ApplicationStatusMessage
    """
  return _Client.ApplicationStatusMessage_ConstCast(*args)

class Notification(_object):
    """Proxy of C++ Seiscomp::Client::Notification class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Notification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Notification, name)
    __repr__ = _swig_repr
    Object = _Client.Notification_Object
    Disconnect = _Client.Notification_Disconnect
    Reconnect = _Client.Notification_Reconnect
    Close = _Client.Notification_Close
    Timeout = _Client.Notification_Timeout
    Sync = _Client.Notification_Sync
    def __init__(self, *args): 
        """
        __init__(self) -> Notification
        __init__(self, BaseObject o) -> Notification
        __init__(self, int t) -> Notification
        __init__(self, int t, BaseObject o) -> Notification
        """
        this = _Client.new_Notification(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["object"] = _Client.Notification_object_set
    __swig_getmethods__["object"] = _Client.Notification_object_get
    if _newclass:object = _swig_property(_Client.Notification_object_get, _Client.Notification_object_set)
    __swig_setmethods__["type"] = _Client.Notification_type_set
    __swig_getmethods__["type"] = _Client.Notification_type_get
    if _newclass:type = _swig_property(_Client.Notification_type_get, _Client.Notification_type_set)
    __swig_destroy__ = _Client.delete_Notification
    __del__ = lambda self : None;
Notification_swigregister = _Client.Notification_swigregister
Notification_swigregister(Notification)

class Application(Core.InterruptibleObject):
    """Proxy of C++ Seiscomp::Client::Application class"""
    __swig_setmethods__ = {}
    for _s in [Core.InterruptibleObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.InterruptibleObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    COMMANDLINE = _Client.Application_COMMANDLINE
    CONFIGURATION = _Client.Application_CONFIGURATION
    LOGGING = _Client.Application_LOGGING
    MESSAGING = _Client.Application_MESSAGING
    DATABASE = _Client.Application_DATABASE
    ST_QUANTITY = _Client.Application_ST_QUANTITY
    def __init__(self, *args): 
        """__init__(self, int argc, char argv) -> Application"""
        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        this = _Client.new_Application(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Client.delete_Application
    __del__ = lambda self : None;
    def __call__(self):
        """__call__(self) -> int"""
        return _Client.Application___call__(self)

    def arguments(self):
        """arguments(self) -> Arguments"""
        return _Client.Application_arguments(self)

    def commandline(self, *args):
        """
        commandline(self) -> CommandLine
        commandline(self) -> CommandLine
        """
        return _Client.Application_commandline(self, *args)

    def configuration(self):
        """configuration(self) -> Config"""
        return _Client.Application_configuration(self)

    def path(self):
        """path(self) -> char"""
        return _Client.Application_path(self)

    def name(self):
        """name(self) -> string"""
        return _Client.Application_name(self)

    def addPluginPackagePath(self, *args):
        """addPluginPackagePath(self, string package)"""
        return _Client.Application_addPluginPackagePath(self, *args)

    def version(self):
        """version(self) -> char"""
        return _Client.Application_version(self)

    def agencyID(self):
        """agencyID(self) -> string"""
        return _Client.Application_agencyID(self)

    def author(self):
        """author(self) -> string"""
        return _Client.Application_author(self)

    def isAgencyIDAllowed(self, *args):
        """isAgencyIDAllowed(self, string agencyID) -> bool"""
        return _Client.Application_isAgencyIDAllowed(self, *args)

    def isAgencyIDBlocked(self, *args):
        """isAgencyIDBlocked(self, string agencyID) -> bool"""
        return _Client.Application_isAgencyIDBlocked(self, *args)

    def execute(self):
        """execute(self) -> int"""
        return _Client.Application_execute(self)

    def exit(self, *args):
        """exit(self, int returnCode)"""
        return _Client.Application_exit(self, *args)

    def quit(self):
        """quit(self)"""
        return _Client.Application_quit(self)

    def isExitRequested(self):
        """isExitRequested(self) -> bool"""
        return _Client.Application_isExitRequested(self)

    def printUsage(self):
        """printUsage(self)"""
        return _Client.Application_printUsage(self)

    def connection(self):
        """connection(self) -> Connection"""
        return _Client.Application_connection(self)

    def databaseType(self):
        """databaseType(self) -> string"""
        return _Client.Application_databaseType(self)

    def databaseParameters(self):
        """databaseParameters(self) -> string"""
        return _Client.Application_databaseParameters(self)

    def database(self):
        """database(self) -> DatabaseInterface"""
        return _Client.Application_database(self)

    def databaseURI(self):
        """databaseURI(self) -> string"""
        return _Client.Application_databaseURI(self)

    def query(self):
        """query(self) -> DatabaseQuery"""
        return _Client.Application_query(self)

    def recordStreamURL(self):
        """recordStreamURL(self) -> string"""
        return _Client.Application_recordStreamURL(self)

    def crashHandler(self):
        """crashHandler(self) -> string"""
        return _Client.Application_crashHandler(self)

    def cities(self):
        """cities(self) -> CityListD"""
        return _Client.Application_cities(self)

    def nearestCity(self, *args):
        """nearestCity(self, double lat, double lon, double maxDist, double minPopulation) -> CityD"""
        return _Client.Application_nearestCity(self, *args)

    def configModule(self):
        """configModule(self) -> ConfigModule"""
        return _Client.Application_configModule(self)

    def isStationEnabled(self, *args):
        """isStationEnabled(self, string networkCode, string stationCode) -> bool"""
        return _Client.Application_isStationEnabled(self, *args)

    def messagingHost(self):
        """messagingHost(self) -> string"""
        return _Client.Application_messagingHost(self)

    def enableTimer(self, *args):
        """enableTimer(self, unsigned int seconds)"""
        return _Client.Application_enableTimer(self, *args)

    def disableTimer(self):
        """disableTimer(self)"""
        return _Client.Application_disableTimer(self)

    def sendNotification(self, *args):
        """sendNotification(self, Notification arg0)"""
        return _Client.Application_sendNotification(self, *args)

    def requestSync(self, *args):
        """requestSync(self, char syncID) -> bool"""
        return _Client.Application_requestSync(self, *args)

    def sync(self, syncID = None):
        """
        sync(self, char syncID = None) -> bool
        sync(self) -> bool
        """
        return _Client.Application_sync(self, syncID)

    def setDaemonEnabled(self, *args):
        """setDaemonEnabled(self, bool enable)"""
        return _Client.Application_setDaemonEnabled(self, *args)

    def setPrimaryMessagingGroup(self, *args):
        """setPrimaryMessagingGroup(self, string arg0)"""
        return _Client.Application_setPrimaryMessagingGroup(self, *args)

    def primaryMessagingGroup(self):
        """primaryMessagingGroup(self) -> string"""
        return _Client.Application_primaryMessagingGroup(self)

    def setMessagingUsername(self, *args):
        """setMessagingUsername(self, string arg0)"""
        return _Client.Application_setMessagingUsername(self, *args)

    def addMessagingSubscription(self, *args):
        """addMessagingSubscription(self, string arg0)"""
        return _Client.Application_addMessagingSubscription(self, *args)

    def setDatabaseEnabled(self, *args):
        """setDatabaseEnabled(self, bool enable, bool tryToFetch)"""
        return _Client.Application_setDatabaseEnabled(self, *args)

    def isDatabaseEnabled(self):
        """isDatabaseEnabled(self) -> bool"""
        return _Client.Application_isDatabaseEnabled(self)

    def isInventoryDatabaseEnabled(self):
        """isInventoryDatabaseEnabled(self) -> bool"""
        return _Client.Application_isInventoryDatabaseEnabled(self)

    def isConfigDatabaseEnabled(self):
        """isConfigDatabaseEnabled(self) -> bool"""
        return _Client.Application_isConfigDatabaseEnabled(self)

    def setMessagingEnabled(self, *args):
        """setMessagingEnabled(self, bool enable)"""
        return _Client.Application_setMessagingEnabled(self, *args)

    def isMessagingEnabled(self):
        """isMessagingEnabled(self) -> bool"""
        return _Client.Application_isMessagingEnabled(self)

    def setStartStopMessagesEnabled(self, *args):
        """setStartStopMessagesEnabled(self, bool enable)"""
        return _Client.Application_setStartStopMessagesEnabled(self, *args)

    def areStartStopMessagesEnabled(self):
        """areStartStopMessagesEnabled(self) -> bool"""
        return _Client.Application_areStartStopMessagesEnabled(self)

    def setAutoShutdownEnabled(self, *args):
        """setAutoShutdownEnabled(self, bool enable)"""
        return _Client.Application_setAutoShutdownEnabled(self, *args)

    def isAutoShutdownEnabled(self):
        """isAutoShutdownEnabled(self) -> bool"""
        return _Client.Application_isAutoShutdownEnabled(self)

    def setRecordStreamEnabled(self, *args):
        """setRecordStreamEnabled(self, bool enable)"""
        return _Client.Application_setRecordStreamEnabled(self, *args)

    def isRecordStreamEnabled(self):
        """isRecordStreamEnabled(self) -> bool"""
        return _Client.Application_isRecordStreamEnabled(self)

    def setLoadStationsEnabled(self, *args):
        """setLoadStationsEnabled(self, bool enable)"""
        return _Client.Application_setLoadStationsEnabled(self, *args)

    def isLoadStationsEnabled(self):
        """isLoadStationsEnabled(self) -> bool"""
        return _Client.Application_isLoadStationsEnabled(self)

    def setLoadInventoryEnabled(self, *args):
        """setLoadInventoryEnabled(self, bool enable)"""
        return _Client.Application_setLoadInventoryEnabled(self, *args)

    def isLoadInventoryEnabled(self):
        """isLoadInventoryEnabled(self) -> bool"""
        return _Client.Application_isLoadInventoryEnabled(self)

    def setLoadConfigModuleEnabled(self, *args):
        """setLoadConfigModuleEnabled(self, bool enable)"""
        return _Client.Application_setLoadConfigModuleEnabled(self, *args)

    def isLoadConfigModuleEnabled(self):
        """isLoadConfigModuleEnabled(self) -> bool"""
        return _Client.Application_isLoadConfigModuleEnabled(self)

    def setLoadCitiesEnabled(self, *args):
        """setLoadCitiesEnabled(self, bool enable)"""
        return _Client.Application_setLoadCitiesEnabled(self, *args)

    def isLoadCitiesEnabled(self):
        """isLoadCitiesEnabled(self) -> bool"""
        return _Client.Application_isLoadCitiesEnabled(self)

    def setLoadRegionsEnabled(self, *args):
        """setLoadRegionsEnabled(self, bool enable)"""
        return _Client.Application_setLoadRegionsEnabled(self, *args)

    def isLoadRegionsEnabled(self):
        """isLoadRegionsEnabled(self) -> bool"""
        return _Client.Application_isLoadRegionsEnabled(self)

    def setAutoApplyNotifierEnabled(self, *args):
        """setAutoApplyNotifierEnabled(self, bool enable)"""
        return _Client.Application_setAutoApplyNotifierEnabled(self, *args)

    def isAutoApplyNotifierEnabled(self):
        """isAutoApplyNotifierEnabled(self) -> bool"""
        return _Client.Application_isAutoApplyNotifierEnabled(self)

    def setInterpretNotifierEnabled(self, *args):
        """setInterpretNotifierEnabled(self, bool enable)"""
        return _Client.Application_setInterpretNotifierEnabled(self, *args)

    def isInterpretNotifierEnabled(self):
        """isInterpretNotifierEnabled(self) -> bool"""
        return _Client.Application_isInterpretNotifierEnabled(self)

    def hasCustomPublicIDPattern(self):
        """hasCustomPublicIDPattern(self) -> bool"""
        return _Client.Application_hasCustomPublicIDPattern(self)

    def setConnectionRetries(self, *args):
        """setConnectionRetries(self, unsigned int arg0)"""
        return _Client.Application_setConnectionRetries(self, *args)

    def setLoggingContext(self, *args):
        """setLoggingContext(self, bool arg0)"""
        return _Client.Application_setLoggingContext(self, *args)

    def setLoggingComponent(self, *args):
        """setLoggingComponent(self, bool arg0)"""
        return _Client.Application_setLoggingComponent(self, *args)

    def setLoggingToStdErr(self, *args):
        """setLoggingToStdErr(self, bool arg0)"""
        return _Client.Application_setLoggingToStdErr(self, *args)

    def addLoggingComponentSubscription(self, *args):
        """addLoggingComponentSubscription(self, string arg0)"""
        return _Client.Application_addLoggingComponentSubscription(self, *args)

    def setConfigModuleName(self, *args):
        """setConfigModuleName(self, string module)"""
        return _Client.Application_setConfigModuleName(self, *args)

    def configModuleName(self):
        """configModuleName(self) -> string"""
        return _Client.Application_configModuleName(self)

    def setShutdownMasterModule(self, *args):
        """setShutdownMasterModule(self, string module)"""
        return _Client.Application_setShutdownMasterModule(self, *args)

    def setShutdownMasterUsername(self, *args):
        """setShutdownMasterUsername(self, string username)"""
        return _Client.Application_setShutdownMasterUsername(self, *args)

    def closeLogging(self):
        """closeLogging(self)"""
        return _Client.Application_closeLogging(self)

    def addInputObjectLog(self, *args):
        """
        addInputObjectLog(self, string name, string channel = "") -> ObjectLog
        addInputObjectLog(self, string name) -> ObjectLog
        """
        return _Client.Application_addInputObjectLog(self, *args)

    def addOutputObjectLog(self, *args):
        """
        addOutputObjectLog(self, string name, string channel = "") -> ObjectLog
        addOutputObjectLog(self, string name) -> ObjectLog
        """
        return _Client.Application_addOutputObjectLog(self, *args)

    def logObject(self, *args):
        """
        logObject(self, ObjectLog log, Time timestamp, size_t count = 1)
        logObject(self, ObjectLog log, Time timestamp)
        """
        return _Client.Application_logObject(self, *args)

    def Instance():
        """Instance() -> Application"""
        return _Client.Application_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def HandleSignals(*args):
        """HandleSignals(bool termination, bool crash)"""
        return _Client.Application_HandleSignals(*args)

    if _newclass:HandleSignals = staticmethod(HandleSignals)
    __swig_getmethods__["HandleSignals"] = lambda x: HandleSignals
    def createCommandLineDescription(self):
        """createCommandLineDescription(self)"""
        return _Client.Application_createCommandLineDescription(self)

    def validateParameters(self):
        """validateParameters(self) -> bool"""
        return _Client.Application_validateParameters(self)

    def init(self):
        """init(self) -> bool"""
        return _Client.Application_init(self)

    def run(self):
        """run(self) -> bool"""
        return _Client.Application_run(self)

    def idle(self):
        """idle(self)"""
        return _Client.Application_idle(self)

    def done(self):
        """done(self)"""
        return _Client.Application_done(self)

    def forkProcess(self):
        """forkProcess(self) -> bool"""
        return _Client.Application_forkProcess(self)

    def initConfiguration(self):
        """initConfiguration(self) -> bool"""
        return _Client.Application_initConfiguration(self)

    def initPlugins(self):
        """initPlugins(self) -> bool"""
        return _Client.Application_initPlugins(self)

    def initDatabase(self):
        """initDatabase(self) -> bool"""
        return _Client.Application_initDatabase(self)

    def initSubscriptions(self):
        """initSubscriptions(self) -> bool"""
        return _Client.Application_initSubscriptions(self)

    def printVersion(self):
        """printVersion(self)"""
        return _Client.Application_printVersion(self)

    def handleInitializationError(self, *args):
        """handleInitializationError(self, Stage stage) -> bool"""
        return _Client.Application_handleInitializationError(self, *args)

    def handleStartSync(self):
        """handleStartSync(self)"""
        return _Client.Application_handleStartSync(self)

    def handleEndSync(self):
        """handleEndSync(self)"""
        return _Client.Application_handleEndSync(self)

    def dispatch(self, *args):
        """dispatch(self, BaseObject arg0) -> bool"""
        return _Client.Application_dispatch(self, *args)

    def dispatchNotification(self, *args):
        """dispatchNotification(self, int type, BaseObject arg0) -> bool"""
        return _Client.Application_dispatchNotification(self, *args)

    def showMessage(self, *args):
        """showMessage(self, char arg0)"""
        return _Client.Application_showMessage(self, *args)

    def showWarning(self, *args):
        """showWarning(self, char arg0)"""
        return _Client.Application_showWarning(self, *args)

    def handleTimeout(self):
        """handleTimeout(self)"""
        return _Client.Application_handleTimeout(self)

    def handleClose(self):
        """handleClose(self) -> bool"""
        return _Client.Application_handleClose(self)

    def handleAutoShutdown(self):
        """handleAutoShutdown(self)"""
        return _Client.Application_handleAutoShutdown(self)

    def handleSync(self, *args):
        """handleSync(self, char ID)"""
        return _Client.Application_handleSync(self, *args)

    def handleDisconnect(self):
        """handleDisconnect(self)"""
        return _Client.Application_handleDisconnect(self)

    def handleReconnect(self):
        """handleReconnect(self)"""
        return _Client.Application_handleReconnect(self)

    def handleMessage(self, *args):
        """handleMessage(self, Message msg)"""
        return _Client.Application_handleMessage(self, *args)

    def handleNetworkMessage(self, *args):
        """handleNetworkMessage(self, NetworkMessage msg)"""
        return _Client.Application_handleNetworkMessage(self, *args)

    def addObject(self, *args):
        """addObject(self, string parentID, Object arg0)"""
        return _Client.Application_addObject(self, *args)

    def removeObject(self, *args):
        """removeObject(self, string parentID, Object arg0)"""
        return _Client.Application_removeObject(self, *args)

    def updateObject(self, *args):
        """updateObject(self, string parentID, Object arg0)"""
        return _Client.Application_updateObject(self, *args)

    def configGetBool(self, *args):
        """configGetBool(self, string query) -> bool"""
        return _Client.Application_configGetBool(self, *args)

    def configGetInt(self, *args):
        """configGetInt(self, string query) -> int"""
        return _Client.Application_configGetInt(self, *args)

    def configGetDouble(self, *args):
        """configGetDouble(self, string query) -> double"""
        return _Client.Application_configGetDouble(self, *args)

    def configGetString(self, *args):
        """configGetString(self, string query) -> string"""
        return _Client.Application_configGetString(self, *args)

    def configGetBools(self, *args):
        """configGetBools(self, string query) -> vectorBool"""
        return _Client.Application_configGetBools(self, *args)

    def configGetInts(self, *args):
        """configGetInts(self, string query) -> vectorInt"""
        return _Client.Application_configGetInts(self, *args)

    def configGetDoubles(self, *args):
        """configGetDoubles(self, string query) -> vectorDouble"""
        return _Client.Application_configGetDoubles(self, *args)

    def configGetStrings(self, *args):
        """configGetStrings(self, string query) -> vectorStr"""
        return _Client.Application_configGetStrings(self, *args)

    def configSetBool(self, *args):
        """configSetBool(self, string query, bool v)"""
        return _Client.Application_configSetBool(self, *args)

    def configSetInt(self, *args):
        """configSetInt(self, string query, int v)"""
        return _Client.Application_configSetInt(self, *args)

    def configSetDouble(self, *args):
        """configSetDouble(self, string query, double v)"""
        return _Client.Application_configSetDouble(self, *args)

    def configSetString(self, *args):
        """configSetString(self, string query, string v)"""
        return _Client.Application_configSetString(self, *args)

    def configSetBools(self, *args):
        """configSetBools(self, string query, vectorBool arg1)"""
        return _Client.Application_configSetBools(self, *args)

    def configSetInts(self, *args):
        """configSetInts(self, string query, vectorInt arg1)"""
        return _Client.Application_configSetInts(self, *args)

    def configSetDoubles(self, *args):
        """configSetDoubles(self, string query, vectorDouble arg1)"""
        return _Client.Application_configSetDoubles(self, *args)

    def configSetStrings(self, *args):
        """configSetStrings(self, string query, vectorStr arg1)"""
        return _Client.Application_configSetStrings(self, *args)

    def saveConfiguration(self):
        """saveConfiguration(self) -> bool"""
        return _Client.Application_saveConfiguration(self)

    def __disown__(self):
        self.this.disown()
        _Client.disown_Application(self)
        return weakref_proxy(self)
    def handleAlarm(self):
        """handleAlarm(self)"""
        return _Client.Application_handleAlarm(self)

Application_swigregister = _Client.Application_swigregister
Application_swigregister(Application)

def Application_Instance():
  """Application_Instance() -> Application"""
  return _Client.Application_Instance()

def Application_HandleSignals(*args):
  """Application_HandleSignals(bool termination, bool crash)"""
  return _Client.Application_HandleSignals(*args)

class StreamApplication(Application):
    """Proxy of C++ Seiscomp::Client::StreamApplication class"""
    __swig_setmethods__ = {}
    for _s in [Application]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamApplication, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int argc, char argv) -> StreamApplication"""
        if self.__class__ == StreamApplication:
            _self = None
        else:
            _self = self
        this = _Client.new_StreamApplication(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Client.delete_StreamApplication
    __del__ = lambda self : None;
    def openStream(self):
        """openStream(self) -> bool"""
        return _Client.StreamApplication_openStream(self)

    def closeStream(self):
        """closeStream(self)"""
        return _Client.StreamApplication_closeStream(self)

    def recordStream(self):
        """recordStream(self) -> RecordStream"""
        return _Client.StreamApplication_recordStream(self)

    def addStation(self, *args):
        """addStation(self, string networkCode, string stationCode) -> bool"""
        return _Client.StreamApplication_addStation(self, *args)

    def addStream(self, *args):
        """
        addStream(self, string networkCode, string stationCode, string locationCode, 
            string channelCode) -> bool
        """
        return _Client.StreamApplication_addStream(self, *args)

    def setStartTime(self, *args):
        """setStartTime(self, Time arg0)"""
        return _Client.StreamApplication_setStartTime(self, *args)

    def setEndTime(self, *args):
        """setEndTime(self, Time arg0)"""
        return _Client.StreamApplication_setEndTime(self, *args)

    def setTimeWindow(self, *args):
        """setTimeWindow(self, Seiscomp::Core::TimeWindow arg0) -> bool"""
        return _Client.StreamApplication_setTimeWindow(self, *args)

    def setAutoAcquisitionStart(self, *args):
        """setAutoAcquisitionStart(self, bool arg0)"""
        return _Client.StreamApplication_setAutoAcquisitionStart(self, *args)

    def requestSync(self):
        """requestSync(self)"""
        return _Client.StreamApplication_requestSync(self)

    def setRecordInputHint(self, *args):
        """setRecordInputHint(self, Hint hint)"""
        return _Client.StreamApplication_setRecordInputHint(self, *args)

    def init(self):
        """init(self) -> bool"""
        return _Client.StreamApplication_init(self)

    def run(self):
        """run(self) -> bool"""
        return _Client.StreamApplication_run(self)

    def done(self):
        """done(self)"""
        return _Client.StreamApplication_done(self)

    def dispatch(self, *args):
        """dispatch(self, BaseObject obj) -> bool"""
        return _Client.StreamApplication_dispatch(self, *args)

    def handleRecord(self, *args):
        """handleRecord(self, Record rec)"""
        return _Client.StreamApplication_handleRecord(self, *args)

    def handleEndSync(self):
        """handleEndSync(self)"""
        return _Client.StreamApplication_handleEndSync(self)

    def __disown__(self):
        self.this.disown()
        _Client.disown_StreamApplication(self)
        return weakref_proxy(self)
    def handleAlarm(self):
        """handleAlarm(self)"""
        return _Client.StreamApplication_handleAlarm(self)

    def createCommandLineDescription(self):
        """createCommandLineDescription(self)"""
        return _Client.StreamApplication_createCommandLineDescription(self)

    def validateParameters(self):
        """validateParameters(self) -> bool"""
        return _Client.StreamApplication_validateParameters(self)

    def idle(self):
        """idle(self)"""
        return _Client.StreamApplication_idle(self)

    def forkProcess(self):
        """forkProcess(self) -> bool"""
        return _Client.StreamApplication_forkProcess(self)

    def initConfiguration(self):
        """initConfiguration(self) -> bool"""
        return _Client.StreamApplication_initConfiguration(self)

    def initPlugins(self):
        """initPlugins(self) -> bool"""
        return _Client.StreamApplication_initPlugins(self)

    def initDatabase(self):
        """initDatabase(self) -> bool"""
        return _Client.StreamApplication_initDatabase(self)

    def initSubscriptions(self):
        """initSubscriptions(self) -> bool"""
        return _Client.StreamApplication_initSubscriptions(self)

    def printVersion(self):
        """printVersion(self)"""
        return _Client.StreamApplication_printVersion(self)

    def handleInitializationError(self, *args):
        """handleInitializationError(self, Stage stage) -> bool"""
        return _Client.StreamApplication_handleInitializationError(self, *args)

    def handleStartSync(self):
        """handleStartSync(self)"""
        return _Client.StreamApplication_handleStartSync(self)

    def dispatchNotification(self, *args):
        """dispatchNotification(self, int type, BaseObject arg0) -> bool"""
        return _Client.StreamApplication_dispatchNotification(self, *args)

    def showMessage(self, *args):
        """showMessage(self, char arg0)"""
        return _Client.StreamApplication_showMessage(self, *args)

    def showWarning(self, *args):
        """showWarning(self, char arg0)"""
        return _Client.StreamApplication_showWarning(self, *args)

    def handleTimeout(self):
        """handleTimeout(self)"""
        return _Client.StreamApplication_handleTimeout(self)

    def handleClose(self):
        """handleClose(self) -> bool"""
        return _Client.StreamApplication_handleClose(self)

    def handleAutoShutdown(self):
        """handleAutoShutdown(self)"""
        return _Client.StreamApplication_handleAutoShutdown(self)

    def handleSync(self, *args):
        """handleSync(self, char ID)"""
        return _Client.StreamApplication_handleSync(self, *args)

    def handleDisconnect(self):
        """handleDisconnect(self)"""
        return _Client.StreamApplication_handleDisconnect(self)

    def handleReconnect(self):
        """handleReconnect(self)"""
        return _Client.StreamApplication_handleReconnect(self)

    def handleMessage(self, *args):
        """handleMessage(self, Message msg)"""
        return _Client.StreamApplication_handleMessage(self, *args)

    def handleNetworkMessage(self, *args):
        """handleNetworkMessage(self, NetworkMessage msg)"""
        return _Client.StreamApplication_handleNetworkMessage(self, *args)

    def addObject(self, *args):
        """addObject(self, string parentID, Object arg0)"""
        return _Client.StreamApplication_addObject(self, *args)

    def removeObject(self, *args):
        """removeObject(self, string parentID, Object arg0)"""
        return _Client.StreamApplication_removeObject(self, *args)

    def updateObject(self, *args):
        """updateObject(self, string parentID, Object arg0)"""
        return _Client.StreamApplication_updateObject(self, *args)

StreamApplication_swigregister = _Client.StreamApplication_swigregister
StreamApplication_swigregister(StreamApplication)

class StationLocation(_object):
    """Proxy of C++ Seiscomp::Client::StationLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StationLocation
        __init__(self, double lat, double lon, double elevation) -> StationLocation
        """
        this = _Client.new_StationLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["latitude"] = _Client.StationLocation_latitude_set
    __swig_getmethods__["latitude"] = _Client.StationLocation_latitude_get
    if _newclass:latitude = _swig_property(_Client.StationLocation_latitude_get, _Client.StationLocation_latitude_set)
    __swig_setmethods__["longitude"] = _Client.StationLocation_longitude_set
    __swig_getmethods__["longitude"] = _Client.StationLocation_longitude_get
    if _newclass:longitude = _swig_property(_Client.StationLocation_longitude_get, _Client.StationLocation_longitude_set)
    __swig_setmethods__["elevation"] = _Client.StationLocation_elevation_set
    __swig_getmethods__["elevation"] = _Client.StationLocation_elevation_get
    if _newclass:elevation = _swig_property(_Client.StationLocation_elevation_get, _Client.StationLocation_elevation_set)
    __swig_destroy__ = _Client.delete_StationLocation
    __del__ = lambda self : None;
StationLocation_swigregister = _Client.StationLocation_swigregister
StationLocation_swigregister(StationLocation)

class Inventory(_object):
    """Proxy of C++ Seiscomp::Client::Inventory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inventory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Inventory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Instance():
        """Instance() -> Inventory"""
        return _Client.Inventory_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def load(self, *args):
        """
        load(self, char filename)
        load(self, DatabaseReader arg0)
        """
        return _Client.Inventory_load(self, *args)

    def setInventory(self, *args):
        """setInventory(self, Inventory arg0)"""
        return _Client.Inventory_setInventory(self, *args)

    def filter(self, *args):
        """
        filter(self, TypeWhiteList networkTypeWhitelist, TypeWhiteList networkTypeBlacklist, 
            TypeWhiteList stationTypeWhitelist, 
            TypeWhiteList stationTypeBlacklist) -> int
        """
        return _Client.Inventory_filter(self, *args)

    def loadStations(self, *args):
        """loadStations(self, DatabaseReader arg0)"""
        return _Client.Inventory_loadStations(self, *args)

    def stationLocation(self, *args):
        """stationLocation(self, string networkCode, string stationCode, Time arg2) -> StationLocation"""
        return _Client.Inventory_stationLocation(self, *args)

    def getStream(self, *args):
        """
        getStream(self, string networkCode, string stationCode, string locationCode, 
            string channelCode, Time arg4) -> Stream
        """
        return _Client.Inventory_getStream(self, *args)

    def getStation(self, *args):
        """
        getStation(self, string networkCode, string stationCode, Time arg2) -> Station
        getStation(self, Pick arg0) -> Station
        """
        return _Client.Inventory_getStation(self, *args)

    def getSensorLocation(self, *args):
        """
        getSensorLocation(self, string networkCode, string stationCode, string locationCode, 
            Time arg3) -> SensorLocation
        getSensorLocation(self, Pick arg0) -> SensorLocation
        """
        return _Client.Inventory_getSensorLocation(self, *args)

    def getThreeComponents(self, *args):
        """
        getThreeComponents(self, string networkCode, string stationCode, string locationCode, 
            string channelCode, Time arg4) -> ThreeComponents
        getThreeComponents(self, Pick arg0) -> ThreeComponents
        """
        return _Client.Inventory_getThreeComponents(self, *args)

    def getGain(self, *args):
        """
        getGain(self, string networkCode, string stationCode, string locationCode, 
            string channelCode, Time arg4) -> double
        """
        return _Client.Inventory_getGain(self, *args)

    def getAllStations(self, *args):
        """getAllStations(self, StationList arg0, Time arg1) -> int"""
        return _Client.Inventory_getAllStations(self, *args)

    def inventory(self):
        """inventory(self) -> Inventory"""
        return _Client.Inventory_inventory(self)

    __swig_destroy__ = _Client.delete_Inventory
    __del__ = lambda self : None;
Inventory_swigregister = _Client.Inventory_swigregister
Inventory_swigregister(Inventory)

def Inventory_Instance():
  """Inventory_Instance() -> Inventory"""
  return _Client.Inventory_Instance()

class ConfigDB(_object):
    """Proxy of C++ Seiscomp::Client::ConfigDB class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigDB, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Instance():
        """Instance() -> ConfigDB"""
        return _Client.ConfigDB_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def load(self, *args):
        """
        load(self, DatabaseReader reader, Seiscomp::Core::Optional<(std::string)>::Impl moduleName = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl networkCode = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl stationCode = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl setupName = Unset, 
            std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> parameterNames = std::set< std::string >())
        load(self, DatabaseReader reader, Seiscomp::Core::Optional<(std::string)>::Impl moduleName = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl networkCode = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl stationCode = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl setupName = Unset)
        load(self, DatabaseReader reader, Seiscomp::Core::Optional<(std::string)>::Impl moduleName = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl networkCode = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl stationCode = Unset)
        load(self, DatabaseReader reader, Seiscomp::Core::Optional<(std::string)>::Impl moduleName = Unset, 
            Seiscomp::Core::Optional<(std::string)>::Impl networkCode = Unset)
        load(self, DatabaseReader reader, Seiscomp::Core::Optional<(std::string)>::Impl moduleName = Unset)
        load(self, DatabaseReader reader)
        load(self, char xml)
        """
        return _Client.ConfigDB_load(self, *args)

    def config(self):
        """config(self) -> Config"""
        return _Client.ConfigDB_config(self)

    __swig_destroy__ = _Client.delete_ConfigDB
    __del__ = lambda self : None;
ConfigDB_swigregister = _Client.ConfigDB_swigregister
ConfigDB_swigregister(ConfigDB)

def ConfigDB_Instance():
  """ConfigDB_Instance() -> ConfigDB"""
  return _Client.ConfigDB_Instance()

class PluginRegistry(_object):
    """Proxy of C++ Seiscomp::Client::PluginRegistry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_PluginRegistry
    __del__ = lambda self : None;
    def Instance():
        """Instance() -> PluginRegistry"""
        return _Client.PluginRegistry_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def addPluginName(self, *args):
        """addPluginName(self, string name)"""
        return _Client.PluginRegistry_addPluginName(self, *args)

    def addPluginPath(self, *args):
        """addPluginPath(self, string path)"""
        return _Client.PluginRegistry_addPluginPath(self, *args)

    def addPackagePath(self, *args):
        """addPackagePath(self, string package)"""
        return _Client.PluginRegistry_addPackagePath(self, *args)

    def loadPlugins(self):
        """loadPlugins(self) -> int"""
        return _Client.PluginRegistry_loadPlugins(self)

    def loadConfiguredPlugins(self, *args):
        """loadConfiguredPlugins(self, Config config) -> int"""
        return _Client.PluginRegistry_loadConfiguredPlugins(self, *args)

    def freePlugins(self):
        """freePlugins(self)"""
        return _Client.PluginRegistry_freePlugins(self)

    def pluginCount(self):
        """pluginCount(self) -> int"""
        return _Client.PluginRegistry_pluginCount(self)

PluginRegistry_swigregister = _Client.PluginRegistry_swigregister
PluginRegistry_swigregister(PluginRegistry)

def PluginRegistry_Instance():
  """PluginRegistry_Instance() -> PluginRegistry"""
  return _Client.PluginRegistry_Instance()

# This file is compatible with both classic and new-style classes.


