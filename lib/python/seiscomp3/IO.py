# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4a
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IO', [dirname(__file__)])
        except ImportError:
            import _IO
            return _IO
        if fp is not None:
            try:
                _mod = imp.load_module('_IO', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IO = swig_import_helper()
    del swig_import_helper
else:
    import _IO
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IO.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _IO.SwigPyIterator_value(self)
    def incr(self, n = 1): return _IO.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _IO.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _IO.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _IO.SwigPyIterator_equal(self, *args)
    def copy(self): return _IO.SwigPyIterator_copy(self)
    def next(self): return _IO.SwigPyIterator_next(self)
    def __next__(self): return _IO.SwigPyIterator___next__(self)
    def previous(self): return _IO.SwigPyIterator_previous(self)
    def advance(self, *args): return _IO.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _IO.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _IO.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _IO.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _IO.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _IO.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _IO.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _IO.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _IO.ios_base_erase_event
    imbue_event = _IO.ios_base_imbue_event
    copyfmt_event = _IO.ios_base_copyfmt_event
    def register_callback(self, *args): return _IO.ios_base_register_callback(self, *args)
    def flags(self, *args): return _IO.ios_base_flags(self, *args)
    def setf(self, *args): return _IO.ios_base_setf(self, *args)
    def unsetf(self, *args): return _IO.ios_base_unsetf(self, *args)
    def precision(self, *args): return _IO.ios_base_precision(self, *args)
    def width(self, *args): return _IO.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _IO.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_IO.ios_base_sync_with_stdio)
    def imbue(self, *args): return _IO.ios_base_imbue(self, *args)
    def getloc(self): return _IO.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _IO.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_IO.ios_base_xalloc)
    def iword(self, *args): return _IO.ios_base_iword(self, *args)
    def pword(self, *args): return _IO.ios_base_pword(self, *args)
    __swig_destroy__ = _IO.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _IO.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _IO.cvar
ios_base.boolalpha = _IO.cvar.ios_base_boolalpha
ios_base.dec = _IO.cvar.ios_base_dec
ios_base.fixed = _IO.cvar.ios_base_fixed
ios_base.hex = _IO.cvar.ios_base_hex
ios_base.internal = _IO.cvar.ios_base_internal
ios_base.left = _IO.cvar.ios_base_left
ios_base.oct = _IO.cvar.ios_base_oct
ios_base.right = _IO.cvar.ios_base_right
ios_base.scientific = _IO.cvar.ios_base_scientific
ios_base.showbase = _IO.cvar.ios_base_showbase
ios_base.showpoint = _IO.cvar.ios_base_showpoint
ios_base.showpos = _IO.cvar.ios_base_showpos
ios_base.skipws = _IO.cvar.ios_base_skipws
ios_base.unitbuf = _IO.cvar.ios_base_unitbuf
ios_base.uppercase = _IO.cvar.ios_base_uppercase
ios_base.adjustfield = _IO.cvar.ios_base_adjustfield
ios_base.basefield = _IO.cvar.ios_base_basefield
ios_base.floatfield = _IO.cvar.ios_base_floatfield
ios_base.badbit = _IO.cvar.ios_base_badbit
ios_base.eofbit = _IO.cvar.ios_base_eofbit
ios_base.failbit = _IO.cvar.ios_base_failbit
ios_base.goodbit = _IO.cvar.ios_base_goodbit
ios_base.app = _IO.cvar.ios_base_app
ios_base.ate = _IO.cvar.ios_base_ate
ios_base.binary = _IO.cvar.ios_base_binary
ios_base.ios_base_in = _IO.cvar.ios_base_ios_base_in
ios_base.out = _IO.cvar.ios_base_out
ios_base.trunc = _IO.cvar.ios_base_trunc
ios_base.beg = _IO.cvar.ios_base_beg
ios_base.cur = _IO.cvar.ios_base_cur
ios_base.end = _IO.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  return _IO.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _IO.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _IO.ios_base_xalloc()
ios_base_xalloc = _IO.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _IO.ios_rdstate(self)
    def clear(self, *args): return _IO.ios_clear(self, *args)
    def setstate(self, *args): return _IO.ios_setstate(self, *args)
    def good(self): return _IO.ios_good(self)
    def eof(self): return _IO.ios_eof(self)
    def fail(self): return _IO.ios_fail(self)
    def bad(self): return _IO.ios_bad(self)
    def exceptions(self, *args): return _IO.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _IO.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _IO.ios_tie(self, *args)
    def rdbuf(self, *args): return _IO.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _IO.ios_copyfmt(self, *args)
    def fill(self, *args): return _IO.ios_fill(self, *args)
    def imbue(self, *args): return _IO.ios_imbue(self, *args)
    def narrow(self, *args): return _IO.ios_narrow(self, *args)
    def widen(self, *args): return _IO.ios_widen(self, *args)
ios_swigregister = _IO.ios_swigregister
ios_swigregister(ios)

import Core
class DatabaseInterface(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.DatabaseInterface_ClassName
    if _newclass:ClassName = staticmethod(_IO.DatabaseInterface_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.DatabaseInterface_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.DatabaseInterface_TypeInfo)
    def className(self): return _IO.DatabaseInterface_className(self)
    def typeInfo(self): return _IO.DatabaseInterface_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.DatabaseInterface_Cast
    if _newclass:Cast = staticmethod(_IO.DatabaseInterface_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.DatabaseInterface_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.DatabaseInterface_ConstCast)
    __swig_destroy__ = _IO.delete_DatabaseInterface
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _IO.DatabaseInterface_Create
    if _newclass:Create = staticmethod(_IO.DatabaseInterface_Create)
    __swig_getmethods__["Open"] = lambda x: _IO.DatabaseInterface_Open
    if _newclass:Open = staticmethod(_IO.DatabaseInterface_Open)
    def connect(self, *args): return _IO.DatabaseInterface_connect(self, *args)
    def disconnect(self): return _IO.DatabaseInterface_disconnect(self)
    def isConnected(self): return _IO.DatabaseInterface_isConnected(self)
    def start(self): return _IO.DatabaseInterface_start(self)
    def commit(self): return _IO.DatabaseInterface_commit(self)
    def rollback(self): return _IO.DatabaseInterface_rollback(self)
    def execute(self, *args): return _IO.DatabaseInterface_execute(self, *args)
    def beginQuery(self, *args): return _IO.DatabaseInterface_beginQuery(self, *args)
    def endQuery(self): return _IO.DatabaseInterface_endQuery(self)
    def defaultValue(self): return _IO.DatabaseInterface_defaultValue(self)
    def lastInsertId(self, *args): return _IO.DatabaseInterface_lastInsertId(self, *args)
    def fetchRow(self): return _IO.DatabaseInterface_fetchRow(self)
    def findColumn(self, *args): return _IO.DatabaseInterface_findColumn(self, *args)
    def getRowFieldCount(self): return _IO.DatabaseInterface_getRowFieldCount(self)
    def getRowField(self, *args): return _IO.DatabaseInterface_getRowField(self, *args)
    def getRowFieldString(self, *args): return _IO.DatabaseInterface_getRowFieldString(self, *args)
    def getRowFieldSize(self, *args): return _IO.DatabaseInterface_getRowFieldSize(self, *args)
    def timeToString(self, *args): return _IO.DatabaseInterface_timeToString(self, *args)
    def stringToTime(self, *args): return _IO.DatabaseInterface_stringToTime(self, *args)
    def columnPrefix(self): return _IO.DatabaseInterface_columnPrefix(self)
    def convertColumnName(self, *args): return _IO.DatabaseInterface_convertColumnName(self, *args)
DatabaseInterface_swigregister = _IO.DatabaseInterface_swigregister
DatabaseInterface_swigregister(DatabaseInterface)

def DatabaseInterface_ClassName():
  return _IO.DatabaseInterface_ClassName()
DatabaseInterface_ClassName = _IO.DatabaseInterface_ClassName

def DatabaseInterface_TypeInfo():
  return _IO.DatabaseInterface_TypeInfo()
DatabaseInterface_TypeInfo = _IO.DatabaseInterface_TypeInfo

def DatabaseInterface_Cast(*args):
  return _IO.DatabaseInterface_Cast(*args)
DatabaseInterface_Cast = _IO.DatabaseInterface_Cast

def DatabaseInterface_ConstCast(*args):
  return _IO.DatabaseInterface_ConstCast(*args)
DatabaseInterface_ConstCast = _IO.DatabaseInterface_ConstCast

def DatabaseInterface_Create(*args):
  return _IO.DatabaseInterface_Create(*args)
DatabaseInterface_Create = _IO.DatabaseInterface_Create

def DatabaseInterface_Open(*args):
  return _IO.DatabaseInterface_Open(*args)
DatabaseInterface_Open = _IO.DatabaseInterface_Open

class GFArchive(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GFArchive, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.GFArchive_ClassName
    if _newclass:ClassName = staticmethod(_IO.GFArchive_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.GFArchive_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.GFArchive_TypeInfo)
    def className(self): return _IO.GFArchive_className(self)
    def typeInfo(self): return _IO.GFArchive_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.GFArchive_Cast
    if _newclass:Cast = staticmethod(_IO.GFArchive_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.GFArchive_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.GFArchive_ConstCast)
    __swig_destroy__ = _IO.delete_GFArchive
    __del__ = lambda self : None;
    def setSource(self, *args): return _IO.GFArchive_setSource(self, *args)
    def close(self): return _IO.GFArchive_close(self)
    def availableModels(self): return _IO.GFArchive_availableModels(self)
    def availableDepths(self, *args): return _IO.GFArchive_availableDepths(self, *args)
    def setTimeSpan(self, *args): return _IO.GFArchive_setTimeSpan(self, *args)
    def addRequest(self, *args): return _IO.GFArchive_addRequest(self, *args)
    def get(self): return _IO.GFArchive_get(self)
    __swig_getmethods__["Create"] = lambda x: _IO.GFArchive_Create
    if _newclass:Create = staticmethod(_IO.GFArchive_Create)
    __swig_getmethods__["Open"] = lambda x: _IO.GFArchive_Open
    if _newclass:Open = staticmethod(_IO.GFArchive_Open)
GFArchive_swigregister = _IO.GFArchive_swigregister
GFArchive_swigregister(GFArchive)

def GFArchive_ClassName():
  return _IO.GFArchive_ClassName()
GFArchive_ClassName = _IO.GFArchive_ClassName

def GFArchive_TypeInfo():
  return _IO.GFArchive_TypeInfo()
GFArchive_TypeInfo = _IO.GFArchive_TypeInfo

def GFArchive_Cast(*args):
  return _IO.GFArchive_Cast(*args)
GFArchive_Cast = _IO.GFArchive_Cast

def GFArchive_ConstCast(*args):
  return _IO.GFArchive_ConstCast(*args)
GFArchive_ConstCast = _IO.GFArchive_ConstCast

def GFArchive_Create(*args):
  return _IO.GFArchive_Create(*args)
GFArchive_Create = _IO.GFArchive_Create

def GFArchive_Open(*args):
  return _IO.GFArchive_Open(*args)
GFArchive_Open = _IO.GFArchive_Open

class RecordStream(Core.InterruptibleObject):
    __swig_setmethods__ = {}
    for _s in [Core.InterruptibleObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.InterruptibleObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.RecordStream_ClassName
    if _newclass:ClassName = staticmethod(_IO.RecordStream_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.RecordStream_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.RecordStream_TypeInfo)
    def className(self): return _IO.RecordStream_className(self)
    def typeInfo(self): return _IO.RecordStream_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.RecordStream_Cast
    if _newclass:Cast = staticmethod(_IO.RecordStream_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.RecordStream_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.RecordStream_ConstCast)
    __swig_destroy__ = _IO.delete_RecordStream
    __del__ = lambda self : None;
    def setRecordType(self, *args): return _IO.RecordStream_setRecordType(self, *args)
    def setSource(self, *args): return _IO.RecordStream_setSource(self, *args)
    def close(self): return _IO.RecordStream_close(self)
    def addStream(self, *args): return _IO.RecordStream_addStream(self, *args)
    def setStartTime(self, *args): return _IO.RecordStream_setStartTime(self, *args)
    def setEndTime(self, *args): return _IO.RecordStream_setEndTime(self, *args)
    def setTimeWindow(self, *args): return _IO.RecordStream_setTimeWindow(self, *args)
    def setTimeout(self, *args): return _IO.RecordStream_setTimeout(self, *args)
    def stream(self): return _IO.RecordStream_stream(self)
    def createRecord(self, *args): return _IO.RecordStream_createRecord(self, *args)
    def recordStored(self, *args): return _IO.RecordStream_recordStored(self, *args)
    __swig_getmethods__["Create"] = lambda x: _IO.RecordStream_Create
    if _newclass:Create = staticmethod(_IO.RecordStream_Create)
    __swig_getmethods__["Open"] = lambda x: _IO.RecordStream_Open
    if _newclass:Open = staticmethod(_IO.RecordStream_Open)
RecordStream_swigregister = _IO.RecordStream_swigregister
RecordStream_swigregister(RecordStream)

def RecordStream_ClassName():
  return _IO.RecordStream_ClassName()
RecordStream_ClassName = _IO.RecordStream_ClassName

def RecordStream_TypeInfo():
  return _IO.RecordStream_TypeInfo()
RecordStream_TypeInfo = _IO.RecordStream_TypeInfo

def RecordStream_Cast(*args):
  return _IO.RecordStream_Cast(*args)
RecordStream_Cast = _IO.RecordStream_Cast

def RecordStream_ConstCast(*args):
  return _IO.RecordStream_ConstCast(*args)
RecordStream_ConstCast = _IO.RecordStream_ConstCast

def RecordStream_Create(*args):
  return _IO.RecordStream_Create(*args)
RecordStream_Create = _IO.RecordStream_Create

def RecordStream_Open(*args):
  return _IO.RecordStream_Open(*args)
RecordStream_Open = _IO.RecordStream_Open

class RecordIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecordIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_RecordIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_RecordIterator
    __del__ = lambda self : None;
    def __ref__(self): return _IO.RecordIterator___ref__(self)
    def __ne__(self, *args): return _IO.RecordIterator___ne__(self, *args)
    def __eq__(self, *args): return _IO.RecordIterator___eq__(self, *args)
    def source(self): return _IO.RecordIterator_source(self)
    def current(self): return _IO.RecordIterator_current(self)
RecordIterator_swigregister = _IO.RecordIterator_swigregister
RecordIterator_swigregister(RecordIterator)

class RecordInput(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordInput, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordInput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_RecordInput(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(self): return _IO.RecordInput_begin(self)
    def end(self): return _IO.RecordInput_end(self)
    def next(self): return _IO.RecordInput_next(self)
    def __iter__(self):
        while 1:
            rec = self.next()
            if not rec:
                raise StopIteration

            yield rec

    __swig_destroy__ = _IO.delete_RecordInput
    __del__ = lambda self : None;
RecordInput_swigregister = _IO.RecordInput_swigregister
RecordInput_swigregister(RecordInput)

class RecordStreamException(Core.StreamException):
    __swig_setmethods__ = {}
    for _s in [Core.StreamException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStreamException, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.StreamException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStreamException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_RecordStreamException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_RecordStreamException
    __del__ = lambda self : None;
RecordStreamException_swigregister = _IO.RecordStreamException_swigregister
RecordStreamException_swigregister(RecordStreamException)

class RecordStreamTimeout(RecordStreamException):
    __swig_setmethods__ = {}
    for _s in [RecordStreamException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStreamTimeout, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStreamTimeout, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_RecordStreamTimeout(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_RecordStreamTimeout
    __del__ = lambda self : None;
RecordStreamTimeout_swigregister = _IO.RecordStreamTimeout_swigregister
RecordStreamTimeout_swigregister(RecordStreamTimeout)

class Importer(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Importer, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Importer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.Importer_ClassName
    if _newclass:ClassName = staticmethod(_IO.Importer_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.Importer_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.Importer_TypeInfo)
    def className(self): return _IO.Importer_className(self)
    def typeInfo(self): return _IO.Importer_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.Importer_Cast
    if _newclass:Cast = staticmethod(_IO.Importer_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.Importer_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.Importer_ConstCast)
    __swig_destroy__ = _IO.delete_Importer
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _IO.Importer_Create
    if _newclass:Create = staticmethod(_IO.Importer_Create)
    def read(self, *args): return _IO.Importer_read(self, *args)
    def withoutErrors(self): return _IO.Importer_withoutErrors(self)
Importer_swigregister = _IO.Importer_swigregister
Importer_swigregister(Importer)

def Importer_ClassName():
  return _IO.Importer_ClassName()
Importer_ClassName = _IO.Importer_ClassName

def Importer_TypeInfo():
  return _IO.Importer_TypeInfo()
Importer_TypeInfo = _IO.Importer_TypeInfo

def Importer_Cast(*args):
  return _IO.Importer_Cast(*args)
Importer_Cast = _IO.Importer_Cast

def Importer_ConstCast(*args):
  return _IO.Importer_ConstCast(*args)
Importer_ConstCast = _IO.Importer_ConstCast

def Importer_Create(*args):
  return _IO.Importer_Create(*args)
Importer_Create = _IO.Importer_Create

class ExportSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExportSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExportSink, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IO.delete_ExportSink
    __del__ = lambda self : None;
    def write(self, *args): return _IO.ExportSink_write(self, *args)
    def __init__(self): 
        if self.__class__ == ExportSink:
            _self = None
        else:
            _self = self
        this = _IO.new_ExportSink(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _IO.disown_ExportSink(self)
        return weakref_proxy(self)
ExportSink_swigregister = _IO.ExportSink_swigregister
ExportSink_swigregister(ExportSink)

class Exporter(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exporter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.Exporter_ClassName
    if _newclass:ClassName = staticmethod(_IO.Exporter_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.Exporter_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.Exporter_TypeInfo)
    def className(self): return _IO.Exporter_className(self)
    def typeInfo(self): return _IO.Exporter_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.Exporter_Cast
    if _newclass:Cast = staticmethod(_IO.Exporter_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.Exporter_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.Exporter_ConstCast)
    __swig_destroy__ = _IO.delete_Exporter
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _IO.Exporter_Create
    if _newclass:Create = staticmethod(_IO.Exporter_Create)
    def setFormattedOutput(self, *args): return _IO.Exporter_setFormattedOutput(self, *args)
    def setIndent(self, *args): return _IO.Exporter_setIndent(self, *args)
    def write(self, *args): return _IO.Exporter_write(self, *args)
Exporter_swigregister = _IO.Exporter_swigregister
Exporter_swigregister(Exporter)

def Exporter_ClassName():
  return _IO.Exporter_ClassName()
Exporter_ClassName = _IO.Exporter_ClassName

def Exporter_TypeInfo():
  return _IO.Exporter_TypeInfo()
Exporter_TypeInfo = _IO.Exporter_TypeInfo

def Exporter_Cast(*args):
  return _IO.Exporter_Cast(*args)
Exporter_Cast = _IO.Exporter_Cast

def Exporter_ConstCast(*args):
  return _IO.Exporter_ConstCast(*args)
Exporter_ConstCast = _IO.Exporter_ConstCast

def Exporter_Create(*args):
  return _IO.Exporter_Create(*args)
Exporter_Create = _IO.Exporter_Create

class XMLArchive(Core.GenericArchive):
    __swig_setmethods__ = {}
    for _s in [Core.GenericArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.GenericArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_XMLArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_XMLArchive
    __del__ = lambda self : None;
    def open(self, *args): return _IO.XMLArchive_open(self, *args)
    def create(self, *args): return _IO.XMLArchive_create(self, *args)
    def close(self): return _IO.XMLArchive_close(self)
    def setRootName(self, *args): return _IO.XMLArchive_setRootName(self, *args)
    def setFormattedOutput(self, *args): return _IO.XMLArchive_setFormattedOutput(self, *args)
    def setCompression(self, *args): return _IO.XMLArchive_setCompression(self, *args)
    def rootNamespace(self): return _IO.XMLArchive_rootNamespace(self)
    def rootNamespaceUri(self): return _IO.XMLArchive_rootNamespaceUri(self)
    def setRootNamespace(self, *args): return _IO.XMLArchive_setRootNamespace(self, *args)
    def read(self, *args): return _IO.XMLArchive_read(self, *args)
    def write(self, *args): return _IO.XMLArchive_write(self, *args)
XMLArchive_swigregister = _IO.XMLArchive_swigregister
XMLArchive_swigregister(XMLArchive)

class BinaryArchive(Core.GenericArchive):
    __swig_setmethods__ = {}
    for _s in [Core.GenericArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.GenericArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_BinaryArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_BinaryArchive
    __del__ = lambda self : None;
    def open(self, *args): return _IO.BinaryArchive_open(self, *args)
    def create(self, *args): return _IO.BinaryArchive_create(self, *args)
    def close(self): return _IO.BinaryArchive_close(self)
    def read(self, *args): return _IO.BinaryArchive_read(self, *args)
    def write(self, *args): return _IO.BinaryArchive_write(self, *args)
BinaryArchive_swigregister = _IO.BinaryArchive_swigregister
BinaryArchive_swigregister(BinaryArchive)

class VBinaryArchive(BinaryArchive):
    __swig_setmethods__ = {}
    for _s in [BinaryArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VBinaryArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VBinaryArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_VBinaryArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    def setWriteVersion(self, *args): return _IO.VBinaryArchive_setWriteVersion(self, *args)
    def open(self, *args): return _IO.VBinaryArchive_open(self, *args)
    def create(self, *args): return _IO.VBinaryArchive_create(self, *args)
    def close(self): return _IO.VBinaryArchive_close(self)
    def errorMsg(self): return _IO.VBinaryArchive_errorMsg(self)
    __swig_destroy__ = _IO.delete_VBinaryArchive
    __del__ = lambda self : None;
VBinaryArchive_swigregister = _IO.VBinaryArchive_swigregister
VBinaryArchive_swigregister(VBinaryArchive)

NEXTRAS = _IO.NEXTRAS
AH_DATATYPE_UNDEFINED = _IO.AH_DATATYPE_UNDEFINED
AH_DATATYPE_FLOAT = _IO.AH_DATATYPE_FLOAT
AH_DATATYPE_COMPLEX = _IO.AH_DATATYPE_COMPLEX
AH_DATATYPE_VECTOR = _IO.AH_DATATYPE_VECTOR
AH_DATATYPE_TENSOR = _IO.AH_DATATYPE_TENSOR
AH_DATATYPE_DOUBLE = _IO.AH_DATATYPE_DOUBLE
class AHRecord(Core.Record):
    __swig_setmethods__ = {}
    for _s in [Core.Record]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AHRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Record]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AHRecord, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.AHRecord_ClassName
    if _newclass:ClassName = staticmethod(_IO.AHRecord_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.AHRecord_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.AHRecord_TypeInfo)
    def className(self): return _IO.AHRecord_className(self)
    def typeInfo(self): return _IO.AHRecord_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.AHRecord_Cast
    if _newclass:Cast = staticmethod(_IO.AHRecord_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.AHRecord_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.AHRecord_ConstCast)
    def __init__(self, *args): 
        this = _IO.new_AHRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_AHRecord
    __del__ = lambda self : None;
    def setSamplingFrequency(self, *args): return _IO.AHRecord_setSamplingFrequency(self, *args)
    def data(self, *args): return _IO.AHRecord_data(self, *args)
    def raw(self): return _IO.AHRecord_raw(self)
    def setData(self, *args): return _IO.AHRecord_setData(self, *args)
    def saveSpace(self): return _IO.AHRecord_saveSpace(self)
    def copy(self): return _IO.AHRecord_copy(self)
    def read(self, *args): return _IO.AHRecord_read(self, *args)
    def write(self, *args): return _IO.AHRecord_write(self, *args)
    def gain(self): return _IO.AHRecord_gain(self)
    def setGain(self, *args): return _IO.AHRecord_setGain(self, *args)
    def extra(self, *args): return _IO.AHRecord_extra(self, *args)
    def setExtra(self, *args): return _IO.AHRecord_setExtra(self, *args)
    __swig_setmethods__["elat"] = _IO.AHRecord_elat_set
    __swig_getmethods__["elat"] = _IO.AHRecord_elat_get
    if _newclass:elat = _swig_property(_IO.AHRecord_elat_get, _IO.AHRecord_elat_set)
    __swig_setmethods__["elon"] = _IO.AHRecord_elon_set
    __swig_getmethods__["elon"] = _IO.AHRecord_elon_get
    if _newclass:elon = _swig_property(_IO.AHRecord_elon_get, _IO.AHRecord_elon_set)
    __swig_setmethods__["edep"] = _IO.AHRecord_edep_set
    __swig_getmethods__["edep"] = _IO.AHRecord_edep_get
    if _newclass:edep = _swig_property(_IO.AHRecord_edep_get, _IO.AHRecord_edep_set)
    __swig_setmethods__["etim"] = _IO.AHRecord_etim_set
    __swig_getmethods__["etim"] = _IO.AHRecord_etim_get
    if _newclass:etim = _swig_property(_IO.AHRecord_etim_get, _IO.AHRecord_etim_set)
    __swig_setmethods__["com"] = _IO.AHRecord_com_set
    __swig_getmethods__["com"] = _IO.AHRecord_com_get
    if _newclass:com = _swig_property(_IO.AHRecord_com_get, _IO.AHRecord_com_set)
    __swig_setmethods__["ecom"] = _IO.AHRecord_ecom_set
    __swig_getmethods__["ecom"] = _IO.AHRecord_ecom_get
    if _newclass:ecom = _swig_property(_IO.AHRecord_ecom_get, _IO.AHRecord_ecom_set)
    __swig_setmethods__["log"] = _IO.AHRecord_log_set
    __swig_getmethods__["log"] = _IO.AHRecord_log_get
    if _newclass:log = _swig_property(_IO.AHRecord_log_get, _IO.AHRecord_log_set)
    __swig_setmethods__["slat"] = _IO.AHRecord_slat_set
    __swig_getmethods__["slat"] = _IO.AHRecord_slat_get
    if _newclass:slat = _swig_property(_IO.AHRecord_slat_get, _IO.AHRecord_slat_set)
    __swig_setmethods__["slon"] = _IO.AHRecord_slon_set
    __swig_getmethods__["slon"] = _IO.AHRecord_slon_get
    if _newclass:slon = _swig_property(_IO.AHRecord_slon_get, _IO.AHRecord_slon_set)
    __swig_setmethods__["salt"] = _IO.AHRecord_salt_set
    __swig_getmethods__["salt"] = _IO.AHRecord_salt_get
    if _newclass:salt = _swig_property(_IO.AHRecord_salt_get, _IO.AHRecord_salt_set)
    __swig_setmethods__["sgain"] = _IO.AHRecord_sgain_set
    __swig_getmethods__["sgain"] = _IO.AHRecord_sgain_get
    if _newclass:sgain = _swig_property(_IO.AHRecord_sgain_get, _IO.AHRecord_sgain_set)
    __swig_setmethods__["snorm"] = _IO.AHRecord_snorm_set
    __swig_getmethods__["snorm"] = _IO.AHRecord_snorm_get
    if _newclass:snorm = _swig_property(_IO.AHRecord_snorm_get, _IO.AHRecord_snorm_set)
    __swig_setmethods__["rmin"] = _IO.AHRecord_rmin_set
    __swig_getmethods__["rmin"] = _IO.AHRecord_rmin_get
    if _newclass:rmin = _swig_property(_IO.AHRecord_rmin_get, _IO.AHRecord_rmin_set)
    __swig_setmethods__["maxamp"] = _IO.AHRecord_maxamp_set
    __swig_getmethods__["maxamp"] = _IO.AHRecord_maxamp_get
    if _newclass:maxamp = _swig_property(_IO.AHRecord_maxamp_get, _IO.AHRecord_maxamp_set)
    __swig_setmethods__["delta"] = _IO.AHRecord_delta_set
    __swig_getmethods__["delta"] = _IO.AHRecord_delta_get
    if _newclass:delta = _swig_property(_IO.AHRecord_delta_get, _IO.AHRecord_delta_set)
    __swig_setmethods__["cal"] = _IO.AHRecord_cal_set
    __swig_getmethods__["cal"] = _IO.AHRecord_cal_get
    if _newclass:cal = _swig_property(_IO.AHRecord_cal_get, _IO.AHRecord_cal_set)
    __swig_setmethods__["_delta"] = _IO.AHRecord__delta_set
    __swig_getmethods__["_delta"] = _IO.AHRecord__delta_get
    if _newclass:_delta = _swig_property(_IO.AHRecord__delta_get, _IO.AHRecord__delta_set)
AHRecord_swigregister = _IO.AHRecord_swigregister
AHRecord_swigregister(AHRecord)

def AHRecord_ClassName():
  return _IO.AHRecord_ClassName()
AHRecord_ClassName = _IO.AHRecord_ClassName

def AHRecord_TypeInfo():
  return _IO.AHRecord_TypeInfo()
AHRecord_TypeInfo = _IO.AHRecord_TypeInfo

def AHRecord_Cast(*args):
  return _IO.AHRecord_Cast(*args)
AHRecord_Cast = _IO.AHRecord_Cast

def AHRecord_ConstCast(*args):
  return _IO.AHRecord_ConstCast(*args)
AHRecord_ConstCast = _IO.AHRecord_ConstCast

class AHOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AHOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AHOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_AHOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_AHOutput
    __del__ = lambda self : None;
    def put(self, *args): return _IO.AHOutput_put(self, *args)
AHOutput_swigregister = _IO.AHOutput_swigregister
AHOutput_swigregister(AHOutput)


def read_one(*args):
  return _IO.read_one(*args)
read_one = _IO.read_one

def write_one(*args):
  return _IO.write_one(*args)
write_one = _IO.write_one
class LibmseedException(Core.StreamException):
    __swig_setmethods__ = {}
    for _s in [Core.StreamException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibmseedException, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.StreamException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibmseedException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_LibmseedException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_LibmseedException
    __del__ = lambda self : None;
LibmseedException_swigregister = _IO.LibmseedException_swigregister
LibmseedException_swigregister(LibmseedException)

class MSeedRecord(Core.Record):
    __swig_setmethods__ = {}
    for _s in [Core.Record]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSeedRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Record]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSeedRecord, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.MSeedRecord_ClassName
    if _newclass:ClassName = staticmethod(_IO.MSeedRecord_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.MSeedRecord_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.MSeedRecord_TypeInfo)
    def className(self): return _IO.MSeedRecord_className(self)
    def typeInfo(self): return _IO.MSeedRecord_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.MSeedRecord_Cast
    if _newclass:Cast = staticmethod(_IO.MSeedRecord_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.MSeedRecord_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.MSeedRecord_ConstCast)
    def __init__(self, *args): 
        this = _IO.new_MSeedRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_MSeedRecord
    __del__ = lambda self : None;
    def setNetworkCode(self, *args): return _IO.MSeedRecord_setNetworkCode(self, *args)
    def setStationCode(self, *args): return _IO.MSeedRecord_setStationCode(self, *args)
    def setLocationCode(self, *args): return _IO.MSeedRecord_setLocationCode(self, *args)
    def setChannelCode(self, *args): return _IO.MSeedRecord_setChannelCode(self, *args)
    def setStartTime(self, *args): return _IO.MSeedRecord_setStartTime(self, *args)
    def sequenceNumber(self): return _IO.MSeedRecord_sequenceNumber(self)
    def setSequenceNumber(self, *args): return _IO.MSeedRecord_setSequenceNumber(self, *args)
    def dataQuality(self): return _IO.MSeedRecord_dataQuality(self)
    def setDataQuality(self, *args): return _IO.MSeedRecord_setDataQuality(self, *args)
    def sampleRateFactor(self): return _IO.MSeedRecord_sampleRateFactor(self)
    def setSampleRateFactor(self, *args): return _IO.MSeedRecord_setSampleRateFactor(self, *args)
    def sampleRateMultiplier(self): return _IO.MSeedRecord_sampleRateMultiplier(self)
    def setSampleRateMultiplier(self, *args): return _IO.MSeedRecord_setSampleRateMultiplier(self, *args)
    def byteOrder(self): return _IO.MSeedRecord_byteOrder(self)
    def encoding(self): return _IO.MSeedRecord_encoding(self)
    def sampleRateNumerator(self): return _IO.MSeedRecord_sampleRateNumerator(self)
    def sampleRateDenominator(self): return _IO.MSeedRecord_sampleRateDenominator(self)
    def frameNumber(self): return _IO.MSeedRecord_frameNumber(self)
    def endTime(self): return _IO.MSeedRecord_endTime(self)
    def recordLength(self): return _IO.MSeedRecord_recordLength(self)
    def leapSeconds(self): return _IO.MSeedRecord_leapSeconds(self)
    def data(self): return _IO.MSeedRecord_data(self)
    def raw(self): return _IO.MSeedRecord_raw(self)
    def saveSpace(self): return _IO.MSeedRecord_saveSpace(self)
    def copy(self): return _IO.MSeedRecord_copy(self)
    def useEncoding(self, *args): return _IO.MSeedRecord_useEncoding(self, *args)
    def setOutputRecordLength(self, *args): return _IO.MSeedRecord_setOutputRecordLength(self, *args)
    def read(self, *args): return _IO.MSeedRecord_read(self, *args)
    def write(self, *args): return _IO.MSeedRecord_write(self, *args)
MSeedRecord_swigregister = _IO.MSeedRecord_swigregister
MSeedRecord_swigregister(MSeedRecord)

def MSeedRecord_ClassName():
  return _IO.MSeedRecord_ClassName()
MSeedRecord_ClassName = _IO.MSeedRecord_ClassName

def MSeedRecord_TypeInfo():
  return _IO.MSeedRecord_TypeInfo()
MSeedRecord_TypeInfo = _IO.MSeedRecord_TypeInfo

def MSeedRecord_Cast(*args):
  return _IO.MSeedRecord_Cast(*args)
MSeedRecord_Cast = _IO.MSeedRecord_Cast

def MSeedRecord_ConstCast(*args):
  return _IO.MSeedRecord_ConstCast(*args)
MSeedRecord_ConstCast = _IO.MSeedRecord_ConstCast

class FileRecordStream(RecordStream):
    __swig_setmethods__ = {}
    for _s in [RecordStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileRecordStream, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileRecordStream, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.FileRecordStream_ClassName
    if _newclass:ClassName = staticmethod(_IO.FileRecordStream_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.FileRecordStream_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.FileRecordStream_TypeInfo)
    def className(self): return _IO.FileRecordStream_className(self)
    def typeInfo(self): return _IO.FileRecordStream_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.FileRecordStream_Cast
    if _newclass:Cast = staticmethod(_IO.FileRecordStream_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.FileRecordStream_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.FileRecordStream_ConstCast)
    Begin = _IO.FileRecordStream_Begin
    Current = _IO.FileRecordStream_Current
    End = _IO.FileRecordStream_End
    def __init__(self, *args): 
        this = _IO.new_FileRecordStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_FileRecordStream
    __del__ = lambda self : None;
    def setSource(self, *args): return _IO.FileRecordStream_setSource(self, *args)
    def addStream(self, *args): return _IO.FileRecordStream_addStream(self, *args)
    def setStartTime(self, *args): return _IO.FileRecordStream_setStartTime(self, *args)
    def setEndTime(self, *args): return _IO.FileRecordStream_setEndTime(self, *args)
    def setTimeWindow(self, *args): return _IO.FileRecordStream_setTimeWindow(self, *args)
    def setTimeout(self, *args): return _IO.FileRecordStream_setTimeout(self, *args)
    def close(self): return _IO.FileRecordStream_close(self)
    def name(self): return _IO.FileRecordStream_name(self)
    def stream(self): return _IO.FileRecordStream_stream(self)
    def tell(self): return _IO.FileRecordStream_tell(self)
    def seek(self, *args): return _IO.FileRecordStream_seek(self, *args)
FileRecordStream_swigregister = _IO.FileRecordStream_swigregister
FileRecordStream_swigregister(FileRecordStream)

def FileRecordStream_ClassName():
  return _IO.FileRecordStream_ClassName()
FileRecordStream_ClassName = _IO.FileRecordStream_ClassName

def FileRecordStream_TypeInfo():
  return _IO.FileRecordStream_TypeInfo()
FileRecordStream_TypeInfo = _IO.FileRecordStream_TypeInfo

def FileRecordStream_Cast(*args):
  return _IO.FileRecordStream_Cast(*args)
FileRecordStream_Cast = _IO.FileRecordStream_Cast

def FileRecordStream_ConstCast(*args):
  return _IO.FileRecordStream_ConstCast(*args)
FileRecordStream_ConstCast = _IO.FileRecordStream_ConstCast

class SeedlinkException(RecordStreamException):
    __swig_setmethods__ = {}
    for _s in [RecordStreamException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeedlinkException, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeedlinkException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_SeedlinkException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_SeedlinkException
    __del__ = lambda self : None;
SeedlinkException_swigregister = _IO.SeedlinkException_swigregister
SeedlinkException_swigregister(SeedlinkException)

class SeedlinkCommandException(SeedlinkException):
    __swig_setmethods__ = {}
    for _s in [SeedlinkException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeedlinkCommandException, name, value)
    __swig_getmethods__ = {}
    for _s in [SeedlinkException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeedlinkCommandException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_SeedlinkCommandException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_SeedlinkCommandException
    __del__ = lambda self : None;
SeedlinkCommandException_swigregister = _IO.SeedlinkCommandException_swigregister
SeedlinkCommandException_swigregister(SeedlinkCommandException)

class SLConnection(RecordStream):
    __swig_setmethods__ = {}
    for _s in [RecordStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLConnection, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.SLConnection_ClassName
    if _newclass:ClassName = staticmethod(_IO.SLConnection_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.SLConnection_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.SLConnection_TypeInfo)
    def className(self): return _IO.SLConnection_className(self)
    def typeInfo(self): return _IO.SLConnection_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.SLConnection_Cast
    if _newclass:Cast = staticmethod(_IO.SLConnection_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.SLConnection_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.SLConnection_ConstCast)
    def __init__(self, *args): 
        this = _IO.new_SLConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_SLConnection
    __del__ = lambda self : None;
    def setRecordType(self, *args): return _IO.SLConnection_setRecordType(self, *args)
    def setSource(self, *args): return _IO.SLConnection_setSource(self, *args)
    def addStream(self, *args): return _IO.SLConnection_addStream(self, *args)
    def removeStream(self, *args): return _IO.SLConnection_removeStream(self, *args)
    def setStartTime(self, *args): return _IO.SLConnection_setStartTime(self, *args)
    def setEndTime(self, *args): return _IO.SLConnection_setEndTime(self, *args)
    def setTimeWindow(self, *args): return _IO.SLConnection_setTimeWindow(self, *args)
    def setTimeout(self, *args): return _IO.SLConnection_setTimeout(self, *args)
    def clear(self): return _IO.SLConnection_clear(self)
    def close(self): return _IO.SLConnection_close(self)
    def reconnect(self): return _IO.SLConnection_reconnect(self)
    def stream(self): return _IO.SLConnection_stream(self)
SLConnection_swigregister = _IO.SLConnection_swigregister
SLConnection_swigregister(SLConnection)

def SLConnection_ClassName():
  return _IO.SLConnection_ClassName()
SLConnection_ClassName = _IO.SLConnection_ClassName

def SLConnection_TypeInfo():
  return _IO.SLConnection_TypeInfo()
SLConnection_TypeInfo = _IO.SLConnection_TypeInfo

def SLConnection_Cast(*args):
  return _IO.SLConnection_Cast(*args)
SLConnection_Cast = _IO.SLConnection_Cast

def SLConnection_ConstCast(*args):
  return _IO.SLConnection_ConstCast(*args)
SLConnection_ConstCast = _IO.SLConnection_ConstCast

class ArclinkException(RecordStreamException):
    __swig_setmethods__ = {}
    for _s in [RecordStreamException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkException, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_ArclinkException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_ArclinkException
    __del__ = lambda self : None;
ArclinkException_swigregister = _IO.ArclinkException_swigregister
ArclinkException_swigregister(ArclinkException)

class ArclinkCommandException(ArclinkException):
    __swig_setmethods__ = {}
    for _s in [ArclinkException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkCommandException, name, value)
    __swig_getmethods__ = {}
    for _s in [ArclinkException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkCommandException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _IO.new_ArclinkCommandException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_ArclinkCommandException
    __del__ = lambda self : None;
ArclinkCommandException_swigregister = _IO.ArclinkCommandException_swigregister
ArclinkCommandException_swigregister(ArclinkCommandException)

class ArclinkConnection(RecordStream):
    __swig_setmethods__ = {}
    for _s in [RecordStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkConnection, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.ArclinkConnection_ClassName
    if _newclass:ClassName = staticmethod(_IO.ArclinkConnection_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.ArclinkConnection_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.ArclinkConnection_TypeInfo)
    def className(self): return _IO.ArclinkConnection_className(self)
    def typeInfo(self): return _IO.ArclinkConnection_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.ArclinkConnection_Cast
    if _newclass:Cast = staticmethod(_IO.ArclinkConnection_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.ArclinkConnection_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.ArclinkConnection_ConstCast)
    def __init__(self, *args): 
        this = _IO.new_ArclinkConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_ArclinkConnection
    __del__ = lambda self : None;
    def setRecordType(self, *args): return _IO.ArclinkConnection_setRecordType(self, *args)
    def setSource(self, *args): return _IO.ArclinkConnection_setSource(self, *args)
    def setUser(self, *args): return _IO.ArclinkConnection_setUser(self, *args)
    def addStream(self, *args): return _IO.ArclinkConnection_addStream(self, *args)
    def removeStream(self, *args): return _IO.ArclinkConnection_removeStream(self, *args)
    def setStartTime(self, *args): return _IO.ArclinkConnection_setStartTime(self, *args)
    def setEndTime(self, *args): return _IO.ArclinkConnection_setEndTime(self, *args)
    def setTimeWindow(self, *args): return _IO.ArclinkConnection_setTimeWindow(self, *args)
    def setTimeout(self, *args): return _IO.ArclinkConnection_setTimeout(self, *args)
    def clear(self): return _IO.ArclinkConnection_clear(self)
    def close(self): return _IO.ArclinkConnection_close(self)
    def reconnect(self): return _IO.ArclinkConnection_reconnect(self)
    def stream(self): return _IO.ArclinkConnection_stream(self)
ArclinkConnection_swigregister = _IO.ArclinkConnection_swigregister
ArclinkConnection_swigregister(ArclinkConnection)

def ArclinkConnection_ClassName():
  return _IO.ArclinkConnection_ClassName()
ArclinkConnection_ClassName = _IO.ArclinkConnection_ClassName

def ArclinkConnection_TypeInfo():
  return _IO.ArclinkConnection_TypeInfo()
ArclinkConnection_TypeInfo = _IO.ArclinkConnection_TypeInfo

def ArclinkConnection_Cast(*args):
  return _IO.ArclinkConnection_Cast(*args)
ArclinkConnection_Cast = _IO.ArclinkConnection_Cast

def ArclinkConnection_ConstCast(*args):
  return _IO.ArclinkConnection_ConstCast(*args)
ArclinkConnection_ConstCast = _IO.ArclinkConnection_ConstCast

class CombinedConnection(RecordStream):
    __swig_setmethods__ = {}
    for _s in [RecordStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombinedConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombinedConnection, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _IO.CombinedConnection_ClassName
    if _newclass:ClassName = staticmethod(_IO.CombinedConnection_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _IO.CombinedConnection_TypeInfo
    if _newclass:TypeInfo = staticmethod(_IO.CombinedConnection_TypeInfo)
    def className(self): return _IO.CombinedConnection_className(self)
    def typeInfo(self): return _IO.CombinedConnection_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _IO.CombinedConnection_Cast
    if _newclass:Cast = staticmethod(_IO.CombinedConnection_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _IO.CombinedConnection_ConstCast
    if _newclass:ConstCast = staticmethod(_IO.CombinedConnection_ConstCast)
    def __init__(self, *args): 
        this = _IO.new_CombinedConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _IO.delete_CombinedConnection
    __del__ = lambda self : None;
    def setRecordType(self, *args): return _IO.CombinedConnection_setRecordType(self, *args)
    def setSource(self, *args): return _IO.CombinedConnection_setSource(self, *args)
    def addStream(self, *args): return _IO.CombinedConnection_addStream(self, *args)
    def setStartTime(self, *args): return _IO.CombinedConnection_setStartTime(self, *args)
    def setEndTime(self, *args): return _IO.CombinedConnection_setEndTime(self, *args)
    def setTimeWindow(self, *args): return _IO.CombinedConnection_setTimeWindow(self, *args)
    def setTimeout(self, *args): return _IO.CombinedConnection_setTimeout(self, *args)
    def close(self): return _IO.CombinedConnection_close(self)
    def stream(self): return _IO.CombinedConnection_stream(self)
    def createRecord(self, *args): return _IO.CombinedConnection_createRecord(self, *args)
CombinedConnection_swigregister = _IO.CombinedConnection_swigregister
CombinedConnection_swigregister(CombinedConnection)

def CombinedConnection_ClassName():
  return _IO.CombinedConnection_ClassName()
CombinedConnection_ClassName = _IO.CombinedConnection_ClassName

def CombinedConnection_TypeInfo():
  return _IO.CombinedConnection_TypeInfo()
CombinedConnection_TypeInfo = _IO.CombinedConnection_TypeInfo

def CombinedConnection_Cast(*args):
  return _IO.CombinedConnection_Cast(*args)
CombinedConnection_Cast = _IO.CombinedConnection_Cast

def CombinedConnection_ConstCast(*args):
  return _IO.CombinedConnection_ConstCast(*args)
CombinedConnection_ConstCast = _IO.CombinedConnection_ConstCast

# This file is compatible with both classic and new-style classes.


