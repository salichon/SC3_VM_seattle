# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4a
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DataModel', [dirname(__file__)])
        except ImportError:
            import _DataModel
            return _DataModel
        if fp is not None:
            try:
                _mod = imp.load_module('_DataModel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DataModel = swig_import_helper()
    del swig_import_helper
else:
    import _DataModel
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataModel.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _DataModel.SwigPyIterator_value(self)
    def incr(self, n = 1): return _DataModel.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _DataModel.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _DataModel.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _DataModel.SwigPyIterator_equal(self, *args)
    def copy(self): return _DataModel.SwigPyIterator_copy(self)
    def next(self): return _DataModel.SwigPyIterator_next(self)
    def __next__(self): return _DataModel.SwigPyIterator___next__(self)
    def previous(self): return _DataModel.SwigPyIterator_previous(self)
    def advance(self, *args): return _DataModel.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _DataModel.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _DataModel.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _DataModel.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _DataModel.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _DataModel.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _DataModel.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import IO
import Core
class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _DataModel.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _DataModel.vectord___nonzero__(self)
    def __bool__(self): return _DataModel.vectord___bool__(self)
    def __len__(self): return _DataModel.vectord___len__(self)
    def pop(self): return _DataModel.vectord_pop(self)
    def __getslice__(self, *args): return _DataModel.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _DataModel.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _DataModel.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _DataModel.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _DataModel.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _DataModel.vectord___setitem__(self, *args)
    def append(self, *args): return _DataModel.vectord_append(self, *args)
    def empty(self): return _DataModel.vectord_empty(self)
    def size(self): return _DataModel.vectord_size(self)
    def clear(self): return _DataModel.vectord_clear(self)
    def swap(self, *args): return _DataModel.vectord_swap(self, *args)
    def get_allocator(self): return _DataModel.vectord_get_allocator(self)
    def begin(self): return _DataModel.vectord_begin(self)
    def end(self): return _DataModel.vectord_end(self)
    def rbegin(self): return _DataModel.vectord_rbegin(self)
    def rend(self): return _DataModel.vectord_rend(self)
    def pop_back(self): return _DataModel.vectord_pop_back(self)
    def erase(self, *args): return _DataModel.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _DataModel.vectord_push_back(self, *args)
    def front(self): return _DataModel.vectord_front(self)
    def back(self): return _DataModel.vectord_back(self)
    def assign(self, *args): return _DataModel.vectord_assign(self, *args)
    def resize(self, *args): return _DataModel.vectord_resize(self, *args)
    def insert(self, *args): return _DataModel.vectord_insert(self, *args)
    def reserve(self, *args): return _DataModel.vectord_reserve(self, *args)
    def capacity(self): return _DataModel.vectord_capacity(self)
    __swig_destroy__ = _DataModel.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _DataModel.vectord_swigregister
vectord_swigregister(vectord)

class vectorc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorc, name)
    __repr__ = _swig_repr
    def iterator(self): return _DataModel.vectorc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _DataModel.vectorc___nonzero__(self)
    def __bool__(self): return _DataModel.vectorc___bool__(self)
    def __len__(self): return _DataModel.vectorc___len__(self)
    def pop(self): return _DataModel.vectorc_pop(self)
    def __getslice__(self, *args): return _DataModel.vectorc___getslice__(self, *args)
    def __setslice__(self, *args): return _DataModel.vectorc___setslice__(self, *args)
    def __delslice__(self, *args): return _DataModel.vectorc___delslice__(self, *args)
    def __delitem__(self, *args): return _DataModel.vectorc___delitem__(self, *args)
    def __getitem__(self, *args): return _DataModel.vectorc___getitem__(self, *args)
    def __setitem__(self, *args): return _DataModel.vectorc___setitem__(self, *args)
    def append(self, *args): return _DataModel.vectorc_append(self, *args)
    def empty(self): return _DataModel.vectorc_empty(self)
    def size(self): return _DataModel.vectorc_size(self)
    def clear(self): return _DataModel.vectorc_clear(self)
    def swap(self, *args): return _DataModel.vectorc_swap(self, *args)
    def get_allocator(self): return _DataModel.vectorc_get_allocator(self)
    def begin(self): return _DataModel.vectorc_begin(self)
    def end(self): return _DataModel.vectorc_end(self)
    def rbegin(self): return _DataModel.vectorc_rbegin(self)
    def rend(self): return _DataModel.vectorc_rend(self)
    def pop_back(self): return _DataModel.vectorc_pop_back(self)
    def erase(self, *args): return _DataModel.vectorc_erase(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_vectorc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _DataModel.vectorc_push_back(self, *args)
    def front(self): return _DataModel.vectorc_front(self)
    def back(self): return _DataModel.vectorc_back(self)
    def assign(self, *args): return _DataModel.vectorc_assign(self, *args)
    def resize(self, *args): return _DataModel.vectorc_resize(self, *args)
    def insert(self, *args): return _DataModel.vectorc_insert(self, *args)
    def reserve(self, *args): return _DataModel.vectorc_reserve(self, *args)
    def capacity(self): return _DataModel.vectorc_capacity(self)
    __swig_destroy__ = _DataModel.delete_vectorc
    __del__ = lambda self : None;
vectorc_swigregister = _DataModel.vectorc_swigregister
vectorc_swigregister(vectorc)

class NotifierMessageBase(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierMessageBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierMessageBase, name)
    __repr__ = _swig_repr
    def serialize(self, *args): return _DataModel.NotifierMessageBase_serialize(self, *args)
    def __init__(self): 
        this = _DataModel.new_NotifierMessageBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NotifierMessageBase
    __del__ = lambda self : None;
    def attach(self, *args): return _DataModel.NotifierMessageBase_attach(self, *args)
    def detach(self, *args): return _DataModel.NotifierMessageBase_detach(self, *args)
    def clear(self): return _DataModel.NotifierMessageBase_clear(self)
    def begin(self, *args): return _DataModel.NotifierMessageBase_begin(self, *args)
    def end(self, *args): return _DataModel.NotifierMessageBase_end(self, *args)
    def empty(self): return _DataModel.NotifierMessageBase_empty(self)
    def size(self): return _DataModel.NotifierMessageBase_size(self)
NotifierMessageBase_swigregister = _DataModel.NotifierMessageBase_swigregister
NotifierMessageBase_swigregister(NotifierMessageBase)

class Observer(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Observer_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Observer_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Observer_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Observer_TypeInfo)
    def className(self): return _DataModel.Observer_className(self)
    def typeInfo(self): return _DataModel.Observer_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Observer_Cast
    if _newclass:Cast = staticmethod(_DataModel.Observer_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Observer_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Observer_ConstCast)
    __swig_destroy__ = _DataModel.delete_Observer
    __del__ = lambda self : None;
    def onObjectAdded(self, *args): return _DataModel.Observer_onObjectAdded(self, *args)
    def onObjectRemoved(self, *args): return _DataModel.Observer_onObjectRemoved(self, *args)
    def onObjectModified(self, *args): return _DataModel.Observer_onObjectModified(self, *args)
    def onObjectDestroyed(self, *args): return _DataModel.Observer_onObjectDestroyed(self, *args)
Observer_swigregister = _DataModel.Observer_swigregister
Observer_swigregister(Observer)

def Observer_ClassName():
  return _DataModel.Observer_ClassName()
Observer_ClassName = _DataModel.Observer_ClassName

def Observer_TypeInfo():
  return _DataModel.Observer_TypeInfo()
Observer_TypeInfo = _DataModel.Observer_TypeInfo

def Observer_Cast(*args):
  return _DataModel.Observer_Cast(*args)
Observer_Cast = _DataModel.Observer_Cast

def Observer_ConstCast(*args):
  return _DataModel.Observer_ConstCast(*args)
Observer_ConstCast = _DataModel.Observer_ConstCast

class Visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TM_TOPDOWN = _DataModel.Visitor_TM_TOPDOWN
    TM_BOTTOMUP = _DataModel.Visitor_TM_BOTTOMUP
    TM_QUANTITY = _DataModel.Visitor_TM_QUANTITY
    __swig_destroy__ = _DataModel.delete_Visitor
    __del__ = lambda self : None;
    def traversal(self): return _DataModel.Visitor_traversal(self)
    def visit(self, *args): return _DataModel.Visitor_visit(self, *args)
    def finished(self): return _DataModel.Visitor_finished(self)
Visitor_swigregister = _DataModel.Visitor_swigregister
Visitor_swigregister(Visitor)

OP_UNDEFINED = _DataModel.OP_UNDEFINED
OP_ADD = _DataModel.OP_ADD
OP_REMOVE = _DataModel.OP_REMOVE
OP_UPDATE = _DataModel.OP_UPDATE
EOperationQuantity = _DataModel.EOperationQuantity
class EOperationNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOperationNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOperationNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EOperationNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EOperationNames_name
    if _newclass:name = staticmethod(_DataModel.EOperationNames_name)
    __swig_destroy__ = _DataModel.delete_EOperationNames
    __del__ = lambda self : None;
EOperationNames_swigregister = _DataModel.EOperationNames_swigregister
EOperationNames_swigregister(EOperationNames)

def EOperationNames_name(*args):
  return _DataModel.EOperationNames_name(*args)
EOperationNames_name = _DataModel.EOperationNames_name

class Object(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Object_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Object_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Object_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Object_TypeInfo)
    def className(self): return _DataModel.Object_className(self)
    def typeInfo(self): return _DataModel.Object_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Object_Cast
    if _newclass:Cast = staticmethod(_DataModel.Object_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Object_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Object_ConstCast)
    __swig_destroy__ = _DataModel.delete_Object
    __del__ = lambda self : None;
    def parent(self): return _DataModel.Object_parent(self)
    def setParent(self, *args): return _DataModel.Object_setParent(self, *args)
    __swig_getmethods__["RegisterObserver"] = lambda x: _DataModel.Object_RegisterObserver
    if _newclass:RegisterObserver = staticmethod(_DataModel.Object_RegisterObserver)
    __swig_getmethods__["UnregisterObserver"] = lambda x: _DataModel.Object_UnregisterObserver
    if _newclass:UnregisterObserver = staticmethod(_DataModel.Object_UnregisterObserver)
    def update(self): return _DataModel.Object_update(self)
    def assign(self, *args): return _DataModel.Object_assign(self, *args)
    def clone(self): return _DataModel.Object_clone(self)
    def attachTo(self, *args): return _DataModel.Object_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Object_detachFrom(self, *args)
    def detach(self): return _DataModel.Object_detach(self)
    def accept(self, *args): return _DataModel.Object_accept(self, *args)
Object_swigregister = _DataModel.Object_swigregister
Object_swigregister(Object)

def Object_ClassName():
  return _DataModel.Object_ClassName()
Object_ClassName = _DataModel.Object_ClassName

def Object_TypeInfo():
  return _DataModel.Object_TypeInfo()
Object_TypeInfo = _DataModel.Object_TypeInfo

def Object_Cast(*args):
  return _DataModel.Object_Cast(*args)
Object_Cast = _DataModel.Object_Cast

def Object_ConstCast(*args):
  return _DataModel.Object_ConstCast(*args)
Object_ConstCast = _DataModel.Object_ConstCast

def Object_RegisterObserver(*args):
  return _DataModel.Object_RegisterObserver(*args)
Object_RegisterObserver = _DataModel.Object_RegisterObserver

def Object_UnregisterObserver(*args):
  return _DataModel.Object_UnregisterObserver(*args)
Object_UnregisterObserver = _DataModel.Object_UnregisterObserver

class PublicObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.PublicObject_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.PublicObject_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.PublicObject_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.PublicObject_TypeInfo)
    def className(self): return _DataModel.PublicObject_className(self)
    def typeInfo(self): return _DataModel.PublicObject_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.PublicObject_Cast
    if _newclass:Cast = staticmethod(_DataModel.PublicObject_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.PublicObject_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.PublicObject_ConstCast)
    def serialize(self, *args): return _DataModel.PublicObject_serialize(self, *args)
    __swig_destroy__ = _DataModel.delete_PublicObject
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.PublicObject___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.PublicObject___ne__(self, *args)
    def publicID(self): return _DataModel.PublicObject_publicID(self)
    def setPublicID(self, *args): return _DataModel.PublicObject_setPublicID(self, *args)
    def registered(self): return _DataModel.PublicObject_registered(self)
    def validId(self): return _DataModel.PublicObject_validId(self)
    __swig_getmethods__["Find"] = lambda x: _DataModel.PublicObject_Find
    if _newclass:Find = staticmethod(_DataModel.PublicObject_Find)
    __swig_getmethods__["ObjectCount"] = lambda x: _DataModel.PublicObject_ObjectCount
    if _newclass:ObjectCount = staticmethod(_DataModel.PublicObject_ObjectCount)
    __swig_getmethods__["Begin"] = lambda x: _DataModel.PublicObject_Begin
    if _newclass:Begin = staticmethod(_DataModel.PublicObject_Begin)
    __swig_getmethods__["End"] = lambda x: _DataModel.PublicObject_End
    if _newclass:End = staticmethod(_DataModel.PublicObject_End)
    __swig_getmethods__["SetIdGeneration"] = lambda x: _DataModel.PublicObject_SetIdGeneration
    if _newclass:SetIdGeneration = staticmethod(_DataModel.PublicObject_SetIdGeneration)
    __swig_getmethods__["SetIdPattern"] = lambda x: _DataModel.PublicObject_SetIdPattern
    if _newclass:SetIdPattern = staticmethod(_DataModel.PublicObject_SetIdPattern)
    __swig_getmethods__["GenerateId"] = lambda x: _DataModel.PublicObject_GenerateId
    if _newclass:GenerateId = staticmethod(_DataModel.PublicObject_GenerateId)
    __swig_getmethods__["SetRegistrationEnabled"] = lambda x: _DataModel.PublicObject_SetRegistrationEnabled
    if _newclass:SetRegistrationEnabled = staticmethod(_DataModel.PublicObject_SetRegistrationEnabled)
    __swig_getmethods__["IsRegistrationEnabled"] = lambda x: _DataModel.PublicObject_IsRegistrationEnabled
    if _newclass:IsRegistrationEnabled = staticmethod(_DataModel.PublicObject_IsRegistrationEnabled)
    def updateChild(self, *args): return _DataModel.PublicObject_updateChild(self, *args)
    def accept(self, *args): return _DataModel.PublicObject_accept(self, *args)
PublicObject_swigregister = _DataModel.PublicObject_swigregister
PublicObject_swigregister(PublicObject)

def PublicObject_ClassName():
  return _DataModel.PublicObject_ClassName()
PublicObject_ClassName = _DataModel.PublicObject_ClassName

def PublicObject_TypeInfo():
  return _DataModel.PublicObject_TypeInfo()
PublicObject_TypeInfo = _DataModel.PublicObject_TypeInfo

def PublicObject_Cast(*args):
  return _DataModel.PublicObject_Cast(*args)
PublicObject_Cast = _DataModel.PublicObject_Cast

def PublicObject_ConstCast(*args):
  return _DataModel.PublicObject_ConstCast(*args)
PublicObject_ConstCast = _DataModel.PublicObject_ConstCast

def PublicObject_Find(*args):
  return _DataModel.PublicObject_Find(*args)
PublicObject_Find = _DataModel.PublicObject_Find

def PublicObject_ObjectCount():
  return _DataModel.PublicObject_ObjectCount()
PublicObject_ObjectCount = _DataModel.PublicObject_ObjectCount

def PublicObject_Begin():
  return _DataModel.PublicObject_Begin()
PublicObject_Begin = _DataModel.PublicObject_Begin

def PublicObject_End():
  return _DataModel.PublicObject_End()
PublicObject_End = _DataModel.PublicObject_End

def PublicObject_SetIdGeneration(*args):
  return _DataModel.PublicObject_SetIdGeneration(*args)
PublicObject_SetIdGeneration = _DataModel.PublicObject_SetIdGeneration

def PublicObject_SetIdPattern(*args):
  return _DataModel.PublicObject_SetIdPattern(*args)
PublicObject_SetIdPattern = _DataModel.PublicObject_SetIdPattern

def PublicObject_GenerateId(*args):
  return _DataModel.PublicObject_GenerateId(*args)
PublicObject_GenerateId = _DataModel.PublicObject_GenerateId

def PublicObject_SetRegistrationEnabled(*args):
  return _DataModel.PublicObject_SetRegistrationEnabled(*args)
PublicObject_SetRegistrationEnabled = _DataModel.PublicObject_SetRegistrationEnabled

def PublicObject_IsRegistrationEnabled():
  return _DataModel.PublicObject_IsRegistrationEnabled()
PublicObject_IsRegistrationEnabled = _DataModel.PublicObject_IsRegistrationEnabled

class DatabaseIterator(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DatabaseIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseIterator
    __del__ = lambda self : None;
    def get(self): return _DataModel.DatabaseIterator_get(self)
    def fieldCount(self): return _DataModel.DatabaseIterator_fieldCount(self)
    def field(self, *args): return _DataModel.DatabaseIterator_field(self, *args)
    def __ref__(self): return _DataModel.DatabaseIterator___ref__(self)
    def valid(self): return _DataModel.DatabaseIterator_valid(self)
    def next(self): return _DataModel.DatabaseIterator_next(self)
    def close(self): return _DataModel.DatabaseIterator_close(self)
    def count(self): return _DataModel.DatabaseIterator_count(self)
    def lastModified(self): return _DataModel.DatabaseIterator_lastModified(self)
    def oid(self): return _DataModel.DatabaseIterator_oid(self)
    def parentOid(self): return _DataModel.DatabaseIterator_parentOid(self)
    def cached(self): return _DataModel.DatabaseIterator_cached(self)
    def step(self): return _DataModel.DatabaseIterator_step(self)
    def __iter__(self):
        return self

    def next(self):
        o = self.get()
        if not o:
            raise StopIteration

        self.step()
        return o

DatabaseIterator_swigregister = _DataModel.DatabaseIterator_swigregister
DatabaseIterator_swigregister(DatabaseIterator)

class DatabaseObjectWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseObjectWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseObjectWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DatabaseObjectWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _DataModel.DatabaseObjectWriter___call__(self, *args)
    def count(self): return _DataModel.DatabaseObjectWriter_count(self)
    def errors(self): return _DataModel.DatabaseObjectWriter_errors(self)
    __swig_destroy__ = _DataModel.delete_DatabaseObjectWriter
    __del__ = lambda self : None;
DatabaseObjectWriter_swigregister = _DataModel.DatabaseObjectWriter_swigregister
DatabaseObjectWriter_swigregister(DatabaseObjectWriter)

class DatabaseArchive(Observer):
    __swig_setmethods__ = {}
    for _s in [Observer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Observer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DatabaseArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseArchive
    __del__ = lambda self : None;
    def open(self, *args): return _DataModel.DatabaseArchive_open(self, *args)
    def close(self): return _DataModel.DatabaseArchive_close(self)
    def driver(self): return _DataModel.DatabaseArchive_driver(self)
    def setDriver(self, *args): return _DataModel.DatabaseArchive_setDriver(self, *args)
    def setPublicObjectCacheLookupEnabled(self, *args): return _DataModel.DatabaseArchive_setPublicObjectCacheLookupEnabled(self, *args)
    def isPublicObjectCacheLookupEnabled(self): return _DataModel.DatabaseArchive_isPublicObjectCacheLookupEnabled(self)
    def hasError(self): return _DataModel.DatabaseArchive_hasError(self)
    def errorMsg(self): return _DataModel.DatabaseArchive_errorMsg(self)
    def benchmarkQueries(self, *args): return _DataModel.DatabaseArchive_benchmarkQueries(self, *args)
    def getObject(self, *args): return _DataModel.DatabaseArchive_getObject(self, *args)
    def getObjects(self, *args): return _DataModel.DatabaseArchive_getObjects(self, *args)
    def getObjectCount(self, *args): return _DataModel.DatabaseArchive_getObjectCount(self, *args)
    def write(self, *args): return _DataModel.DatabaseArchive_write(self, *args)
    def update(self, *args): return _DataModel.DatabaseArchive_update(self, *args)
    def remove(self, *args): return _DataModel.DatabaseArchive_remove(self, *args)
    def addTree(self, *args): return _DataModel.DatabaseArchive_addTree(self, *args)
    def removeTree(self, *args): return _DataModel.DatabaseArchive_removeTree(self, *args)
    def getObjectIterator(self, *args): return _DataModel.DatabaseArchive_getObjectIterator(self, *args)
DatabaseArchive_swigregister = _DataModel.DatabaseArchive_swigregister
DatabaseArchive_swigregister(DatabaseArchive)

class CachePopCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CachePopCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CachePopCallback, name)
    __repr__ = _swig_repr
    def handle(self, *args): return _DataModel.CachePopCallback_handle(self, *args)
    __swig_destroy__ = _DataModel.delete_CachePopCallback
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == CachePopCallback:
            _self = None
        else:
            _self = self
        this = _DataModel.new_CachePopCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _DataModel.disown_CachePopCallback(self)
        return weakref_proxy(self)
CachePopCallback_swigregister = _DataModel.CachePopCallback_swigregister
CachePopCallback_swigregister(CachePopCallback)

class PublicObjectCache(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataModel.delete_PublicObjectCache
    __del__ = lambda self : None;
    def setDatabaseArchive(self, *args): return _DataModel.PublicObjectCache_setDatabaseArchive(self, *args)
    def setPopCallback(self, *args): return _DataModel.PublicObjectCache_setPopCallback(self, *args)
    def removePopCallback(self): return _DataModel.PublicObjectCache_removePopCallback(self)
    def feed(self, *args): return _DataModel.PublicObjectCache_feed(self, *args)
    def remove(self, *args): return _DataModel.PublicObjectCache_remove(self, *args)
    def clear(self): return _DataModel.PublicObjectCache_clear(self)
    def find(self, *args): return _DataModel.PublicObjectCache_find(self, *args)
    def timeWindow(self): return _DataModel.PublicObjectCache_timeWindow(self)
    def oldest(self): return _DataModel.PublicObjectCache_oldest(self)
    def empty(self): return _DataModel.PublicObjectCache_empty(self)
    def size(self): return _DataModel.PublicObjectCache_size(self)
    def get(self, klass, publicID):
        o = self.find(klass.TypeInfo(), publicID)
        return klass.Cast(o)

PublicObjectCache_swigregister = _DataModel.PublicObjectCache_swigregister
PublicObjectCache_swigregister(PublicObjectCache)

class PublicObjectRingBuffer(PublicObjectCache):
    __swig_setmethods__ = {}
    for _s in [PublicObjectCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectRingBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObjectCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectRingBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_PublicObjectRingBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def setBufferSize(self, *args): return _DataModel.PublicObjectRingBuffer_setBufferSize(self, *args)
    def feed(self, *args): return _DataModel.PublicObjectRingBuffer_feed(self, *args)
    __swig_destroy__ = _DataModel.delete_PublicObjectRingBuffer
    __del__ = lambda self : None;
PublicObjectRingBuffer_swigregister = _DataModel.PublicObjectRingBuffer_swigregister
PublicObjectRingBuffer_swigregister(PublicObjectRingBuffer)

class PublicObjectTimeSpanBuffer(PublicObjectCache):
    __swig_setmethods__ = {}
    for _s in [PublicObjectCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectTimeSpanBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObjectCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectTimeSpanBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_PublicObjectTimeSpanBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTimeSpan(self, *args): return _DataModel.PublicObjectTimeSpanBuffer_setTimeSpan(self, *args)
    def feed(self, *args): return _DataModel.PublicObjectTimeSpanBuffer_feed(self, *args)
    __swig_destroy__ = _DataModel.delete_PublicObjectTimeSpanBuffer
    __del__ = lambda self : None;
PublicObjectTimeSpanBuffer_swigregister = _DataModel.PublicObjectTimeSpanBuffer_swigregister
PublicObjectTimeSpanBuffer_swigregister(PublicObjectTimeSpanBuffer)

class NotifierMessage(NotifierMessageBase):
    __swig_setmethods__ = {}
    for _s in [NotifierMessageBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NotifierMessageBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierMessage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.NotifierMessage_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.NotifierMessage_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.NotifierMessage_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.NotifierMessage_TypeInfo)
    def className(self): return _DataModel.NotifierMessage_className(self)
    def typeInfo(self): return _DataModel.NotifierMessage_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.NotifierMessage_Cast
    if _newclass:Cast = staticmethod(_DataModel.NotifierMessage_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.NotifierMessage_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.NotifierMessage_ConstCast)
    def __init__(self): 
        this = _DataModel.new_NotifierMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NotifierMessage
    __del__ = lambda self : None;
NotifierMessage_swigregister = _DataModel.NotifierMessage_swigregister
NotifierMessage_swigregister(NotifierMessage)

def NotifierMessage_ClassName():
  return _DataModel.NotifierMessage_ClassName()
NotifierMessage_ClassName = _DataModel.NotifierMessage_ClassName

def NotifierMessage_TypeInfo():
  return _DataModel.NotifierMessage_TypeInfo()
NotifierMessage_TypeInfo = _DataModel.NotifierMessage_TypeInfo

def NotifierMessage_Cast(*args):
  return _DataModel.NotifierMessage_Cast(*args)
NotifierMessage_Cast = _DataModel.NotifierMessage_Cast

def NotifierMessage_ConstCast(*args):
  return _DataModel.NotifierMessage_ConstCast(*args)
NotifierMessage_ConstCast = _DataModel.NotifierMessage_ConstCast

class Notifier(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Notifier, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Notifier, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Notifier_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Notifier_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Notifier_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Notifier_TypeInfo)
    def className(self): return _DataModel.Notifier_className(self)
    def typeInfo(self): return _DataModel.Notifier_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Notifier_Cast
    if _newclass:Cast = staticmethod(_DataModel.Notifier_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Notifier_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Notifier_ConstCast)
    def serialize(self, *args): return _DataModel.Notifier_serialize(self, *args)
    CR_DIFFERENT = _DataModel.Notifier_CR_DIFFERENT
    CR_EQUAL = _DataModel.Notifier_CR_EQUAL
    CR_OPPOSITE = _DataModel.Notifier_CR_OPPOSITE
    CR_OVERRIDE = _DataModel.Notifier_CR_OVERRIDE
    CR_QUANTITY = _DataModel.Notifier_CR_QUANTITY
    def __init__(self, *args): 
        this = _DataModel.new_Notifier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Notifier
    __del__ = lambda self : None;
    __swig_getmethods__["Enable"] = lambda x: _DataModel.Notifier_Enable
    if _newclass:Enable = staticmethod(_DataModel.Notifier_Enable)
    __swig_getmethods__["Disable"] = lambda x: _DataModel.Notifier_Disable
    if _newclass:Disable = staticmethod(_DataModel.Notifier_Disable)
    __swig_getmethods__["SetEnabled"] = lambda x: _DataModel.Notifier_SetEnabled
    if _newclass:SetEnabled = staticmethod(_DataModel.Notifier_SetEnabled)
    __swig_getmethods__["IsEnabled"] = lambda x: _DataModel.Notifier_IsEnabled
    if _newclass:IsEnabled = staticmethod(_DataModel.Notifier_IsEnabled)
    __swig_getmethods__["SetCheckEnabled"] = lambda x: _DataModel.Notifier_SetCheckEnabled
    if _newclass:SetCheckEnabled = staticmethod(_DataModel.Notifier_SetCheckEnabled)
    __swig_getmethods__["IsCheckEnabled"] = lambda x: _DataModel.Notifier_IsCheckEnabled
    if _newclass:IsCheckEnabled = staticmethod(_DataModel.Notifier_IsCheckEnabled)
    __swig_getmethods__["GetMessage"] = lambda x: _DataModel.Notifier_GetMessage
    if _newclass:GetMessage = staticmethod(_DataModel.Notifier_GetMessage)
    __swig_getmethods__["Size"] = lambda x: _DataModel.Notifier_Size
    if _newclass:Size = staticmethod(_DataModel.Notifier_Size)
    __swig_getmethods__["Clear"] = lambda x: _DataModel.Notifier_Clear
    if _newclass:Clear = staticmethod(_DataModel.Notifier_Clear)
    __swig_getmethods__["Create"] = lambda x: _DataModel.Notifier_Create
    if _newclass:Create = staticmethod(_DataModel.Notifier_Create)
    def apply(self): return _DataModel.Notifier_apply(self)
    def setParentID(self, *args): return _DataModel.Notifier_setParentID(self, *args)
    def parentID(self): return _DataModel.Notifier_parentID(self)
    def setOperation(self, *args): return _DataModel.Notifier_setOperation(self, *args)
    def operation(self): return _DataModel.Notifier_operation(self)
    def setObject(self, *args): return _DataModel.Notifier_setObject(self, *args)
    def object(self): return _DataModel.Notifier_object(self)
    def cmp(self, *args): return _DataModel.Notifier_cmp(self, *args)
Notifier_swigregister = _DataModel.Notifier_swigregister
Notifier_swigregister(Notifier)

def Notifier_ClassName():
  return _DataModel.Notifier_ClassName()
Notifier_ClassName = _DataModel.Notifier_ClassName

def Notifier_TypeInfo():
  return _DataModel.Notifier_TypeInfo()
Notifier_TypeInfo = _DataModel.Notifier_TypeInfo

def Notifier_Cast(*args):
  return _DataModel.Notifier_Cast(*args)
Notifier_Cast = _DataModel.Notifier_Cast

def Notifier_ConstCast(*args):
  return _DataModel.Notifier_ConstCast(*args)
Notifier_ConstCast = _DataModel.Notifier_ConstCast

def Notifier_Enable():
  return _DataModel.Notifier_Enable()
Notifier_Enable = _DataModel.Notifier_Enable

def Notifier_Disable():
  return _DataModel.Notifier_Disable()
Notifier_Disable = _DataModel.Notifier_Disable

def Notifier_SetEnabled(*args):
  return _DataModel.Notifier_SetEnabled(*args)
Notifier_SetEnabled = _DataModel.Notifier_SetEnabled

def Notifier_IsEnabled():
  return _DataModel.Notifier_IsEnabled()
Notifier_IsEnabled = _DataModel.Notifier_IsEnabled

def Notifier_SetCheckEnabled(*args):
  return _DataModel.Notifier_SetCheckEnabled(*args)
Notifier_SetCheckEnabled = _DataModel.Notifier_SetCheckEnabled

def Notifier_IsCheckEnabled():
  return _DataModel.Notifier_IsCheckEnabled()
Notifier_IsCheckEnabled = _DataModel.Notifier_IsCheckEnabled

def Notifier_GetMessage(allNotifier = True):
  return _DataModel.Notifier_GetMessage(allNotifier)
Notifier_GetMessage = _DataModel.Notifier_GetMessage

def Notifier_Size():
  return _DataModel.Notifier_Size()
Notifier_Size = _DataModel.Notifier_Size

def Notifier_Clear():
  return _DataModel.Notifier_Clear()
Notifier_Clear = _DataModel.Notifier_Clear

def Notifier_Create(*args):
  return _DataModel.Notifier_Create(*args)
Notifier_Create = _DataModel.Notifier_Create

class NotifierCreator(Visitor):
    __swig_setmethods__ = {}
    for _s in [Visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierCreator, name, value)
    __swig_getmethods__ = {}
    for _s in [Visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierCreator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_NotifierCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    def visit(self, *args): return _DataModel.NotifierCreator_visit(self, *args)
    __swig_destroy__ = _DataModel.delete_NotifierCreator
    __del__ = lambda self : None;
NotifierCreator_swigregister = _DataModel.NotifierCreator_swigregister
NotifierCreator_swigregister(NotifierCreator)

class ArtificialOriginMessage(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArtificialOriginMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArtificialOriginMessage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArtificialOriginMessage_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArtificialOriginMessage_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArtificialOriginMessage_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArtificialOriginMessage_TypeInfo)
    def className(self): return _DataModel.ArtificialOriginMessage_className(self)
    def typeInfo(self): return _DataModel.ArtificialOriginMessage_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArtificialOriginMessage_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArtificialOriginMessage_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArtificialOriginMessage_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArtificialOriginMessage_ConstCast)
    def serialize(self, *args): return _DataModel.ArtificialOriginMessage_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArtificialOriginMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    def origin(self): return _DataModel.ArtificialOriginMessage_origin(self)
    def setOrigin(self, *args): return _DataModel.ArtificialOriginMessage_setOrigin(self, *args)
    def empty(self): return _DataModel.ArtificialOriginMessage_empty(self)
    __swig_destroy__ = _DataModel.delete_ArtificialOriginMessage
    __del__ = lambda self : None;
ArtificialOriginMessage_swigregister = _DataModel.ArtificialOriginMessage_swigregister
ArtificialOriginMessage_swigregister(ArtificialOriginMessage)

def ArtificialOriginMessage_ClassName():
  return _DataModel.ArtificialOriginMessage_ClassName()
ArtificialOriginMessage_ClassName = _DataModel.ArtificialOriginMessage_ClassName

def ArtificialOriginMessage_TypeInfo():
  return _DataModel.ArtificialOriginMessage_TypeInfo()
ArtificialOriginMessage_TypeInfo = _DataModel.ArtificialOriginMessage_TypeInfo

def ArtificialOriginMessage_Cast(*args):
  return _DataModel.ArtificialOriginMessage_Cast(*args)
ArtificialOriginMessage_Cast = _DataModel.ArtificialOriginMessage_Cast

def ArtificialOriginMessage_ConstCast(*args):
  return _DataModel.ArtificialOriginMessage_ConstCast(*args)
ArtificialOriginMessage_ConstCast = _DataModel.ArtificialOriginMessage_ConstCast


def eventRegion(*args):
  return _DataModel.eventRegion(*args)
eventRegion = _DataModel.eventRegion
class ThreeComponents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeComponents, name)
    __repr__ = _swig_repr
    Vertical = _DataModel.ThreeComponents_Vertical
    FirstHorizontal = _DataModel.ThreeComponents_FirstHorizontal
    SecondHorizontal = _DataModel.ThreeComponents_SecondHorizontal
    def vertical(self): return _DataModel.ThreeComponents_vertical(self)
    def firstHorizontal(self): return _DataModel.ThreeComponents_firstHorizontal(self)
    def secondHorizontal(self): return _DataModel.ThreeComponents_secondHorizontal(self)
    def __init__(self): 
        this = _DataModel.new_ThreeComponents()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["comps"] = _DataModel.ThreeComponents_comps_set
    __swig_getmethods__["comps"] = _DataModel.ThreeComponents_comps_get
    if _newclass:comps = _swig_property(_DataModel.ThreeComponents_comps_get, _DataModel.ThreeComponents_comps_set)
    __swig_destroy__ = _DataModel.delete_ThreeComponents
    __del__ = lambda self : None;
ThreeComponents_swigregister = _DataModel.ThreeComponents_swigregister
ThreeComponents_swigregister(ThreeComponents)

def getStation(*args):
  return _DataModel.getStation(*args)
getStation = _DataModel.getStation

def getSensorLocation(*args):
  return _DataModel.getSensorLocation(*args)
getSensorLocation = _DataModel.getSensorLocation

def getStream(*args):
  return _DataModel.getStream(*args)
getStream = _DataModel.getStream


def getVerticalComponent(*args):
  return _DataModel.getVerticalComponent(*args)
getVerticalComponent = _DataModel.getVerticalComponent

def getThreeComponents(*args):
  return _DataModel.getThreeComponents(*args)
getThreeComponents = _DataModel.getThreeComponents

def copy(*args):
  return _DataModel.copy(*args)
copy = _DataModel.copy
class DiffMerge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffMerge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffMerge, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_DiffMerge()
        try: self.this.append(this)
        except: self.this = this
    def setLoggingLevel(self, *args): return _DataModel.DiffMerge_setLoggingLevel(self, *args)
    def showLog(self, *args): return _DataModel.DiffMerge_showLog(self, *args)
    def find(self, *args): return _DataModel.DiffMerge_find(self, *args)
    def diff(self, *args): return _DataModel.DiffMerge_diff(self, *args)
    def merge(self, *args): return _DataModel.DiffMerge_merge(self, *args)
    def validateReferences(self, *args): return _DataModel.DiffMerge_validateReferences(self, *args)
    def mapReferences(self, *args): return _DataModel.DiffMerge_mapReferences(self, *args)
    def compareObjects(self, *args): return _DataModel.DiffMerge_compareObjects(self, *args)
    __swig_destroy__ = _DataModel.delete_DiffMerge
    __del__ = lambda self : None;
DiffMerge_swigregister = _DataModel.DiffMerge_swigregister
DiffMerge_swigregister(DiffMerge)

def findSetup(*args):
  return _DataModel.findSetup(*args)
findSetup = _DataModel.findSetup

HORIZONTAL = _DataModel.HORIZONTAL
ELLIPSE = _DataModel.ELLIPSE
ELLIPSOID = _DataModel.ELLIPSOID
PDF = _DataModel.PDF
EOriginUncertaintyDescriptionQuantity = _DataModel.EOriginUncertaintyDescriptionQuantity
class EOriginUncertaintyDescriptionNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginUncertaintyDescriptionNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginUncertaintyDescriptionNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EOriginUncertaintyDescriptionNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EOriginUncertaintyDescriptionNames_name
    if _newclass:name = staticmethod(_DataModel.EOriginUncertaintyDescriptionNames_name)
    __swig_destroy__ = _DataModel.delete_EOriginUncertaintyDescriptionNames
    __del__ = lambda self : None;
EOriginUncertaintyDescriptionNames_swigregister = _DataModel.EOriginUncertaintyDescriptionNames_swigregister
EOriginUncertaintyDescriptionNames_swigregister(EOriginUncertaintyDescriptionNames)

def EOriginUncertaintyDescriptionNames_name(*args):
  return _DataModel.EOriginUncertaintyDescriptionNames_name(*args)
EOriginUncertaintyDescriptionNames_name = _DataModel.EOriginUncertaintyDescriptionNames_name

CMT_S = _DataModel.CMT_S
CMT_Q = _DataModel.CMT_Q
EMomentTensorStatusQuantity = _DataModel.EMomentTensorStatusQuantity
class EMomentTensorStatusNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMomentTensorStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMomentTensorStatusNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EMomentTensorStatusNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EMomentTensorStatusNames_name
    if _newclass:name = staticmethod(_DataModel.EMomentTensorStatusNames_name)
    __swig_destroy__ = _DataModel.delete_EMomentTensorStatusNames
    __del__ = lambda self : None;
EMomentTensorStatusNames_swigregister = _DataModel.EMomentTensorStatusNames_swigregister
EMomentTensorStatusNames_swigregister(EMomentTensorStatusNames)

def EMomentTensorStatusNames_name(*args):
  return _DataModel.EMomentTensorStatusNames_name(*args)
EMomentTensorStatusNames_name = _DataModel.EMomentTensorStatusNames_name

FROM_LOCATION = _DataModel.FROM_LOCATION
FROM_MOMENT_TENSOR_INVERSION = _DataModel.FROM_MOMENT_TENSOR_INVERSION
BROAD_BAND_P_WAVEFORMS = _DataModel.BROAD_BAND_P_WAVEFORMS
CONSTRAINED_BY_DEPTH_PHASES = _DataModel.CONSTRAINED_BY_DEPTH_PHASES
CONSTRAINED_BY_DIRECT_PHASES = _DataModel.CONSTRAINED_BY_DIRECT_PHASES
OPERATOR_ASSIGNED = _DataModel.OPERATOR_ASSIGNED
OTHER_ORIGIN_DEPTH = _DataModel.OTHER_ORIGIN_DEPTH
EOriginDepthTypeQuantity = _DataModel.EOriginDepthTypeQuantity
class EOriginDepthTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginDepthTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginDepthTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EOriginDepthTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EOriginDepthTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EOriginDepthTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EOriginDepthTypeNames
    __del__ = lambda self : None;
EOriginDepthTypeNames_swigregister = _DataModel.EOriginDepthTypeNames_swigregister
EOriginDepthTypeNames_swigregister(EOriginDepthTypeNames)

def EOriginDepthTypeNames_name(*args):
  return _DataModel.EOriginDepthTypeNames_name(*args)
EOriginDepthTypeNames_name = _DataModel.EOriginDepthTypeNames_name

HYPOCENTER = _DataModel.HYPOCENTER
CENTROID = _DataModel.CENTROID
AMPLITUDE = _DataModel.AMPLITUDE
MACROSEISMIC = _DataModel.MACROSEISMIC
RUPTURE_START = _DataModel.RUPTURE_START
RUPTURE_END = _DataModel.RUPTURE_END
EOriginTypeQuantity = _DataModel.EOriginTypeQuantity
class EOriginTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EOriginTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EOriginTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EOriginTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EOriginTypeNames
    __del__ = lambda self : None;
EOriginTypeNames_swigregister = _DataModel.EOriginTypeNames_swigregister
EOriginTypeNames_swigregister(EOriginTypeNames)

def EOriginTypeNames_name(*args):
  return _DataModel.EOriginTypeNames_name(*args)
EOriginTypeNames_name = _DataModel.EOriginTypeNames_name

MANUAL = _DataModel.MANUAL
AUTOMATIC = _DataModel.AUTOMATIC
EEvaluationModeQuantity = _DataModel.EEvaluationModeQuantity
class EEvaluationModeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEvaluationModeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEvaluationModeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EEvaluationModeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EEvaluationModeNames_name
    if _newclass:name = staticmethod(_DataModel.EEvaluationModeNames_name)
    __swig_destroy__ = _DataModel.delete_EEvaluationModeNames
    __del__ = lambda self : None;
EEvaluationModeNames_swigregister = _DataModel.EEvaluationModeNames_swigregister
EEvaluationModeNames_swigregister(EEvaluationModeNames)

def EEvaluationModeNames_name(*args):
  return _DataModel.EEvaluationModeNames_name(*args)
EEvaluationModeNames_name = _DataModel.EEvaluationModeNames_name

PRELIMINARY = _DataModel.PRELIMINARY
CONFIRMED = _DataModel.CONFIRMED
REVIEWED = _DataModel.REVIEWED
FINAL = _DataModel.FINAL
REJECTED = _DataModel.REJECTED
REPORTED = _DataModel.REPORTED
EEvaluationStatusQuantity = _DataModel.EEvaluationStatusQuantity
class EEvaluationStatusNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEvaluationStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEvaluationStatusNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EEvaluationStatusNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EEvaluationStatusNames_name
    if _newclass:name = staticmethod(_DataModel.EEvaluationStatusNames_name)
    __swig_destroy__ = _DataModel.delete_EEvaluationStatusNames
    __del__ = lambda self : None;
EEvaluationStatusNames_swigregister = _DataModel.EEvaluationStatusNames_swigregister
EEvaluationStatusNames_swigregister(EEvaluationStatusNames)

def EEvaluationStatusNames_name(*args):
  return _DataModel.EEvaluationStatusNames_name(*args)
EEvaluationStatusNames_name = _DataModel.EEvaluationStatusNames_name

EMERGENT = _DataModel.EMERGENT
IMPULSIVE = _DataModel.IMPULSIVE
QUESTIONABLE = _DataModel.QUESTIONABLE
EPickOnsetQuantity = _DataModel.EPickOnsetQuantity
class EPickOnsetNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPickOnsetNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPickOnsetNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EPickOnsetNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EPickOnsetNames_name
    if _newclass:name = staticmethod(_DataModel.EPickOnsetNames_name)
    __swig_destroy__ = _DataModel.delete_EPickOnsetNames
    __del__ = lambda self : None;
EPickOnsetNames_swigregister = _DataModel.EPickOnsetNames_swigregister
EPickOnsetNames_swigregister(EPickOnsetNames)

def EPickOnsetNames_name(*args):
  return _DataModel.EPickOnsetNames_name(*args)
EPickOnsetNames_name = _DataModel.EPickOnsetNames_name

CMT_0 = _DataModel.CMT_0
CMT_1 = _DataModel.CMT_1
CMT_2 = _DataModel.CMT_2
TELESEISMIC = _DataModel.TELESEISMIC
REGIONAL = _DataModel.REGIONAL
EMomentTensorMethodQuantity = _DataModel.EMomentTensorMethodQuantity
class EMomentTensorMethodNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMomentTensorMethodNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMomentTensorMethodNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EMomentTensorMethodNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EMomentTensorMethodNames_name
    if _newclass:name = staticmethod(_DataModel.EMomentTensorMethodNames_name)
    __swig_destroy__ = _DataModel.delete_EMomentTensorMethodNames
    __del__ = lambda self : None;
EMomentTensorMethodNames_swigregister = _DataModel.EMomentTensorMethodNames_swigregister
EMomentTensorMethodNames_swigregister(EMomentTensorMethodNames)

def EMomentTensorMethodNames_name(*args):
  return _DataModel.EMomentTensorMethodNames_name(*args)
EMomentTensorMethodNames_name = _DataModel.EMomentTensorMethodNames_name

BODY_WAVES = _DataModel.BODY_WAVES
P_BODY_WAVES = _DataModel.P_BODY_WAVES
LONG_PERIOD_BODY_WAVES = _DataModel.LONG_PERIOD_BODY_WAVES
SURFACE_WAVES = _DataModel.SURFACE_WAVES
INTERMEDIATE_PERIOD_SURFACE_WAVES = _DataModel.INTERMEDIATE_PERIOD_SURFACE_WAVES
LONG_PERIOD_MANTLE_WAVES = _DataModel.LONG_PERIOD_MANTLE_WAVES
UNKNOWN_WAVETYPE = _DataModel.UNKNOWN_WAVETYPE
EDataUsedWaveTypeQuantity = _DataModel.EDataUsedWaveTypeQuantity
class EDataUsedWaveTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDataUsedWaveTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDataUsedWaveTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EDataUsedWaveTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EDataUsedWaveTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EDataUsedWaveTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EDataUsedWaveTypeNames
    __del__ = lambda self : None;
EDataUsedWaveTypeNames_swigregister = _DataModel.EDataUsedWaveTypeNames_swigregister
EDataUsedWaveTypeNames_swigregister(EDataUsedWaveTypeNames)

def EDataUsedWaveTypeNames_name(*args):
  return _DataModel.EDataUsedWaveTypeNames_name(*args)
EDataUsedWaveTypeNames_name = _DataModel.EDataUsedWaveTypeNames_name

FELT_REPORT = _DataModel.FELT_REPORT
FLINN_ENGDAHL_REGION = _DataModel.FLINN_ENGDAHL_REGION
LOCAL_TIME = _DataModel.LOCAL_TIME
TECTONIC_SUMMARY = _DataModel.TECTONIC_SUMMARY
NEAREST_CITIES = _DataModel.NEAREST_CITIES
EARTHQUAKE_NAME = _DataModel.EARTHQUAKE_NAME
REGION_NAME = _DataModel.REGION_NAME
EEventDescriptionTypeQuantity = _DataModel.EEventDescriptionTypeQuantity
class EEventDescriptionTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventDescriptionTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventDescriptionTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EEventDescriptionTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EEventDescriptionTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EEventDescriptionTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EEventDescriptionTypeNames
    __del__ = lambda self : None;
EEventDescriptionTypeNames_swigregister = _DataModel.EEventDescriptionTypeNames_swigregister
EEventDescriptionTypeNames_swigregister(EEventDescriptionTypeNames)

def EEventDescriptionTypeNames_name(*args):
  return _DataModel.EEventDescriptionTypeNames_name(*args)
EEventDescriptionTypeNames_name = _DataModel.EEventDescriptionTypeNames_name

NOT_EXISTING = _DataModel.NOT_EXISTING
NOT_LOCATABLE = _DataModel.NOT_LOCATABLE
OUTSIDE_OF_NETWORK_INTEREST = _DataModel.OUTSIDE_OF_NETWORK_INTEREST
EARTHQUAKE = _DataModel.EARTHQUAKE
INDUCED_EARTHQUAKE = _DataModel.INDUCED_EARTHQUAKE
QUARRY_BLAST = _DataModel.QUARRY_BLAST
EXPLOSION = _DataModel.EXPLOSION
CHEMICAL_EXPLOSION = _DataModel.CHEMICAL_EXPLOSION
NUCLEAR_EXPLOSION = _DataModel.NUCLEAR_EXPLOSION
LANDSLIDE = _DataModel.LANDSLIDE
ROCKSLIDE = _DataModel.ROCKSLIDE
SNOW_AVALANCHE = _DataModel.SNOW_AVALANCHE
DEBRIS_AVALANCHE = _DataModel.DEBRIS_AVALANCHE
MINE_COLLAPSE = _DataModel.MINE_COLLAPSE
BUILDING_COLLAPSE = _DataModel.BUILDING_COLLAPSE
VOLCANIC_ERUPTION = _DataModel.VOLCANIC_ERUPTION
METEOR_IMPACT = _DataModel.METEOR_IMPACT
PLANE_CRASH = _DataModel.PLANE_CRASH
SONIC_BOOM = _DataModel.SONIC_BOOM
DUPLICATE = _DataModel.DUPLICATE
OTHER_EVENT = _DataModel.OTHER_EVENT
EEventTypeQuantity = _DataModel.EEventTypeQuantity
class EEventTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EEventTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EEventTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EEventTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EEventTypeNames
    __del__ = lambda self : None;
EEventTypeNames_swigregister = _DataModel.EEventTypeNames_swigregister
EEventTypeNames_swigregister(EEventTypeNames)

def EEventTypeNames_name(*args):
  return _DataModel.EEventTypeNames_name(*args)
EEventTypeNames_name = _DataModel.EEventTypeNames_name

KNOWN = _DataModel.KNOWN
SUSPECTED = _DataModel.SUSPECTED
EEventTypeCertaintyQuantity = _DataModel.EEventTypeCertaintyQuantity
class EEventTypeCertaintyNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventTypeCertaintyNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventTypeCertaintyNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EEventTypeCertaintyNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EEventTypeCertaintyNames_name
    if _newclass:name = staticmethod(_DataModel.EEventTypeCertaintyNames_name)
    __swig_destroy__ = _DataModel.delete_EEventTypeCertaintyNames
    __del__ = lambda self : None;
EEventTypeCertaintyNames_swigregister = _DataModel.EEventTypeCertaintyNames_swigregister
EEventTypeCertaintyNames_swigregister(EEventTypeCertaintyNames)

def EEventTypeCertaintyNames_name(*args):
  return _DataModel.EEventTypeCertaintyNames_name(*args)
EEventTypeCertaintyNames_name = _DataModel.EEventTypeCertaintyNames_name

BOX_CAR = _DataModel.BOX_CAR
TRIANGLE = _DataModel.TRIANGLE
TRAPEZOID = _DataModel.TRAPEZOID
UNKNOWN_FUNCTION = _DataModel.UNKNOWN_FUNCTION
ESourceTimeFunctionTypeQuantity = _DataModel.ESourceTimeFunctionTypeQuantity
class ESourceTimeFunctionTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ESourceTimeFunctionTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ESourceTimeFunctionTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_ESourceTimeFunctionTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.ESourceTimeFunctionTypeNames_name
    if _newclass:name = staticmethod(_DataModel.ESourceTimeFunctionTypeNames_name)
    __swig_destroy__ = _DataModel.delete_ESourceTimeFunctionTypeNames
    __del__ = lambda self : None;
ESourceTimeFunctionTypeNames_swigregister = _DataModel.ESourceTimeFunctionTypeNames_swigregister
ESourceTimeFunctionTypeNames_swigregister(ESourceTimeFunctionTypeNames)

def ESourceTimeFunctionTypeNames_name(*args):
  return _DataModel.ESourceTimeFunctionTypeNames_name(*args)
ESourceTimeFunctionTypeNames_name = _DataModel.ESourceTimeFunctionTypeNames_name

POSITIVE = _DataModel.POSITIVE
NEGATIVE = _DataModel.NEGATIVE
UNDECIDABLE = _DataModel.UNDECIDABLE
EPickPolarityQuantity = _DataModel.EPickPolarityQuantity
class EPickPolarityNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPickPolarityNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPickPolarityNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EPickPolarityNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EPickPolarityNames_name
    if _newclass:name = staticmethod(_DataModel.EPickPolarityNames_name)
    __swig_destroy__ = _DataModel.delete_EPickPolarityNames
    __del__ = lambda self : None;
EPickPolarityNames_swigregister = _DataModel.EPickPolarityNames_swigregister
EPickPolarityNames_swigregister(EPickPolarityNames)

def EPickPolarityNames_name(*args):
  return _DataModel.EPickPolarityNames_name(*args)
EPickPolarityNames_name = _DataModel.EPickPolarityNames_name

DEPLOYMENT = _DataModel.DEPLOYMENT
ARRAY = _DataModel.ARRAY
EStationGroupTypeQuantity = _DataModel.EStationGroupTypeQuantity
class EStationGroupTypeNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EStationGroupTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EStationGroupTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _DataModel.new_EStationGroupTypeNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["name"] = lambda x: _DataModel.EStationGroupTypeNames_name
    if _newclass:name = staticmethod(_DataModel.EStationGroupTypeNames_name)
    __swig_destroy__ = _DataModel.delete_EStationGroupTypeNames
    __del__ = lambda self : None;
EStationGroupTypeNames_swigregister = _DataModel.EStationGroupTypeNames_swigregister
EStationGroupTypeNames_swigregister(EStationGroupTypeNames)

def EStationGroupTypeNames_name(*args):
  return _DataModel.EStationGroupTypeNames_name(*args)
EStationGroupTypeNames_name = _DataModel.EStationGroupTypeNames_name

class TimeQuantity(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeQuantity, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.TimeQuantity_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.TimeQuantity_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.TimeQuantity_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.TimeQuantity_TypeInfo)
    def className(self): return _DataModel.TimeQuantity_className(self)
    def typeInfo(self): return _DataModel.TimeQuantity_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.TimeQuantity_Cast
    if _newclass:Cast = staticmethod(_DataModel.TimeQuantity_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.TimeQuantity_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.TimeQuantity_ConstCast)
    def serialize(self, *args): return _DataModel.TimeQuantity_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_TimeQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_TimeQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.TimeQuantity___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.TimeQuantity___ne__(self, *args)
    def equal(self, *args): return _DataModel.TimeQuantity_equal(self, *args)
    def setValue(self, *args): return _DataModel.TimeQuantity_setValue(self, *args)
    def value(self): return _DataModel.TimeQuantity_value(self)
    def setUncertainty(self, *args): return _DataModel.TimeQuantity_setUncertainty(self, *args)
    def uncertainty(self): return _DataModel.TimeQuantity_uncertainty(self)
    def setLowerUncertainty(self, *args): return _DataModel.TimeQuantity_setLowerUncertainty(self, *args)
    def lowerUncertainty(self): return _DataModel.TimeQuantity_lowerUncertainty(self)
    def setUpperUncertainty(self, *args): return _DataModel.TimeQuantity_setUpperUncertainty(self, *args)
    def upperUncertainty(self): return _DataModel.TimeQuantity_upperUncertainty(self)
    def setConfidenceLevel(self, *args): return _DataModel.TimeQuantity_setConfidenceLevel(self, *args)
    def confidenceLevel(self): return _DataModel.TimeQuantity_confidenceLevel(self)
TimeQuantity_swigregister = _DataModel.TimeQuantity_swigregister
TimeQuantity_swigregister(TimeQuantity)

def TimeQuantity_ClassName():
  return _DataModel.TimeQuantity_ClassName()
TimeQuantity_ClassName = _DataModel.TimeQuantity_ClassName

def TimeQuantity_TypeInfo():
  return _DataModel.TimeQuantity_TypeInfo()
TimeQuantity_TypeInfo = _DataModel.TimeQuantity_TypeInfo

def TimeQuantity_Cast(*args):
  return _DataModel.TimeQuantity_Cast(*args)
TimeQuantity_Cast = _DataModel.TimeQuantity_Cast

def TimeQuantity_ConstCast(*args):
  return _DataModel.TimeQuantity_ConstCast(*args)
TimeQuantity_ConstCast = _DataModel.TimeQuantity_ConstCast

class CreationInfo(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreationInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreationInfo, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.CreationInfo_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.CreationInfo_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.CreationInfo_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.CreationInfo_TypeInfo)
    def className(self): return _DataModel.CreationInfo_className(self)
    def typeInfo(self): return _DataModel.CreationInfo_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.CreationInfo_Cast
    if _newclass:Cast = staticmethod(_DataModel.CreationInfo_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.CreationInfo_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.CreationInfo_ConstCast)
    def serialize(self, *args): return _DataModel.CreationInfo_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_CreationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_CreationInfo
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.CreationInfo___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.CreationInfo___ne__(self, *args)
    def equal(self, *args): return _DataModel.CreationInfo_equal(self, *args)
    def setAgencyID(self, *args): return _DataModel.CreationInfo_setAgencyID(self, *args)
    def agencyID(self): return _DataModel.CreationInfo_agencyID(self)
    def setAgencyURI(self, *args): return _DataModel.CreationInfo_setAgencyURI(self, *args)
    def agencyURI(self): return _DataModel.CreationInfo_agencyURI(self)
    def setAuthor(self, *args): return _DataModel.CreationInfo_setAuthor(self, *args)
    def author(self): return _DataModel.CreationInfo_author(self)
    def setAuthorURI(self, *args): return _DataModel.CreationInfo_setAuthorURI(self, *args)
    def authorURI(self): return _DataModel.CreationInfo_authorURI(self)
    def setCreationTime(self, *args): return _DataModel.CreationInfo_setCreationTime(self, *args)
    def creationTime(self): return _DataModel.CreationInfo_creationTime(self)
    def setModificationTime(self, *args): return _DataModel.CreationInfo_setModificationTime(self, *args)
    def modificationTime(self): return _DataModel.CreationInfo_modificationTime(self)
    def setVersion(self, *args): return _DataModel.CreationInfo_setVersion(self, *args)
    def version(self): return _DataModel.CreationInfo_version(self)
CreationInfo_swigregister = _DataModel.CreationInfo_swigregister
CreationInfo_swigregister(CreationInfo)

def CreationInfo_ClassName():
  return _DataModel.CreationInfo_ClassName()
CreationInfo_ClassName = _DataModel.CreationInfo_ClassName

def CreationInfo_TypeInfo():
  return _DataModel.CreationInfo_TypeInfo()
CreationInfo_TypeInfo = _DataModel.CreationInfo_TypeInfo

def CreationInfo_Cast(*args):
  return _DataModel.CreationInfo_Cast(*args)
CreationInfo_Cast = _DataModel.CreationInfo_Cast

def CreationInfo_ConstCast(*args):
  return _DataModel.CreationInfo_ConstCast(*args)
CreationInfo_ConstCast = _DataModel.CreationInfo_ConstCast

class Phase(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Phase, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Phase, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Phase_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Phase_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Phase_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Phase_TypeInfo)
    def className(self): return _DataModel.Phase_className(self)
    def typeInfo(self): return _DataModel.Phase_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Phase_Cast
    if _newclass:Cast = staticmethod(_DataModel.Phase_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Phase_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Phase_ConstCast)
    def serialize(self, *args): return _DataModel.Phase_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Phase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Phase
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Phase___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Phase___ne__(self, *args)
    def equal(self, *args): return _DataModel.Phase_equal(self, *args)
    def setCode(self, *args): return _DataModel.Phase_setCode(self, *args)
    def code(self): return _DataModel.Phase_code(self)
Phase_swigregister = _DataModel.Phase_swigregister
Phase_swigregister(Phase)

def Phase_ClassName():
  return _DataModel.Phase_ClassName()
Phase_ClassName = _DataModel.Phase_ClassName

def Phase_TypeInfo():
  return _DataModel.Phase_TypeInfo()
Phase_TypeInfo = _DataModel.Phase_TypeInfo

def Phase_Cast(*args):
  return _DataModel.Phase_Cast(*args)
Phase_Cast = _DataModel.Phase_Cast

def Phase_ConstCast(*args):
  return _DataModel.Phase_ConstCast(*args)
Phase_ConstCast = _DataModel.Phase_ConstCast

class CommentIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommentIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommentIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_CommentIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.CommentIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.CommentIndex___ne__(self, *args)
    __swig_setmethods__["id"] = _DataModel.CommentIndex_id_set
    __swig_getmethods__["id"] = _DataModel.CommentIndex_id_get
    if _newclass:id = _swig_property(_DataModel.CommentIndex_id_get, _DataModel.CommentIndex_id_set)
    __swig_destroy__ = _DataModel.delete_CommentIndex
    __del__ = lambda self : None;
CommentIndex_swigregister = _DataModel.CommentIndex_swigregister
CommentIndex_swigregister(CommentIndex)

class Comment(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comment, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Comment, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Comment_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Comment_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Comment_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Comment_TypeInfo)
    def className(self): return _DataModel.Comment_className(self)
    def typeInfo(self): return _DataModel.Comment_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Comment_Cast
    if _newclass:Cast = staticmethod(_DataModel.Comment_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Comment_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Comment_ConstCast)
    def serialize(self, *args): return _DataModel.Comment_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Comment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Comment
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Comment___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Comment___ne__(self, *args)
    def equal(self, *args): return _DataModel.Comment_equal(self, *args)
    def setText(self, *args): return _DataModel.Comment_setText(self, *args)
    def text(self): return _DataModel.Comment_text(self)
    def setId(self, *args): return _DataModel.Comment_setId(self, *args)
    def id(self): return _DataModel.Comment_id(self)
    def setCreationInfo(self, *args): return _DataModel.Comment_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Comment_creationInfo(self, *args)
    def index(self): return _DataModel.Comment_index(self)
    def equalIndex(self, *args): return _DataModel.Comment_equalIndex(self, *args)
    def momentTensor(self): return _DataModel.Comment_momentTensor(self)
    def focalMechanism(self): return _DataModel.Comment_focalMechanism(self)
    def amplitude(self): return _DataModel.Comment_amplitude(self)
    def magnitude(self): return _DataModel.Comment_magnitude(self)
    def stationMagnitude(self): return _DataModel.Comment_stationMagnitude(self)
    def pick(self): return _DataModel.Comment_pick(self)
    def event(self): return _DataModel.Comment_event(self)
    def origin(self): return _DataModel.Comment_origin(self)
    def parameter(self): return _DataModel.Comment_parameter(self)
    def parameterSet(self): return _DataModel.Comment_parameterSet(self)
    def assign(self, *args): return _DataModel.Comment_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Comment_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Comment_detachFrom(self, *args)
    def detach(self): return _DataModel.Comment_detach(self)
    def clone(self): return _DataModel.Comment_clone(self)
    def accept(self, *args): return _DataModel.Comment_accept(self, *args)
Comment_swigregister = _DataModel.Comment_swigregister
Comment_swigregister(Comment)

def Comment_ClassName():
  return _DataModel.Comment_ClassName()
Comment_ClassName = _DataModel.Comment_ClassName

def Comment_TypeInfo():
  return _DataModel.Comment_TypeInfo()
Comment_TypeInfo = _DataModel.Comment_TypeInfo

def Comment_Cast(*args):
  return _DataModel.Comment_Cast(*args)
Comment_Cast = _DataModel.Comment_Cast

def Comment_ConstCast(*args):
  return _DataModel.Comment_ConstCast(*args)
Comment_ConstCast = _DataModel.Comment_ConstCast

class RealQuantity(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealQuantity, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.RealQuantity_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.RealQuantity_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.RealQuantity_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.RealQuantity_TypeInfo)
    def className(self): return _DataModel.RealQuantity_className(self)
    def typeInfo(self): return _DataModel.RealQuantity_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.RealQuantity_Cast
    if _newclass:Cast = staticmethod(_DataModel.RealQuantity_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.RealQuantity_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.RealQuantity_ConstCast)
    def serialize(self, *args): return _DataModel.RealQuantity_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_RealQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RealQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.RealQuantity___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RealQuantity___ne__(self, *args)
    def equal(self, *args): return _DataModel.RealQuantity_equal(self, *args)
    def setValue(self, *args): return _DataModel.RealQuantity_setValue(self, *args)
    def value(self): return _DataModel.RealQuantity_value(self)
    def setUncertainty(self, *args): return _DataModel.RealQuantity_setUncertainty(self, *args)
    def uncertainty(self): return _DataModel.RealQuantity_uncertainty(self)
    def setLowerUncertainty(self, *args): return _DataModel.RealQuantity_setLowerUncertainty(self, *args)
    def lowerUncertainty(self): return _DataModel.RealQuantity_lowerUncertainty(self)
    def setUpperUncertainty(self, *args): return _DataModel.RealQuantity_setUpperUncertainty(self, *args)
    def upperUncertainty(self): return _DataModel.RealQuantity_upperUncertainty(self)
    def setConfidenceLevel(self, *args): return _DataModel.RealQuantity_setConfidenceLevel(self, *args)
    def confidenceLevel(self): return _DataModel.RealQuantity_confidenceLevel(self)
RealQuantity_swigregister = _DataModel.RealQuantity_swigregister
RealQuantity_swigregister(RealQuantity)

def RealQuantity_ClassName():
  return _DataModel.RealQuantity_ClassName()
RealQuantity_ClassName = _DataModel.RealQuantity_ClassName

def RealQuantity_TypeInfo():
  return _DataModel.RealQuantity_TypeInfo()
RealQuantity_TypeInfo = _DataModel.RealQuantity_TypeInfo

def RealQuantity_Cast(*args):
  return _DataModel.RealQuantity_Cast(*args)
RealQuantity_Cast = _DataModel.RealQuantity_Cast

def RealQuantity_ConstCast(*args):
  return _DataModel.RealQuantity_ConstCast(*args)
RealQuantity_ConstCast = _DataModel.RealQuantity_ConstCast

class IntegerQuantity(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerQuantity, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.IntegerQuantity_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.IntegerQuantity_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.IntegerQuantity_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.IntegerQuantity_TypeInfo)
    def className(self): return _DataModel.IntegerQuantity_className(self)
    def typeInfo(self): return _DataModel.IntegerQuantity_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.IntegerQuantity_Cast
    if _newclass:Cast = staticmethod(_DataModel.IntegerQuantity_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.IntegerQuantity_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.IntegerQuantity_ConstCast)
    def serialize(self, *args): return _DataModel.IntegerQuantity_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_IntegerQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_IntegerQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.IntegerQuantity___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.IntegerQuantity___ne__(self, *args)
    def equal(self, *args): return _DataModel.IntegerQuantity_equal(self, *args)
    def setValue(self, *args): return _DataModel.IntegerQuantity_setValue(self, *args)
    def value(self): return _DataModel.IntegerQuantity_value(self)
    def setUncertainty(self, *args): return _DataModel.IntegerQuantity_setUncertainty(self, *args)
    def uncertainty(self): return _DataModel.IntegerQuantity_uncertainty(self)
    def setLowerUncertainty(self, *args): return _DataModel.IntegerQuantity_setLowerUncertainty(self, *args)
    def lowerUncertainty(self): return _DataModel.IntegerQuantity_lowerUncertainty(self)
    def setUpperUncertainty(self, *args): return _DataModel.IntegerQuantity_setUpperUncertainty(self, *args)
    def upperUncertainty(self): return _DataModel.IntegerQuantity_upperUncertainty(self)
    def setConfidenceLevel(self, *args): return _DataModel.IntegerQuantity_setConfidenceLevel(self, *args)
    def confidenceLevel(self): return _DataModel.IntegerQuantity_confidenceLevel(self)
IntegerQuantity_swigregister = _DataModel.IntegerQuantity_swigregister
IntegerQuantity_swigregister(IntegerQuantity)

def IntegerQuantity_ClassName():
  return _DataModel.IntegerQuantity_ClassName()
IntegerQuantity_ClassName = _DataModel.IntegerQuantity_ClassName

def IntegerQuantity_TypeInfo():
  return _DataModel.IntegerQuantity_TypeInfo()
IntegerQuantity_TypeInfo = _DataModel.IntegerQuantity_TypeInfo

def IntegerQuantity_Cast(*args):
  return _DataModel.IntegerQuantity_Cast(*args)
IntegerQuantity_Cast = _DataModel.IntegerQuantity_Cast

def IntegerQuantity_ConstCast(*args):
  return _DataModel.IntegerQuantity_ConstCast(*args)
IntegerQuantity_ConstCast = _DataModel.IntegerQuantity_ConstCast

class Axis(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axis, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Axis, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Axis_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Axis_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Axis_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Axis_TypeInfo)
    def className(self): return _DataModel.Axis_className(self)
    def typeInfo(self): return _DataModel.Axis_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Axis_Cast
    if _newclass:Cast = staticmethod(_DataModel.Axis_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Axis_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Axis_ConstCast)
    def serialize(self, *args): return _DataModel.Axis_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Axis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Axis
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Axis___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Axis___ne__(self, *args)
    def equal(self, *args): return _DataModel.Axis_equal(self, *args)
    def setAzimuth(self, *args): return _DataModel.Axis_setAzimuth(self, *args)
    def azimuth(self, *args): return _DataModel.Axis_azimuth(self, *args)
    def setPlunge(self, *args): return _DataModel.Axis_setPlunge(self, *args)
    def plunge(self, *args): return _DataModel.Axis_plunge(self, *args)
    def setLength(self, *args): return _DataModel.Axis_setLength(self, *args)
    def length(self, *args): return _DataModel.Axis_length(self, *args)
Axis_swigregister = _DataModel.Axis_swigregister
Axis_swigregister(Axis)

def Axis_ClassName():
  return _DataModel.Axis_ClassName()
Axis_ClassName = _DataModel.Axis_ClassName

def Axis_TypeInfo():
  return _DataModel.Axis_TypeInfo()
Axis_TypeInfo = _DataModel.Axis_TypeInfo

def Axis_Cast(*args):
  return _DataModel.Axis_Cast(*args)
Axis_Cast = _DataModel.Axis_Cast

def Axis_ConstCast(*args):
  return _DataModel.Axis_ConstCast(*args)
Axis_ConstCast = _DataModel.Axis_ConstCast

class PrincipalAxes(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrincipalAxes, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrincipalAxes, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.PrincipalAxes_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.PrincipalAxes_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.PrincipalAxes_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.PrincipalAxes_TypeInfo)
    def className(self): return _DataModel.PrincipalAxes_className(self)
    def typeInfo(self): return _DataModel.PrincipalAxes_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.PrincipalAxes_Cast
    if _newclass:Cast = staticmethod(_DataModel.PrincipalAxes_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.PrincipalAxes_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.PrincipalAxes_ConstCast)
    def serialize(self, *args): return _DataModel.PrincipalAxes_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_PrincipalAxes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_PrincipalAxes
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.PrincipalAxes___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.PrincipalAxes___ne__(self, *args)
    def equal(self, *args): return _DataModel.PrincipalAxes_equal(self, *args)
    def setTAxis(self, *args): return _DataModel.PrincipalAxes_setTAxis(self, *args)
    def tAxis(self, *args): return _DataModel.PrincipalAxes_tAxis(self, *args)
    def setPAxis(self, *args): return _DataModel.PrincipalAxes_setPAxis(self, *args)
    def pAxis(self, *args): return _DataModel.PrincipalAxes_pAxis(self, *args)
    def setNAxis(self, *args): return _DataModel.PrincipalAxes_setNAxis(self, *args)
    def nAxis(self, *args): return _DataModel.PrincipalAxes_nAxis(self, *args)
PrincipalAxes_swigregister = _DataModel.PrincipalAxes_swigregister
PrincipalAxes_swigregister(PrincipalAxes)

def PrincipalAxes_ClassName():
  return _DataModel.PrincipalAxes_ClassName()
PrincipalAxes_ClassName = _DataModel.PrincipalAxes_ClassName

def PrincipalAxes_TypeInfo():
  return _DataModel.PrincipalAxes_TypeInfo()
PrincipalAxes_TypeInfo = _DataModel.PrincipalAxes_TypeInfo

def PrincipalAxes_Cast(*args):
  return _DataModel.PrincipalAxes_Cast(*args)
PrincipalAxes_Cast = _DataModel.PrincipalAxes_Cast

def PrincipalAxes_ConstCast(*args):
  return _DataModel.PrincipalAxes_ConstCast(*args)
PrincipalAxes_ConstCast = _DataModel.PrincipalAxes_ConstCast

class Tensor(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Tensor_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Tensor_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Tensor_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Tensor_TypeInfo)
    def className(self): return _DataModel.Tensor_className(self)
    def typeInfo(self): return _DataModel.Tensor_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Tensor_Cast
    if _newclass:Cast = staticmethod(_DataModel.Tensor_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Tensor_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Tensor_ConstCast)
    def serialize(self, *args): return _DataModel.Tensor_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Tensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Tensor
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Tensor___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Tensor___ne__(self, *args)
    def equal(self, *args): return _DataModel.Tensor_equal(self, *args)
    def setMrr(self, *args): return _DataModel.Tensor_setMrr(self, *args)
    def Mrr(self, *args): return _DataModel.Tensor_Mrr(self, *args)
    def setMtt(self, *args): return _DataModel.Tensor_setMtt(self, *args)
    def Mtt(self, *args): return _DataModel.Tensor_Mtt(self, *args)
    def setMpp(self, *args): return _DataModel.Tensor_setMpp(self, *args)
    def Mpp(self, *args): return _DataModel.Tensor_Mpp(self, *args)
    def setMrt(self, *args): return _DataModel.Tensor_setMrt(self, *args)
    def Mrt(self, *args): return _DataModel.Tensor_Mrt(self, *args)
    def setMrp(self, *args): return _DataModel.Tensor_setMrp(self, *args)
    def Mrp(self, *args): return _DataModel.Tensor_Mrp(self, *args)
    def setMtp(self, *args): return _DataModel.Tensor_setMtp(self, *args)
    def Mtp(self, *args): return _DataModel.Tensor_Mtp(self, *args)
Tensor_swigregister = _DataModel.Tensor_swigregister
Tensor_swigregister(Tensor)

def Tensor_ClassName():
  return _DataModel.Tensor_ClassName()
Tensor_ClassName = _DataModel.Tensor_ClassName

def Tensor_TypeInfo():
  return _DataModel.Tensor_TypeInfo()
Tensor_TypeInfo = _DataModel.Tensor_TypeInfo

def Tensor_Cast(*args):
  return _DataModel.Tensor_Cast(*args)
Tensor_Cast = _DataModel.Tensor_Cast

def Tensor_ConstCast(*args):
  return _DataModel.Tensor_ConstCast(*args)
Tensor_ConstCast = _DataModel.Tensor_ConstCast

class OriginQuality(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginQuality, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginQuality, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.OriginQuality_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.OriginQuality_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.OriginQuality_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.OriginQuality_TypeInfo)
    def className(self): return _DataModel.OriginQuality_className(self)
    def typeInfo(self): return _DataModel.OriginQuality_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.OriginQuality_Cast
    if _newclass:Cast = staticmethod(_DataModel.OriginQuality_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.OriginQuality_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.OriginQuality_ConstCast)
    def serialize(self, *args): return _DataModel.OriginQuality_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_OriginQuality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginQuality
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.OriginQuality___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.OriginQuality___ne__(self, *args)
    def equal(self, *args): return _DataModel.OriginQuality_equal(self, *args)
    def setAssociatedPhaseCount(self, *args): return _DataModel.OriginQuality_setAssociatedPhaseCount(self, *args)
    def associatedPhaseCount(self): return _DataModel.OriginQuality_associatedPhaseCount(self)
    def setUsedPhaseCount(self, *args): return _DataModel.OriginQuality_setUsedPhaseCount(self, *args)
    def usedPhaseCount(self): return _DataModel.OriginQuality_usedPhaseCount(self)
    def setAssociatedStationCount(self, *args): return _DataModel.OriginQuality_setAssociatedStationCount(self, *args)
    def associatedStationCount(self): return _DataModel.OriginQuality_associatedStationCount(self)
    def setUsedStationCount(self, *args): return _DataModel.OriginQuality_setUsedStationCount(self, *args)
    def usedStationCount(self): return _DataModel.OriginQuality_usedStationCount(self)
    def setDepthPhaseCount(self, *args): return _DataModel.OriginQuality_setDepthPhaseCount(self, *args)
    def depthPhaseCount(self): return _DataModel.OriginQuality_depthPhaseCount(self)
    def setStandardError(self, *args): return _DataModel.OriginQuality_setStandardError(self, *args)
    def standardError(self): return _DataModel.OriginQuality_standardError(self)
    def setAzimuthalGap(self, *args): return _DataModel.OriginQuality_setAzimuthalGap(self, *args)
    def azimuthalGap(self): return _DataModel.OriginQuality_azimuthalGap(self)
    def setSecondaryAzimuthalGap(self, *args): return _DataModel.OriginQuality_setSecondaryAzimuthalGap(self, *args)
    def secondaryAzimuthalGap(self): return _DataModel.OriginQuality_secondaryAzimuthalGap(self)
    def setGroundTruthLevel(self, *args): return _DataModel.OriginQuality_setGroundTruthLevel(self, *args)
    def groundTruthLevel(self): return _DataModel.OriginQuality_groundTruthLevel(self)
    def setMaximumDistance(self, *args): return _DataModel.OriginQuality_setMaximumDistance(self, *args)
    def maximumDistance(self): return _DataModel.OriginQuality_maximumDistance(self)
    def setMinimumDistance(self, *args): return _DataModel.OriginQuality_setMinimumDistance(self, *args)
    def minimumDistance(self): return _DataModel.OriginQuality_minimumDistance(self)
    def setMedianDistance(self, *args): return _DataModel.OriginQuality_setMedianDistance(self, *args)
    def medianDistance(self): return _DataModel.OriginQuality_medianDistance(self)
OriginQuality_swigregister = _DataModel.OriginQuality_swigregister
OriginQuality_swigregister(OriginQuality)

def OriginQuality_ClassName():
  return _DataModel.OriginQuality_ClassName()
OriginQuality_ClassName = _DataModel.OriginQuality_ClassName

def OriginQuality_TypeInfo():
  return _DataModel.OriginQuality_TypeInfo()
OriginQuality_TypeInfo = _DataModel.OriginQuality_TypeInfo

def OriginQuality_Cast(*args):
  return _DataModel.OriginQuality_Cast(*args)
OriginQuality_Cast = _DataModel.OriginQuality_Cast

def OriginQuality_ConstCast(*args):
  return _DataModel.OriginQuality_ConstCast(*args)
OriginQuality_ConstCast = _DataModel.OriginQuality_ConstCast

class NodalPlane(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalPlane, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.NodalPlane_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.NodalPlane_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.NodalPlane_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.NodalPlane_TypeInfo)
    def className(self): return _DataModel.NodalPlane_className(self)
    def typeInfo(self): return _DataModel.NodalPlane_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.NodalPlane_Cast
    if _newclass:Cast = staticmethod(_DataModel.NodalPlane_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.NodalPlane_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.NodalPlane_ConstCast)
    def serialize(self, *args): return _DataModel.NodalPlane_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_NodalPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NodalPlane
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.NodalPlane___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.NodalPlane___ne__(self, *args)
    def equal(self, *args): return _DataModel.NodalPlane_equal(self, *args)
    def setStrike(self, *args): return _DataModel.NodalPlane_setStrike(self, *args)
    def strike(self, *args): return _DataModel.NodalPlane_strike(self, *args)
    def setDip(self, *args): return _DataModel.NodalPlane_setDip(self, *args)
    def dip(self, *args): return _DataModel.NodalPlane_dip(self, *args)
    def setRake(self, *args): return _DataModel.NodalPlane_setRake(self, *args)
    def rake(self, *args): return _DataModel.NodalPlane_rake(self, *args)
NodalPlane_swigregister = _DataModel.NodalPlane_swigregister
NodalPlane_swigregister(NodalPlane)

def NodalPlane_ClassName():
  return _DataModel.NodalPlane_ClassName()
NodalPlane_ClassName = _DataModel.NodalPlane_ClassName

def NodalPlane_TypeInfo():
  return _DataModel.NodalPlane_TypeInfo()
NodalPlane_TypeInfo = _DataModel.NodalPlane_TypeInfo

def NodalPlane_Cast(*args):
  return _DataModel.NodalPlane_Cast(*args)
NodalPlane_Cast = _DataModel.NodalPlane_Cast

def NodalPlane_ConstCast(*args):
  return _DataModel.NodalPlane_ConstCast(*args)
NodalPlane_ConstCast = _DataModel.NodalPlane_ConstCast

class TimeWindow(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeWindow, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.TimeWindow_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.TimeWindow_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.TimeWindow_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.TimeWindow_TypeInfo)
    def className(self): return _DataModel.TimeWindow_className(self)
    def typeInfo(self): return _DataModel.TimeWindow_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.TimeWindow_Cast
    if _newclass:Cast = staticmethod(_DataModel.TimeWindow_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.TimeWindow_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.TimeWindow_ConstCast)
    def serialize(self, *args): return _DataModel.TimeWindow_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_TimeWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_TimeWindow
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.TimeWindow___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.TimeWindow___ne__(self, *args)
    def equal(self, *args): return _DataModel.TimeWindow_equal(self, *args)
    def setReference(self, *args): return _DataModel.TimeWindow_setReference(self, *args)
    def reference(self): return _DataModel.TimeWindow_reference(self)
    def setBegin(self, *args): return _DataModel.TimeWindow_setBegin(self, *args)
    def begin(self): return _DataModel.TimeWindow_begin(self)
    def setEnd(self, *args): return _DataModel.TimeWindow_setEnd(self, *args)
    def end(self): return _DataModel.TimeWindow_end(self)
TimeWindow_swigregister = _DataModel.TimeWindow_swigregister
TimeWindow_swigregister(TimeWindow)

def TimeWindow_ClassName():
  return _DataModel.TimeWindow_ClassName()
TimeWindow_ClassName = _DataModel.TimeWindow_ClassName

def TimeWindow_TypeInfo():
  return _DataModel.TimeWindow_TypeInfo()
TimeWindow_TypeInfo = _DataModel.TimeWindow_TypeInfo

def TimeWindow_Cast(*args):
  return _DataModel.TimeWindow_Cast(*args)
TimeWindow_Cast = _DataModel.TimeWindow_Cast

def TimeWindow_ConstCast(*args):
  return _DataModel.TimeWindow_ConstCast(*args)
TimeWindow_ConstCast = _DataModel.TimeWindow_ConstCast

class WaveformStreamID(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformStreamID, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformStreamID, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.WaveformStreamID_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.WaveformStreamID_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.WaveformStreamID_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.WaveformStreamID_TypeInfo)
    def className(self): return _DataModel.WaveformStreamID_className(self)
    def typeInfo(self): return _DataModel.WaveformStreamID_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.WaveformStreamID_Cast
    if _newclass:Cast = staticmethod(_DataModel.WaveformStreamID_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.WaveformStreamID_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.WaveformStreamID_ConstCast)
    def serialize(self, *args): return _DataModel.WaveformStreamID_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_WaveformStreamID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_WaveformStreamID
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.WaveformStreamID___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.WaveformStreamID___ne__(self, *args)
    def equal(self, *args): return _DataModel.WaveformStreamID_equal(self, *args)
    def setNetworkCode(self, *args): return _DataModel.WaveformStreamID_setNetworkCode(self, *args)
    def networkCode(self): return _DataModel.WaveformStreamID_networkCode(self)
    def setStationCode(self, *args): return _DataModel.WaveformStreamID_setStationCode(self, *args)
    def stationCode(self): return _DataModel.WaveformStreamID_stationCode(self)
    def setLocationCode(self, *args): return _DataModel.WaveformStreamID_setLocationCode(self, *args)
    def locationCode(self): return _DataModel.WaveformStreamID_locationCode(self)
    def setChannelCode(self, *args): return _DataModel.WaveformStreamID_setChannelCode(self, *args)
    def channelCode(self): return _DataModel.WaveformStreamID_channelCode(self)
    def setResourceURI(self, *args): return _DataModel.WaveformStreamID_setResourceURI(self, *args)
    def resourceURI(self): return _DataModel.WaveformStreamID_resourceURI(self)
WaveformStreamID_swigregister = _DataModel.WaveformStreamID_swigregister
WaveformStreamID_swigregister(WaveformStreamID)

def WaveformStreamID_ClassName():
  return _DataModel.WaveformStreamID_ClassName()
WaveformStreamID_ClassName = _DataModel.WaveformStreamID_ClassName

def WaveformStreamID_TypeInfo():
  return _DataModel.WaveformStreamID_TypeInfo()
WaveformStreamID_TypeInfo = _DataModel.WaveformStreamID_TypeInfo

def WaveformStreamID_Cast(*args):
  return _DataModel.WaveformStreamID_Cast(*args)
WaveformStreamID_Cast = _DataModel.WaveformStreamID_Cast

def WaveformStreamID_ConstCast(*args):
  return _DataModel.WaveformStreamID_ConstCast(*args)
WaveformStreamID_ConstCast = _DataModel.WaveformStreamID_ConstCast

class SourceTimeFunction(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceTimeFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SourceTimeFunction, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.SourceTimeFunction_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.SourceTimeFunction_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.SourceTimeFunction_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.SourceTimeFunction_TypeInfo)
    def className(self): return _DataModel.SourceTimeFunction_className(self)
    def typeInfo(self): return _DataModel.SourceTimeFunction_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.SourceTimeFunction_Cast
    if _newclass:Cast = staticmethod(_DataModel.SourceTimeFunction_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.SourceTimeFunction_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.SourceTimeFunction_ConstCast)
    def serialize(self, *args): return _DataModel.SourceTimeFunction_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_SourceTimeFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SourceTimeFunction
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.SourceTimeFunction___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SourceTimeFunction___ne__(self, *args)
    def equal(self, *args): return _DataModel.SourceTimeFunction_equal(self, *args)
    def setType(self, *args): return _DataModel.SourceTimeFunction_setType(self, *args)
    def type(self): return _DataModel.SourceTimeFunction_type(self)
    def setDuration(self, *args): return _DataModel.SourceTimeFunction_setDuration(self, *args)
    def duration(self): return _DataModel.SourceTimeFunction_duration(self)
    def setRiseTime(self, *args): return _DataModel.SourceTimeFunction_setRiseTime(self, *args)
    def riseTime(self): return _DataModel.SourceTimeFunction_riseTime(self)
    def setDecayTime(self, *args): return _DataModel.SourceTimeFunction_setDecayTime(self, *args)
    def decayTime(self): return _DataModel.SourceTimeFunction_decayTime(self)
SourceTimeFunction_swigregister = _DataModel.SourceTimeFunction_swigregister
SourceTimeFunction_swigregister(SourceTimeFunction)

def SourceTimeFunction_ClassName():
  return _DataModel.SourceTimeFunction_ClassName()
SourceTimeFunction_ClassName = _DataModel.SourceTimeFunction_ClassName

def SourceTimeFunction_TypeInfo():
  return _DataModel.SourceTimeFunction_TypeInfo()
SourceTimeFunction_TypeInfo = _DataModel.SourceTimeFunction_TypeInfo

def SourceTimeFunction_Cast(*args):
  return _DataModel.SourceTimeFunction_Cast(*args)
SourceTimeFunction_Cast = _DataModel.SourceTimeFunction_Cast

def SourceTimeFunction_ConstCast(*args):
  return _DataModel.SourceTimeFunction_ConstCast(*args)
SourceTimeFunction_ConstCast = _DataModel.SourceTimeFunction_ConstCast

class NodalPlanes(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalPlanes, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalPlanes, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.NodalPlanes_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.NodalPlanes_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.NodalPlanes_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.NodalPlanes_TypeInfo)
    def className(self): return _DataModel.NodalPlanes_className(self)
    def typeInfo(self): return _DataModel.NodalPlanes_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.NodalPlanes_Cast
    if _newclass:Cast = staticmethod(_DataModel.NodalPlanes_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.NodalPlanes_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.NodalPlanes_ConstCast)
    def serialize(self, *args): return _DataModel.NodalPlanes_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_NodalPlanes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NodalPlanes
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.NodalPlanes___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.NodalPlanes___ne__(self, *args)
    def equal(self, *args): return _DataModel.NodalPlanes_equal(self, *args)
    def setNodalPlane1(self, *args): return _DataModel.NodalPlanes_setNodalPlane1(self, *args)
    def nodalPlane1(self, *args): return _DataModel.NodalPlanes_nodalPlane1(self, *args)
    def setNodalPlane2(self, *args): return _DataModel.NodalPlanes_setNodalPlane2(self, *args)
    def nodalPlane2(self, *args): return _DataModel.NodalPlanes_nodalPlane2(self, *args)
    def setPreferredPlane(self, *args): return _DataModel.NodalPlanes_setPreferredPlane(self, *args)
    def preferredPlane(self): return _DataModel.NodalPlanes_preferredPlane(self)
NodalPlanes_swigregister = _DataModel.NodalPlanes_swigregister
NodalPlanes_swigregister(NodalPlanes)

def NodalPlanes_ClassName():
  return _DataModel.NodalPlanes_ClassName()
NodalPlanes_ClassName = _DataModel.NodalPlanes_ClassName

def NodalPlanes_TypeInfo():
  return _DataModel.NodalPlanes_TypeInfo()
NodalPlanes_TypeInfo = _DataModel.NodalPlanes_TypeInfo

def NodalPlanes_Cast(*args):
  return _DataModel.NodalPlanes_Cast(*args)
NodalPlanes_Cast = _DataModel.NodalPlanes_Cast

def NodalPlanes_ConstCast(*args):
  return _DataModel.NodalPlanes_ConstCast(*args)
NodalPlanes_ConstCast = _DataModel.NodalPlanes_ConstCast

class ConfidenceEllipsoid(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfidenceEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfidenceEllipsoid, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ConfidenceEllipsoid_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ConfidenceEllipsoid_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ConfidenceEllipsoid_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ConfidenceEllipsoid_TypeInfo)
    def className(self): return _DataModel.ConfidenceEllipsoid_className(self)
    def typeInfo(self): return _DataModel.ConfidenceEllipsoid_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ConfidenceEllipsoid_Cast
    if _newclass:Cast = staticmethod(_DataModel.ConfidenceEllipsoid_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ConfidenceEllipsoid_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ConfidenceEllipsoid_ConstCast)
    def serialize(self, *args): return _DataModel.ConfidenceEllipsoid_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ConfidenceEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfidenceEllipsoid
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ConfidenceEllipsoid___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ConfidenceEllipsoid___ne__(self, *args)
    def equal(self, *args): return _DataModel.ConfidenceEllipsoid_equal(self, *args)
    def setSemiMajorAxisLength(self, *args): return _DataModel.ConfidenceEllipsoid_setSemiMajorAxisLength(self, *args)
    def semiMajorAxisLength(self): return _DataModel.ConfidenceEllipsoid_semiMajorAxisLength(self)
    def setSemiMinorAxisLength(self, *args): return _DataModel.ConfidenceEllipsoid_setSemiMinorAxisLength(self, *args)
    def semiMinorAxisLength(self): return _DataModel.ConfidenceEllipsoid_semiMinorAxisLength(self)
    def setSemiIntermediateAxisLength(self, *args): return _DataModel.ConfidenceEllipsoid_setSemiIntermediateAxisLength(self, *args)
    def semiIntermediateAxisLength(self): return _DataModel.ConfidenceEllipsoid_semiIntermediateAxisLength(self)
    def setMajorAxisPlunge(self, *args): return _DataModel.ConfidenceEllipsoid_setMajorAxisPlunge(self, *args)
    def majorAxisPlunge(self): return _DataModel.ConfidenceEllipsoid_majorAxisPlunge(self)
    def setMajorAxisAzimuth(self, *args): return _DataModel.ConfidenceEllipsoid_setMajorAxisAzimuth(self, *args)
    def majorAxisAzimuth(self): return _DataModel.ConfidenceEllipsoid_majorAxisAzimuth(self)
    def setMajorAxisRotation(self, *args): return _DataModel.ConfidenceEllipsoid_setMajorAxisRotation(self, *args)
    def majorAxisRotation(self): return _DataModel.ConfidenceEllipsoid_majorAxisRotation(self)
ConfidenceEllipsoid_swigregister = _DataModel.ConfidenceEllipsoid_swigregister
ConfidenceEllipsoid_swigregister(ConfidenceEllipsoid)

def ConfidenceEllipsoid_ClassName():
  return _DataModel.ConfidenceEllipsoid_ClassName()
ConfidenceEllipsoid_ClassName = _DataModel.ConfidenceEllipsoid_ClassName

def ConfidenceEllipsoid_TypeInfo():
  return _DataModel.ConfidenceEllipsoid_TypeInfo()
ConfidenceEllipsoid_TypeInfo = _DataModel.ConfidenceEllipsoid_TypeInfo

def ConfidenceEllipsoid_Cast(*args):
  return _DataModel.ConfidenceEllipsoid_Cast(*args)
ConfidenceEllipsoid_Cast = _DataModel.ConfidenceEllipsoid_Cast

def ConfidenceEllipsoid_ConstCast(*args):
  return _DataModel.ConfidenceEllipsoid_ConstCast(*args)
ConfidenceEllipsoid_ConstCast = _DataModel.ConfidenceEllipsoid_ConstCast

class OriginUncertainty(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginUncertainty, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginUncertainty, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.OriginUncertainty_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.OriginUncertainty_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.OriginUncertainty_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.OriginUncertainty_TypeInfo)
    def className(self): return _DataModel.OriginUncertainty_className(self)
    def typeInfo(self): return _DataModel.OriginUncertainty_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.OriginUncertainty_Cast
    if _newclass:Cast = staticmethod(_DataModel.OriginUncertainty_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.OriginUncertainty_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.OriginUncertainty_ConstCast)
    def serialize(self, *args): return _DataModel.OriginUncertainty_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_OriginUncertainty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginUncertainty
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.OriginUncertainty___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.OriginUncertainty___ne__(self, *args)
    def equal(self, *args): return _DataModel.OriginUncertainty_equal(self, *args)
    def setHorizontalUncertainty(self, *args): return _DataModel.OriginUncertainty_setHorizontalUncertainty(self, *args)
    def horizontalUncertainty(self): return _DataModel.OriginUncertainty_horizontalUncertainty(self)
    def setMinHorizontalUncertainty(self, *args): return _DataModel.OriginUncertainty_setMinHorizontalUncertainty(self, *args)
    def minHorizontalUncertainty(self): return _DataModel.OriginUncertainty_minHorizontalUncertainty(self)
    def setMaxHorizontalUncertainty(self, *args): return _DataModel.OriginUncertainty_setMaxHorizontalUncertainty(self, *args)
    def maxHorizontalUncertainty(self): return _DataModel.OriginUncertainty_maxHorizontalUncertainty(self)
    def setAzimuthMaxHorizontalUncertainty(self, *args): return _DataModel.OriginUncertainty_setAzimuthMaxHorizontalUncertainty(self, *args)
    def azimuthMaxHorizontalUncertainty(self): return _DataModel.OriginUncertainty_azimuthMaxHorizontalUncertainty(self)
    def setConfidenceEllipsoid(self, *args): return _DataModel.OriginUncertainty_setConfidenceEllipsoid(self, *args)
    def confidenceEllipsoid(self, *args): return _DataModel.OriginUncertainty_confidenceEllipsoid(self, *args)
    def setPreferredDescription(self, *args): return _DataModel.OriginUncertainty_setPreferredDescription(self, *args)
    def preferredDescription(self): return _DataModel.OriginUncertainty_preferredDescription(self)
OriginUncertainty_swigregister = _DataModel.OriginUncertainty_swigregister
OriginUncertainty_swigregister(OriginUncertainty)

def OriginUncertainty_ClassName():
  return _DataModel.OriginUncertainty_ClassName()
OriginUncertainty_ClassName = _DataModel.OriginUncertainty_ClassName

def OriginUncertainty_TypeInfo():
  return _DataModel.OriginUncertainty_TypeInfo()
OriginUncertainty_TypeInfo = _DataModel.OriginUncertainty_TypeInfo

def OriginUncertainty_Cast(*args):
  return _DataModel.OriginUncertainty_Cast(*args)
OriginUncertainty_Cast = _DataModel.OriginUncertainty_Cast

def OriginUncertainty_ConstCast(*args):
  return _DataModel.OriginUncertainty_ConstCast(*args)
OriginUncertainty_ConstCast = _DataModel.OriginUncertainty_ConstCast

class Blob(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Blob_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Blob_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Blob_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Blob_TypeInfo)
    def className(self): return _DataModel.Blob_className(self)
    def typeInfo(self): return _DataModel.Blob_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Blob_Cast
    if _newclass:Cast = staticmethod(_DataModel.Blob_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Blob_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Blob_ConstCast)
    def serialize(self, *args): return _DataModel.Blob_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Blob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Blob
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Blob___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Blob___ne__(self, *args)
    def equal(self, *args): return _DataModel.Blob_equal(self, *args)
    def setContent(self, *args): return _DataModel.Blob_setContent(self, *args)
    def content(self): return _DataModel.Blob_content(self)
Blob_swigregister = _DataModel.Blob_swigregister
Blob_swigregister(Blob)

def Blob_ClassName():
  return _DataModel.Blob_ClassName()
Blob_ClassName = _DataModel.Blob_ClassName

def Blob_TypeInfo():
  return _DataModel.Blob_TypeInfo()
Blob_TypeInfo = _DataModel.Blob_TypeInfo

def Blob_Cast(*args):
  return _DataModel.Blob_Cast(*args)
Blob_Cast = _DataModel.Blob_Cast

def Blob_ConstCast(*args):
  return _DataModel.Blob_ConstCast(*args)
Blob_ConstCast = _DataModel.Blob_ConstCast

class RealArray(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealArray, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.RealArray_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.RealArray_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.RealArray_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.RealArray_TypeInfo)
    def className(self): return _DataModel.RealArray_className(self)
    def typeInfo(self): return _DataModel.RealArray_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.RealArray_Cast
    if _newclass:Cast = staticmethod(_DataModel.RealArray_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.RealArray_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.RealArray_ConstCast)
    def serialize(self, *args): return _DataModel.RealArray_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_RealArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RealArray
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.RealArray___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RealArray___ne__(self, *args)
    def equal(self, *args): return _DataModel.RealArray_equal(self, *args)
    def setContent(self, *args): return _DataModel.RealArray_setContent(self, *args)
    def content(self, *args): return _DataModel.RealArray_content(self, *args)
RealArray_swigregister = _DataModel.RealArray_swigregister
RealArray_swigregister(RealArray)

def RealArray_ClassName():
  return _DataModel.RealArray_ClassName()
RealArray_ClassName = _DataModel.RealArray_ClassName

def RealArray_TypeInfo():
  return _DataModel.RealArray_TypeInfo()
RealArray_TypeInfo = _DataModel.RealArray_TypeInfo

def RealArray_Cast(*args):
  return _DataModel.RealArray_Cast(*args)
RealArray_Cast = _DataModel.RealArray_Cast

def RealArray_ConstCast(*args):
  return _DataModel.RealArray_ConstCast(*args)
RealArray_ConstCast = _DataModel.RealArray_ConstCast

class ComplexArray(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexArray, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ComplexArray_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ComplexArray_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ComplexArray_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ComplexArray_TypeInfo)
    def className(self): return _DataModel.ComplexArray_className(self)
    def typeInfo(self): return _DataModel.ComplexArray_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ComplexArray_Cast
    if _newclass:Cast = staticmethod(_DataModel.ComplexArray_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ComplexArray_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ComplexArray_ConstCast)
    def serialize(self, *args): return _DataModel.ComplexArray_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ComplexArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ComplexArray
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ComplexArray___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ComplexArray___ne__(self, *args)
    def equal(self, *args): return _DataModel.ComplexArray_equal(self, *args)
    def setContent(self, *args): return _DataModel.ComplexArray_setContent(self, *args)
    def content(self, *args): return _DataModel.ComplexArray_content(self, *args)
ComplexArray_swigregister = _DataModel.ComplexArray_swigregister
ComplexArray_swigregister(ComplexArray)

def ComplexArray_ClassName():
  return _DataModel.ComplexArray_ClassName()
ComplexArray_ClassName = _DataModel.ComplexArray_ClassName

def ComplexArray_TypeInfo():
  return _DataModel.ComplexArray_TypeInfo()
ComplexArray_TypeInfo = _DataModel.ComplexArray_TypeInfo

def ComplexArray_Cast(*args):
  return _DataModel.ComplexArray_Cast(*args)
ComplexArray_Cast = _DataModel.ComplexArray_Cast

def ComplexArray_ConstCast(*args):
  return _DataModel.ComplexArray_ConstCast(*args)
ComplexArray_ConstCast = _DataModel.ComplexArray_ConstCast

class ArclinkRequestSummary(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestSummary, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestSummary, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkRequestSummary_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkRequestSummary_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkRequestSummary_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkRequestSummary_TypeInfo)
    def className(self): return _DataModel.ArclinkRequestSummary_className(self)
    def typeInfo(self): return _DataModel.ArclinkRequestSummary_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkRequestSummary_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkRequestSummary_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkRequestSummary_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkRequestSummary_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkRequestSummary_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkRequestSummary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequestSummary
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ArclinkRequestSummary___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkRequestSummary___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkRequestSummary_equal(self, *args)
    def setOkLineCount(self, *args): return _DataModel.ArclinkRequestSummary_setOkLineCount(self, *args)
    def okLineCount(self): return _DataModel.ArclinkRequestSummary_okLineCount(self)
    def setTotalLineCount(self, *args): return _DataModel.ArclinkRequestSummary_setTotalLineCount(self, *args)
    def totalLineCount(self): return _DataModel.ArclinkRequestSummary_totalLineCount(self)
    def setAverageTimeWindow(self, *args): return _DataModel.ArclinkRequestSummary_setAverageTimeWindow(self, *args)
    def averageTimeWindow(self): return _DataModel.ArclinkRequestSummary_averageTimeWindow(self)
ArclinkRequestSummary_swigregister = _DataModel.ArclinkRequestSummary_swigregister
ArclinkRequestSummary_swigregister(ArclinkRequestSummary)

def ArclinkRequestSummary_ClassName():
  return _DataModel.ArclinkRequestSummary_ClassName()
ArclinkRequestSummary_ClassName = _DataModel.ArclinkRequestSummary_ClassName

def ArclinkRequestSummary_TypeInfo():
  return _DataModel.ArclinkRequestSummary_TypeInfo()
ArclinkRequestSummary_TypeInfo = _DataModel.ArclinkRequestSummary_TypeInfo

def ArclinkRequestSummary_Cast(*args):
  return _DataModel.ArclinkRequestSummary_Cast(*args)
ArclinkRequestSummary_Cast = _DataModel.ArclinkRequestSummary_Cast

def ArclinkRequestSummary_ConstCast(*args):
  return _DataModel.ArclinkRequestSummary_ConstCast(*args)
ArclinkRequestSummary_ConstCast = _DataModel.ArclinkRequestSummary_ConstCast

class JournalEntry(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalEntry, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.JournalEntry_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.JournalEntry_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.JournalEntry_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.JournalEntry_TypeInfo)
    def className(self): return _DataModel.JournalEntry_className(self)
    def typeInfo(self): return _DataModel.JournalEntry_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.JournalEntry_Cast
    if _newclass:Cast = staticmethod(_DataModel.JournalEntry_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.JournalEntry_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.JournalEntry_ConstCast)
    def serialize(self, *args): return _DataModel.JournalEntry_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_JournalEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_JournalEntry
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.JournalEntry___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.JournalEntry___ne__(self, *args)
    def equal(self, *args): return _DataModel.JournalEntry_equal(self, *args)
    def setCreated(self, *args): return _DataModel.JournalEntry_setCreated(self, *args)
    def created(self): return _DataModel.JournalEntry_created(self)
    def setObjectID(self, *args): return _DataModel.JournalEntry_setObjectID(self, *args)
    def objectID(self): return _DataModel.JournalEntry_objectID(self)
    def setSender(self, *args): return _DataModel.JournalEntry_setSender(self, *args)
    def sender(self): return _DataModel.JournalEntry_sender(self)
    def setAction(self, *args): return _DataModel.JournalEntry_setAction(self, *args)
    def action(self): return _DataModel.JournalEntry_action(self)
    def setParameters(self, *args): return _DataModel.JournalEntry_setParameters(self, *args)
    def parameters(self): return _DataModel.JournalEntry_parameters(self)
    def journaling(self): return _DataModel.JournalEntry_journaling(self)
    def assign(self, *args): return _DataModel.JournalEntry_assign(self, *args)
    def attachTo(self, *args): return _DataModel.JournalEntry_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.JournalEntry_detachFrom(self, *args)
    def detach(self): return _DataModel.JournalEntry_detach(self)
    def clone(self): return _DataModel.JournalEntry_clone(self)
    def accept(self, *args): return _DataModel.JournalEntry_accept(self, *args)
JournalEntry_swigregister = _DataModel.JournalEntry_swigregister
JournalEntry_swigregister(JournalEntry)

def JournalEntry_ClassName():
  return _DataModel.JournalEntry_ClassName()
JournalEntry_ClassName = _DataModel.JournalEntry_ClassName

def JournalEntry_TypeInfo():
  return _DataModel.JournalEntry_TypeInfo()
JournalEntry_TypeInfo = _DataModel.JournalEntry_TypeInfo

def JournalEntry_Cast(*args):
  return _DataModel.JournalEntry_Cast(*args)
JournalEntry_Cast = _DataModel.JournalEntry_Cast

def JournalEntry_ConstCast(*args):
  return _DataModel.JournalEntry_ConstCast(*args)
JournalEntry_ConstCast = _DataModel.JournalEntry_ConstCast

class Journaling(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Journaling, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Journaling, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Journaling_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Journaling_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Journaling_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Journaling_TypeInfo)
    def className(self): return _DataModel.Journaling_className(self)
    def typeInfo(self): return _DataModel.Journaling_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Journaling_Cast
    if _newclass:Cast = staticmethod(_DataModel.Journaling_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Journaling_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Journaling_ConstCast)
    def serialize(self, *args): return _DataModel.Journaling_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Journaling(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Journaling
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Journaling___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Journaling___ne__(self, *args)
    def equal(self, *args): return _DataModel.Journaling_equal(self, *args)
    def add(self, *args): return _DataModel.Journaling_add(self, *args)
    def remove(self, *args): return _DataModel.Journaling_remove(self, *args)
    def removeJournalEntry(self, *args): return _DataModel.Journaling_removeJournalEntry(self, *args)
    def journalEntryCount(self): return _DataModel.Journaling_journalEntryCount(self)
    def journalEntry(self, *args): return _DataModel.Journaling_journalEntry(self, *args)
    def findJournalEntry(self, *args): return _DataModel.Journaling_findJournalEntry(self, *args)
    def assign(self, *args): return _DataModel.Journaling_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Journaling_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Journaling_detachFrom(self, *args)
    def detach(self): return _DataModel.Journaling_detach(self)
    def clone(self): return _DataModel.Journaling_clone(self)
    def updateChild(self, *args): return _DataModel.Journaling_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Journaling_accept(self, *args)
Journaling_swigregister = _DataModel.Journaling_swigregister
Journaling_swigregister(Journaling)

def Journaling_ClassName():
  return _DataModel.Journaling_ClassName()
Journaling_ClassName = _DataModel.Journaling_ClassName

def Journaling_TypeInfo():
  return _DataModel.Journaling_TypeInfo()
Journaling_TypeInfo = _DataModel.Journaling_TypeInfo

def Journaling_Cast(*args):
  return _DataModel.Journaling_Cast(*args)
Journaling_Cast = _DataModel.Journaling_Cast

def Journaling_ConstCast(*args):
  return _DataModel.Journaling_ConstCast(*args)
Journaling_ConstCast = _DataModel.Journaling_ConstCast

class ArclinkUserIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkUserIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkUserIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkUserIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ArclinkUserIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkUserIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.ArclinkUserIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ArclinkUserIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ArclinkUserIndex_name_get, _DataModel.ArclinkUserIndex_name_set)
    __swig_setmethods__["email"] = _DataModel.ArclinkUserIndex_email_set
    __swig_getmethods__["email"] = _DataModel.ArclinkUserIndex_email_get
    if _newclass:email = _swig_property(_DataModel.ArclinkUserIndex_email_get, _DataModel.ArclinkUserIndex_email_set)
    __swig_destroy__ = _DataModel.delete_ArclinkUserIndex
    __del__ = lambda self : None;
ArclinkUserIndex_swigregister = _DataModel.ArclinkUserIndex_swigregister
ArclinkUserIndex_swigregister(ArclinkUserIndex)

class ArclinkUser(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkUser, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkUser, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkUser_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkUser_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkUser_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkUser_TypeInfo)
    def className(self): return _DataModel.ArclinkUser_className(self)
    def typeInfo(self): return _DataModel.ArclinkUser_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkUser_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkUser_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkUser_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkUser_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkUser_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkUser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkUser
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ArclinkUser_Create
    if _newclass:Create = staticmethod(_DataModel.ArclinkUser_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ArclinkUser_Find
    if _newclass:Find = staticmethod(_DataModel.ArclinkUser_Find)
    def __eq__(self, *args): return _DataModel.ArclinkUser___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkUser___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkUser_equal(self, *args)
    def setName(self, *args): return _DataModel.ArclinkUser_setName(self, *args)
    def name(self): return _DataModel.ArclinkUser_name(self)
    def setEmail(self, *args): return _DataModel.ArclinkUser_setEmail(self, *args)
    def email(self): return _DataModel.ArclinkUser_email(self)
    def setPassword(self, *args): return _DataModel.ArclinkUser_setPassword(self, *args)
    def password(self): return _DataModel.ArclinkUser_password(self)
    def index(self): return _DataModel.ArclinkUser_index(self)
    def equalIndex(self, *args): return _DataModel.ArclinkUser_equalIndex(self, *args)
    def arclinkLog(self): return _DataModel.ArclinkUser_arclinkLog(self)
    def assign(self, *args): return _DataModel.ArclinkUser_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ArclinkUser_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ArclinkUser_detachFrom(self, *args)
    def detach(self): return _DataModel.ArclinkUser_detach(self)
    def clone(self): return _DataModel.ArclinkUser_clone(self)
    def updateChild(self, *args): return _DataModel.ArclinkUser_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ArclinkUser_accept(self, *args)
ArclinkUser_swigregister = _DataModel.ArclinkUser_swigregister
ArclinkUser_swigregister(ArclinkUser)

def ArclinkUser_ClassName():
  return _DataModel.ArclinkUser_ClassName()
ArclinkUser_ClassName = _DataModel.ArclinkUser_ClassName

def ArclinkUser_TypeInfo():
  return _DataModel.ArclinkUser_TypeInfo()
ArclinkUser_TypeInfo = _DataModel.ArclinkUser_TypeInfo

def ArclinkUser_Cast(*args):
  return _DataModel.ArclinkUser_Cast(*args)
ArclinkUser_Cast = _DataModel.ArclinkUser_Cast

def ArclinkUser_ConstCast(*args):
  return _DataModel.ArclinkUser_ConstCast(*args)
ArclinkUser_ConstCast = _DataModel.ArclinkUser_ConstCast

def ArclinkUser_Create(*args):
  return _DataModel.ArclinkUser_Create(*args)
ArclinkUser_Create = _DataModel.ArclinkUser_Create

def ArclinkUser_Find(*args):
  return _DataModel.ArclinkUser_Find(*args)
ArclinkUser_Find = _DataModel.ArclinkUser_Find

class ArclinkStatusLineIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkStatusLineIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkStatusLineIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkStatusLineIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ArclinkStatusLineIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkStatusLineIndex___ne__(self, *args)
    __swig_setmethods__["volumeID"] = _DataModel.ArclinkStatusLineIndex_volumeID_set
    __swig_getmethods__["volumeID"] = _DataModel.ArclinkStatusLineIndex_volumeID_get
    if _newclass:volumeID = _swig_property(_DataModel.ArclinkStatusLineIndex_volumeID_get, _DataModel.ArclinkStatusLineIndex_volumeID_set)
    __swig_setmethods__["type"] = _DataModel.ArclinkStatusLineIndex_type_set
    __swig_getmethods__["type"] = _DataModel.ArclinkStatusLineIndex_type_get
    if _newclass:type = _swig_property(_DataModel.ArclinkStatusLineIndex_type_get, _DataModel.ArclinkStatusLineIndex_type_set)
    __swig_setmethods__["status"] = _DataModel.ArclinkStatusLineIndex_status_set
    __swig_getmethods__["status"] = _DataModel.ArclinkStatusLineIndex_status_get
    if _newclass:status = _swig_property(_DataModel.ArclinkStatusLineIndex_status_get, _DataModel.ArclinkStatusLineIndex_status_set)
    __swig_destroy__ = _DataModel.delete_ArclinkStatusLineIndex
    __del__ = lambda self : None;
ArclinkStatusLineIndex_swigregister = _DataModel.ArclinkStatusLineIndex_swigregister
ArclinkStatusLineIndex_swigregister(ArclinkStatusLineIndex)

class ArclinkStatusLine(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkStatusLine, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkStatusLine, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkStatusLine_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkStatusLine_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkStatusLine_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkStatusLine_TypeInfo)
    def className(self): return _DataModel.ArclinkStatusLine_className(self)
    def typeInfo(self): return _DataModel.ArclinkStatusLine_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkStatusLine_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkStatusLine_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkStatusLine_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkStatusLine_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkStatusLine_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkStatusLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkStatusLine
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ArclinkStatusLine___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkStatusLine___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkStatusLine_equal(self, *args)
    def setType(self, *args): return _DataModel.ArclinkStatusLine_setType(self, *args)
    def type(self): return _DataModel.ArclinkStatusLine_type(self)
    def setStatus(self, *args): return _DataModel.ArclinkStatusLine_setStatus(self, *args)
    def status(self): return _DataModel.ArclinkStatusLine_status(self)
    def setSize(self, *args): return _DataModel.ArclinkStatusLine_setSize(self, *args)
    def size(self): return _DataModel.ArclinkStatusLine_size(self)
    def setMessage(self, *args): return _DataModel.ArclinkStatusLine_setMessage(self, *args)
    def message(self): return _DataModel.ArclinkStatusLine_message(self)
    def setVolumeID(self, *args): return _DataModel.ArclinkStatusLine_setVolumeID(self, *args)
    def volumeID(self): return _DataModel.ArclinkStatusLine_volumeID(self)
    def index(self): return _DataModel.ArclinkStatusLine_index(self)
    def equalIndex(self, *args): return _DataModel.ArclinkStatusLine_equalIndex(self, *args)
    def arclinkRequest(self): return _DataModel.ArclinkStatusLine_arclinkRequest(self)
    def assign(self, *args): return _DataModel.ArclinkStatusLine_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ArclinkStatusLine_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ArclinkStatusLine_detachFrom(self, *args)
    def detach(self): return _DataModel.ArclinkStatusLine_detach(self)
    def clone(self): return _DataModel.ArclinkStatusLine_clone(self)
    def accept(self, *args): return _DataModel.ArclinkStatusLine_accept(self, *args)
ArclinkStatusLine_swigregister = _DataModel.ArclinkStatusLine_swigregister
ArclinkStatusLine_swigregister(ArclinkStatusLine)

def ArclinkStatusLine_ClassName():
  return _DataModel.ArclinkStatusLine_ClassName()
ArclinkStatusLine_ClassName = _DataModel.ArclinkStatusLine_ClassName

def ArclinkStatusLine_TypeInfo():
  return _DataModel.ArclinkStatusLine_TypeInfo()
ArclinkStatusLine_TypeInfo = _DataModel.ArclinkStatusLine_TypeInfo

def ArclinkStatusLine_Cast(*args):
  return _DataModel.ArclinkStatusLine_Cast(*args)
ArclinkStatusLine_Cast = _DataModel.ArclinkStatusLine_Cast

def ArclinkStatusLine_ConstCast(*args):
  return _DataModel.ArclinkStatusLine_ConstCast(*args)
ArclinkStatusLine_ConstCast = _DataModel.ArclinkStatusLine_ConstCast

class ArclinkRequestLineIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestLineIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestLineIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkRequestLineIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ArclinkRequestLineIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkRequestLineIndex___ne__(self, *args)
    __swig_setmethods__["start"] = _DataModel.ArclinkRequestLineIndex_start_set
    __swig_getmethods__["start"] = _DataModel.ArclinkRequestLineIndex_start_get
    if _newclass:start = _swig_property(_DataModel.ArclinkRequestLineIndex_start_get, _DataModel.ArclinkRequestLineIndex_start_set)
    __swig_setmethods__["end"] = _DataModel.ArclinkRequestLineIndex_end_set
    __swig_getmethods__["end"] = _DataModel.ArclinkRequestLineIndex_end_get
    if _newclass:end = _swig_property(_DataModel.ArclinkRequestLineIndex_end_get, _DataModel.ArclinkRequestLineIndex_end_set)
    __swig_setmethods__["streamID"] = _DataModel.ArclinkRequestLineIndex_streamID_set
    __swig_getmethods__["streamID"] = _DataModel.ArclinkRequestLineIndex_streamID_get
    if _newclass:streamID = _swig_property(_DataModel.ArclinkRequestLineIndex_streamID_get, _DataModel.ArclinkRequestLineIndex_streamID_set)
    __swig_destroy__ = _DataModel.delete_ArclinkRequestLineIndex
    __del__ = lambda self : None;
ArclinkRequestLineIndex_swigregister = _DataModel.ArclinkRequestLineIndex_swigregister
ArclinkRequestLineIndex_swigregister(ArclinkRequestLineIndex)

class ArclinkRequestLine(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestLine, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestLine, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkRequestLine_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkRequestLine_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkRequestLine_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkRequestLine_TypeInfo)
    def className(self): return _DataModel.ArclinkRequestLine_className(self)
    def typeInfo(self): return _DataModel.ArclinkRequestLine_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkRequestLine_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkRequestLine_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkRequestLine_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkRequestLine_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkRequestLine_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkRequestLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequestLine
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ArclinkRequestLine___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkRequestLine___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkRequestLine_equal(self, *args)
    def setStart(self, *args): return _DataModel.ArclinkRequestLine_setStart(self, *args)
    def start(self): return _DataModel.ArclinkRequestLine_start(self)
    def setEnd(self, *args): return _DataModel.ArclinkRequestLine_setEnd(self, *args)
    def end(self): return _DataModel.ArclinkRequestLine_end(self)
    def setStreamID(self, *args): return _DataModel.ArclinkRequestLine_setStreamID(self, *args)
    def streamID(self, *args): return _DataModel.ArclinkRequestLine_streamID(self, *args)
    def setRestricted(self, *args): return _DataModel.ArclinkRequestLine_setRestricted(self, *args)
    def restricted(self): return _DataModel.ArclinkRequestLine_restricted(self)
    def setShared(self, *args): return _DataModel.ArclinkRequestLine_setShared(self, *args)
    def shared(self): return _DataModel.ArclinkRequestLine_shared(self)
    def setNetClass(self, *args): return _DataModel.ArclinkRequestLine_setNetClass(self, *args)
    def netClass(self): return _DataModel.ArclinkRequestLine_netClass(self)
    def setConstraints(self, *args): return _DataModel.ArclinkRequestLine_setConstraints(self, *args)
    def constraints(self): return _DataModel.ArclinkRequestLine_constraints(self)
    def setStatus(self, *args): return _DataModel.ArclinkRequestLine_setStatus(self, *args)
    def status(self, *args): return _DataModel.ArclinkRequestLine_status(self, *args)
    def index(self): return _DataModel.ArclinkRequestLine_index(self)
    def equalIndex(self, *args): return _DataModel.ArclinkRequestLine_equalIndex(self, *args)
    def arclinkRequest(self): return _DataModel.ArclinkRequestLine_arclinkRequest(self)
    def assign(self, *args): return _DataModel.ArclinkRequestLine_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ArclinkRequestLine_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ArclinkRequestLine_detachFrom(self, *args)
    def detach(self): return _DataModel.ArclinkRequestLine_detach(self)
    def clone(self): return _DataModel.ArclinkRequestLine_clone(self)
    def accept(self, *args): return _DataModel.ArclinkRequestLine_accept(self, *args)
ArclinkRequestLine_swigregister = _DataModel.ArclinkRequestLine_swigregister
ArclinkRequestLine_swigregister(ArclinkRequestLine)

def ArclinkRequestLine_ClassName():
  return _DataModel.ArclinkRequestLine_ClassName()
ArclinkRequestLine_ClassName = _DataModel.ArclinkRequestLine_ClassName

def ArclinkRequestLine_TypeInfo():
  return _DataModel.ArclinkRequestLine_TypeInfo()
ArclinkRequestLine_TypeInfo = _DataModel.ArclinkRequestLine_TypeInfo

def ArclinkRequestLine_Cast(*args):
  return _DataModel.ArclinkRequestLine_Cast(*args)
ArclinkRequestLine_Cast = _DataModel.ArclinkRequestLine_Cast

def ArclinkRequestLine_ConstCast(*args):
  return _DataModel.ArclinkRequestLine_ConstCast(*args)
ArclinkRequestLine_ConstCast = _DataModel.ArclinkRequestLine_ConstCast

class ArclinkRequestIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkRequestIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ArclinkRequestIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkRequestIndex___ne__(self, *args)
    __swig_setmethods__["created"] = _DataModel.ArclinkRequestIndex_created_set
    __swig_getmethods__["created"] = _DataModel.ArclinkRequestIndex_created_get
    if _newclass:created = _swig_property(_DataModel.ArclinkRequestIndex_created_get, _DataModel.ArclinkRequestIndex_created_set)
    __swig_setmethods__["requestID"] = _DataModel.ArclinkRequestIndex_requestID_set
    __swig_getmethods__["requestID"] = _DataModel.ArclinkRequestIndex_requestID_get
    if _newclass:requestID = _swig_property(_DataModel.ArclinkRequestIndex_requestID_get, _DataModel.ArclinkRequestIndex_requestID_set)
    __swig_setmethods__["userID"] = _DataModel.ArclinkRequestIndex_userID_set
    __swig_getmethods__["userID"] = _DataModel.ArclinkRequestIndex_userID_get
    if _newclass:userID = _swig_property(_DataModel.ArclinkRequestIndex_userID_get, _DataModel.ArclinkRequestIndex_userID_set)
    __swig_destroy__ = _DataModel.delete_ArclinkRequestIndex
    __del__ = lambda self : None;
ArclinkRequestIndex_swigregister = _DataModel.ArclinkRequestIndex_swigregister
ArclinkRequestIndex_swigregister(ArclinkRequestIndex)

class ArclinkRequest(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequest, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkRequest_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkRequest_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkRequest_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkRequest_TypeInfo)
    def className(self): return _DataModel.ArclinkRequest_className(self)
    def typeInfo(self): return _DataModel.ArclinkRequest_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkRequest_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkRequest_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkRequest_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkRequest_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkRequest_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequest
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ArclinkRequest_Create
    if _newclass:Create = staticmethod(_DataModel.ArclinkRequest_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ArclinkRequest_Find
    if _newclass:Find = staticmethod(_DataModel.ArclinkRequest_Find)
    def __eq__(self, *args): return _DataModel.ArclinkRequest___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkRequest___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkRequest_equal(self, *args)
    def setRequestID(self, *args): return _DataModel.ArclinkRequest_setRequestID(self, *args)
    def requestID(self): return _DataModel.ArclinkRequest_requestID(self)
    def setUserID(self, *args): return _DataModel.ArclinkRequest_setUserID(self, *args)
    def userID(self): return _DataModel.ArclinkRequest_userID(self)
    def setUserIP(self, *args): return _DataModel.ArclinkRequest_setUserIP(self, *args)
    def userIP(self): return _DataModel.ArclinkRequest_userIP(self)
    def setClientID(self, *args): return _DataModel.ArclinkRequest_setClientID(self, *args)
    def clientID(self): return _DataModel.ArclinkRequest_clientID(self)
    def setClientIP(self, *args): return _DataModel.ArclinkRequest_setClientIP(self, *args)
    def clientIP(self): return _DataModel.ArclinkRequest_clientIP(self)
    def setType(self, *args): return _DataModel.ArclinkRequest_setType(self, *args)
    def type(self): return _DataModel.ArclinkRequest_type(self)
    def setCreated(self, *args): return _DataModel.ArclinkRequest_setCreated(self, *args)
    def created(self): return _DataModel.ArclinkRequest_created(self)
    def setStatus(self, *args): return _DataModel.ArclinkRequest_setStatus(self, *args)
    def status(self): return _DataModel.ArclinkRequest_status(self)
    def setMessage(self, *args): return _DataModel.ArclinkRequest_setMessage(self, *args)
    def message(self): return _DataModel.ArclinkRequest_message(self)
    def setLabel(self, *args): return _DataModel.ArclinkRequest_setLabel(self, *args)
    def label(self): return _DataModel.ArclinkRequest_label(self)
    def setHeader(self, *args): return _DataModel.ArclinkRequest_setHeader(self, *args)
    def header(self): return _DataModel.ArclinkRequest_header(self)
    def setSummary(self, *args): return _DataModel.ArclinkRequest_setSummary(self, *args)
    def summary(self, *args): return _DataModel.ArclinkRequest_summary(self, *args)
    def index(self): return _DataModel.ArclinkRequest_index(self)
    def equalIndex(self, *args): return _DataModel.ArclinkRequest_equalIndex(self, *args)
    def add(self, *args): return _DataModel.ArclinkRequest_add(self, *args)
    def remove(self, *args): return _DataModel.ArclinkRequest_remove(self, *args)
    def removeArclinkStatusLine(self, *args): return _DataModel.ArclinkRequest_removeArclinkStatusLine(self, *args)
    def removeArclinkRequestLine(self, *args): return _DataModel.ArclinkRequest_removeArclinkRequestLine(self, *args)
    def arclinkStatusLineCount(self): return _DataModel.ArclinkRequest_arclinkStatusLineCount(self)
    def arclinkRequestLineCount(self): return _DataModel.ArclinkRequest_arclinkRequestLineCount(self)
    def arclinkStatusLine(self, *args): return _DataModel.ArclinkRequest_arclinkStatusLine(self, *args)
    def arclinkRequestLine(self, *args): return _DataModel.ArclinkRequest_arclinkRequestLine(self, *args)
    def arclinkLog(self): return _DataModel.ArclinkRequest_arclinkLog(self)
    def assign(self, *args): return _DataModel.ArclinkRequest_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ArclinkRequest_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ArclinkRequest_detachFrom(self, *args)
    def detach(self): return _DataModel.ArclinkRequest_detach(self)
    def clone(self): return _DataModel.ArclinkRequest_clone(self)
    def updateChild(self, *args): return _DataModel.ArclinkRequest_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ArclinkRequest_accept(self, *args)
ArclinkRequest_swigregister = _DataModel.ArclinkRequest_swigregister
ArclinkRequest_swigregister(ArclinkRequest)

def ArclinkRequest_ClassName():
  return _DataModel.ArclinkRequest_ClassName()
ArclinkRequest_ClassName = _DataModel.ArclinkRequest_ClassName

def ArclinkRequest_TypeInfo():
  return _DataModel.ArclinkRequest_TypeInfo()
ArclinkRequest_TypeInfo = _DataModel.ArclinkRequest_TypeInfo

def ArclinkRequest_Cast(*args):
  return _DataModel.ArclinkRequest_Cast(*args)
ArclinkRequest_Cast = _DataModel.ArclinkRequest_Cast

def ArclinkRequest_ConstCast(*args):
  return _DataModel.ArclinkRequest_ConstCast(*args)
ArclinkRequest_ConstCast = _DataModel.ArclinkRequest_ConstCast

def ArclinkRequest_Create(*args):
  return _DataModel.ArclinkRequest_Create(*args)
ArclinkRequest_Create = _DataModel.ArclinkRequest_Create

def ArclinkRequest_Find(*args):
  return _DataModel.ArclinkRequest_Find(*args)
ArclinkRequest_Find = _DataModel.ArclinkRequest_Find

class ArclinkLog(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkLog, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ArclinkLog_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ArclinkLog_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ArclinkLog_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ArclinkLog_TypeInfo)
    def className(self): return _DataModel.ArclinkLog_className(self)
    def typeInfo(self): return _DataModel.ArclinkLog_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ArclinkLog_Cast
    if _newclass:Cast = staticmethod(_DataModel.ArclinkLog_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ArclinkLog_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ArclinkLog_ConstCast)
    def serialize(self, *args): return _DataModel.ArclinkLog_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ArclinkLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkLog
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.ArclinkLog___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArclinkLog___ne__(self, *args)
    def equal(self, *args): return _DataModel.ArclinkLog_equal(self, *args)
    def add(self, *args): return _DataModel.ArclinkLog_add(self, *args)
    def remove(self, *args): return _DataModel.ArclinkLog_remove(self, *args)
    def removeArclinkRequest(self, *args): return _DataModel.ArclinkLog_removeArclinkRequest(self, *args)
    def removeArclinkUser(self, *args): return _DataModel.ArclinkLog_removeArclinkUser(self, *args)
    def arclinkRequestCount(self): return _DataModel.ArclinkLog_arclinkRequestCount(self)
    def arclinkUserCount(self): return _DataModel.ArclinkLog_arclinkUserCount(self)
    def arclinkRequest(self, *args): return _DataModel.ArclinkLog_arclinkRequest(self, *args)
    def arclinkUser(self, *args): return _DataModel.ArclinkLog_arclinkUser(self, *args)
    def findArclinkRequest(self, *args): return _DataModel.ArclinkLog_findArclinkRequest(self, *args)
    def findArclinkUser(self, *args): return _DataModel.ArclinkLog_findArclinkUser(self, *args)
    def assign(self, *args): return _DataModel.ArclinkLog_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ArclinkLog_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ArclinkLog_detachFrom(self, *args)
    def detach(self): return _DataModel.ArclinkLog_detach(self)
    def clone(self): return _DataModel.ArclinkLog_clone(self)
    def updateChild(self, *args): return _DataModel.ArclinkLog_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ArclinkLog_accept(self, *args)
ArclinkLog_swigregister = _DataModel.ArclinkLog_swigregister
ArclinkLog_swigregister(ArclinkLog)

def ArclinkLog_ClassName():
  return _DataModel.ArclinkLog_ClassName()
ArclinkLog_ClassName = _DataModel.ArclinkLog_ClassName

def ArclinkLog_TypeInfo():
  return _DataModel.ArclinkLog_TypeInfo()
ArclinkLog_TypeInfo = _DataModel.ArclinkLog_TypeInfo

def ArclinkLog_Cast(*args):
  return _DataModel.ArclinkLog_Cast(*args)
ArclinkLog_Cast = _DataModel.ArclinkLog_Cast

def ArclinkLog_ConstCast(*args):
  return _DataModel.ArclinkLog_ConstCast(*args)
ArclinkLog_ConstCast = _DataModel.ArclinkLog_ConstCast

class QCLogIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCLogIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCLogIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_QCLogIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.QCLogIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.QCLogIndex___ne__(self, *args)
    __swig_setmethods__["start"] = _DataModel.QCLogIndex_start_set
    __swig_getmethods__["start"] = _DataModel.QCLogIndex_start_get
    if _newclass:start = _swig_property(_DataModel.QCLogIndex_start_get, _DataModel.QCLogIndex_start_set)
    __swig_setmethods__["waveformID"] = _DataModel.QCLogIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.QCLogIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.QCLogIndex_waveformID_get, _DataModel.QCLogIndex_waveformID_set)
    __swig_destroy__ = _DataModel.delete_QCLogIndex
    __del__ = lambda self : None;
QCLogIndex_swigregister = _DataModel.QCLogIndex_swigregister
QCLogIndex_swigregister(QCLogIndex)

class QCLog(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCLog, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QCLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.QCLog_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.QCLog_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.QCLog_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.QCLog_TypeInfo)
    def className(self): return _DataModel.QCLog_className(self)
    def typeInfo(self): return _DataModel.QCLog_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.QCLog_Cast
    if _newclass:Cast = staticmethod(_DataModel.QCLog_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.QCLog_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.QCLog_ConstCast)
    def serialize(self, *args): return _DataModel.QCLog_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_QCLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_QCLog
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.QCLog_Create
    if _newclass:Create = staticmethod(_DataModel.QCLog_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.QCLog_Find
    if _newclass:Find = staticmethod(_DataModel.QCLog_Find)
    def __eq__(self, *args): return _DataModel.QCLog___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.QCLog___ne__(self, *args)
    def equal(self, *args): return _DataModel.QCLog_equal(self, *args)
    def setWaveformID(self, *args): return _DataModel.QCLog_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.QCLog_waveformID(self, *args)
    def setCreatorID(self, *args): return _DataModel.QCLog_setCreatorID(self, *args)
    def creatorID(self): return _DataModel.QCLog_creatorID(self)
    def setCreated(self, *args): return _DataModel.QCLog_setCreated(self, *args)
    def created(self): return _DataModel.QCLog_created(self)
    def setStart(self, *args): return _DataModel.QCLog_setStart(self, *args)
    def start(self): return _DataModel.QCLog_start(self)
    def setEnd(self, *args): return _DataModel.QCLog_setEnd(self, *args)
    def end(self): return _DataModel.QCLog_end(self)
    def setMessage(self, *args): return _DataModel.QCLog_setMessage(self, *args)
    def message(self): return _DataModel.QCLog_message(self)
    def index(self): return _DataModel.QCLog_index(self)
    def equalIndex(self, *args): return _DataModel.QCLog_equalIndex(self, *args)
    def qualityControl(self): return _DataModel.QCLog_qualityControl(self)
    def assign(self, *args): return _DataModel.QCLog_assign(self, *args)
    def attachTo(self, *args): return _DataModel.QCLog_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.QCLog_detachFrom(self, *args)
    def detach(self): return _DataModel.QCLog_detach(self)
    def clone(self): return _DataModel.QCLog_clone(self)
    def updateChild(self, *args): return _DataModel.QCLog_updateChild(self, *args)
    def accept(self, *args): return _DataModel.QCLog_accept(self, *args)
QCLog_swigregister = _DataModel.QCLog_swigregister
QCLog_swigregister(QCLog)

def QCLog_ClassName():
  return _DataModel.QCLog_ClassName()
QCLog_ClassName = _DataModel.QCLog_ClassName

def QCLog_TypeInfo():
  return _DataModel.QCLog_TypeInfo()
QCLog_TypeInfo = _DataModel.QCLog_TypeInfo

def QCLog_Cast(*args):
  return _DataModel.QCLog_Cast(*args)
QCLog_Cast = _DataModel.QCLog_Cast

def QCLog_ConstCast(*args):
  return _DataModel.QCLog_ConstCast(*args)
QCLog_ConstCast = _DataModel.QCLog_ConstCast

def QCLog_Create(*args):
  return _DataModel.QCLog_Create(*args)
QCLog_Create = _DataModel.QCLog_Create

def QCLog_Find(*args):
  return _DataModel.QCLog_Find(*args)
QCLog_Find = _DataModel.QCLog_Find

class WaveformQualityIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformQualityIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformQualityIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_WaveformQualityIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.WaveformQualityIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.WaveformQualityIndex___ne__(self, *args)
    __swig_setmethods__["start"] = _DataModel.WaveformQualityIndex_start_set
    __swig_getmethods__["start"] = _DataModel.WaveformQualityIndex_start_get
    if _newclass:start = _swig_property(_DataModel.WaveformQualityIndex_start_get, _DataModel.WaveformQualityIndex_start_set)
    __swig_setmethods__["waveformID"] = _DataModel.WaveformQualityIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.WaveformQualityIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.WaveformQualityIndex_waveformID_get, _DataModel.WaveformQualityIndex_waveformID_set)
    __swig_setmethods__["type"] = _DataModel.WaveformQualityIndex_type_set
    __swig_getmethods__["type"] = _DataModel.WaveformQualityIndex_type_get
    if _newclass:type = _swig_property(_DataModel.WaveformQualityIndex_type_get, _DataModel.WaveformQualityIndex_type_set)
    __swig_setmethods__["parameter"] = _DataModel.WaveformQualityIndex_parameter_set
    __swig_getmethods__["parameter"] = _DataModel.WaveformQualityIndex_parameter_get
    if _newclass:parameter = _swig_property(_DataModel.WaveformQualityIndex_parameter_get, _DataModel.WaveformQualityIndex_parameter_set)
    __swig_destroy__ = _DataModel.delete_WaveformQualityIndex
    __del__ = lambda self : None;
WaveformQualityIndex_swigregister = _DataModel.WaveformQualityIndex_swigregister
WaveformQualityIndex_swigregister(WaveformQualityIndex)

class WaveformQuality(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformQuality, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformQuality, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.WaveformQuality_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.WaveformQuality_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.WaveformQuality_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.WaveformQuality_TypeInfo)
    def className(self): return _DataModel.WaveformQuality_className(self)
    def typeInfo(self): return _DataModel.WaveformQuality_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.WaveformQuality_Cast
    if _newclass:Cast = staticmethod(_DataModel.WaveformQuality_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.WaveformQuality_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.WaveformQuality_ConstCast)
    def serialize(self, *args): return _DataModel.WaveformQuality_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_WaveformQuality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_WaveformQuality
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.WaveformQuality___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.WaveformQuality___ne__(self, *args)
    def equal(self, *args): return _DataModel.WaveformQuality_equal(self, *args)
    def setWaveformID(self, *args): return _DataModel.WaveformQuality_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.WaveformQuality_waveformID(self, *args)
    def setCreatorID(self, *args): return _DataModel.WaveformQuality_setCreatorID(self, *args)
    def creatorID(self): return _DataModel.WaveformQuality_creatorID(self)
    def setCreated(self, *args): return _DataModel.WaveformQuality_setCreated(self, *args)
    def created(self): return _DataModel.WaveformQuality_created(self)
    def setStart(self, *args): return _DataModel.WaveformQuality_setStart(self, *args)
    def start(self): return _DataModel.WaveformQuality_start(self)
    def setEnd(self, *args): return _DataModel.WaveformQuality_setEnd(self, *args)
    def end(self): return _DataModel.WaveformQuality_end(self)
    def setType(self, *args): return _DataModel.WaveformQuality_setType(self, *args)
    def type(self): return _DataModel.WaveformQuality_type(self)
    def setParameter(self, *args): return _DataModel.WaveformQuality_setParameter(self, *args)
    def parameter(self): return _DataModel.WaveformQuality_parameter(self)
    def setValue(self, *args): return _DataModel.WaveformQuality_setValue(self, *args)
    def value(self): return _DataModel.WaveformQuality_value(self)
    def setLowerUncertainty(self, *args): return _DataModel.WaveformQuality_setLowerUncertainty(self, *args)
    def lowerUncertainty(self): return _DataModel.WaveformQuality_lowerUncertainty(self)
    def setUpperUncertainty(self, *args): return _DataModel.WaveformQuality_setUpperUncertainty(self, *args)
    def upperUncertainty(self): return _DataModel.WaveformQuality_upperUncertainty(self)
    def setWindowLength(self, *args): return _DataModel.WaveformQuality_setWindowLength(self, *args)
    def windowLength(self): return _DataModel.WaveformQuality_windowLength(self)
    def index(self): return _DataModel.WaveformQuality_index(self)
    def equalIndex(self, *args): return _DataModel.WaveformQuality_equalIndex(self, *args)
    def qualityControl(self): return _DataModel.WaveformQuality_qualityControl(self)
    def assign(self, *args): return _DataModel.WaveformQuality_assign(self, *args)
    def attachTo(self, *args): return _DataModel.WaveformQuality_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.WaveformQuality_detachFrom(self, *args)
    def detach(self): return _DataModel.WaveformQuality_detach(self)
    def clone(self): return _DataModel.WaveformQuality_clone(self)
    def accept(self, *args): return _DataModel.WaveformQuality_accept(self, *args)
WaveformQuality_swigregister = _DataModel.WaveformQuality_swigregister
WaveformQuality_swigregister(WaveformQuality)

def WaveformQuality_ClassName():
  return _DataModel.WaveformQuality_ClassName()
WaveformQuality_ClassName = _DataModel.WaveformQuality_ClassName

def WaveformQuality_TypeInfo():
  return _DataModel.WaveformQuality_TypeInfo()
WaveformQuality_TypeInfo = _DataModel.WaveformQuality_TypeInfo

def WaveformQuality_Cast(*args):
  return _DataModel.WaveformQuality_Cast(*args)
WaveformQuality_Cast = _DataModel.WaveformQuality_Cast

def WaveformQuality_ConstCast(*args):
  return _DataModel.WaveformQuality_ConstCast(*args)
WaveformQuality_ConstCast = _DataModel.WaveformQuality_ConstCast

class OutageIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutageIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutageIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_OutageIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.OutageIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.OutageIndex___ne__(self, *args)
    __swig_setmethods__["waveformID"] = _DataModel.OutageIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.OutageIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.OutageIndex_waveformID_get, _DataModel.OutageIndex_waveformID_set)
    __swig_setmethods__["start"] = _DataModel.OutageIndex_start_set
    __swig_getmethods__["start"] = _DataModel.OutageIndex_start_get
    if _newclass:start = _swig_property(_DataModel.OutageIndex_start_get, _DataModel.OutageIndex_start_set)
    __swig_destroy__ = _DataModel.delete_OutageIndex
    __del__ = lambda self : None;
OutageIndex_swigregister = _DataModel.OutageIndex_swigregister
OutageIndex_swigregister(OutageIndex)

class Outage(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Outage, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Outage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Outage_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Outage_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Outage_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Outage_TypeInfo)
    def className(self): return _DataModel.Outage_className(self)
    def typeInfo(self): return _DataModel.Outage_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Outage_Cast
    if _newclass:Cast = staticmethod(_DataModel.Outage_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Outage_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Outage_ConstCast)
    def serialize(self, *args): return _DataModel.Outage_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Outage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Outage
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Outage___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Outage___ne__(self, *args)
    def equal(self, *args): return _DataModel.Outage_equal(self, *args)
    def setWaveformID(self, *args): return _DataModel.Outage_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.Outage_waveformID(self, *args)
    def setCreatorID(self, *args): return _DataModel.Outage_setCreatorID(self, *args)
    def creatorID(self): return _DataModel.Outage_creatorID(self)
    def setCreated(self, *args): return _DataModel.Outage_setCreated(self, *args)
    def created(self): return _DataModel.Outage_created(self)
    def setStart(self, *args): return _DataModel.Outage_setStart(self, *args)
    def start(self): return _DataModel.Outage_start(self)
    def setEnd(self, *args): return _DataModel.Outage_setEnd(self, *args)
    def end(self): return _DataModel.Outage_end(self)
    def index(self): return _DataModel.Outage_index(self)
    def equalIndex(self, *args): return _DataModel.Outage_equalIndex(self, *args)
    def qualityControl(self): return _DataModel.Outage_qualityControl(self)
    def assign(self, *args): return _DataModel.Outage_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Outage_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Outage_detachFrom(self, *args)
    def detach(self): return _DataModel.Outage_detach(self)
    def clone(self): return _DataModel.Outage_clone(self)
    def accept(self, *args): return _DataModel.Outage_accept(self, *args)
Outage_swigregister = _DataModel.Outage_swigregister
Outage_swigregister(Outage)

def Outage_ClassName():
  return _DataModel.Outage_ClassName()
Outage_ClassName = _DataModel.Outage_ClassName

def Outage_TypeInfo():
  return _DataModel.Outage_TypeInfo()
Outage_TypeInfo = _DataModel.Outage_TypeInfo

def Outage_Cast(*args):
  return _DataModel.Outage_Cast(*args)
Outage_Cast = _DataModel.Outage_Cast

def Outage_ConstCast(*args):
  return _DataModel.Outage_ConstCast(*args)
Outage_ConstCast = _DataModel.Outage_ConstCast

class QualityControl(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualityControl, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualityControl, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.QualityControl_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.QualityControl_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.QualityControl_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.QualityControl_TypeInfo)
    def className(self): return _DataModel.QualityControl_className(self)
    def typeInfo(self): return _DataModel.QualityControl_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.QualityControl_Cast
    if _newclass:Cast = staticmethod(_DataModel.QualityControl_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.QualityControl_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.QualityControl_ConstCast)
    def serialize(self, *args): return _DataModel.QualityControl_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_QualityControl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_QualityControl
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.QualityControl___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.QualityControl___ne__(self, *args)
    def equal(self, *args): return _DataModel.QualityControl_equal(self, *args)
    def add(self, *args): return _DataModel.QualityControl_add(self, *args)
    def remove(self, *args): return _DataModel.QualityControl_remove(self, *args)
    def removeQCLog(self, *args): return _DataModel.QualityControl_removeQCLog(self, *args)
    def removeWaveformQuality(self, *args): return _DataModel.QualityControl_removeWaveformQuality(self, *args)
    def removeOutage(self, *args): return _DataModel.QualityControl_removeOutage(self, *args)
    def qCLogCount(self): return _DataModel.QualityControl_qCLogCount(self)
    def waveformQualityCount(self): return _DataModel.QualityControl_waveformQualityCount(self)
    def outageCount(self): return _DataModel.QualityControl_outageCount(self)
    def qCLog(self, *args): return _DataModel.QualityControl_qCLog(self, *args)
    def waveformQuality(self, *args): return _DataModel.QualityControl_waveformQuality(self, *args)
    def outage(self, *args): return _DataModel.QualityControl_outage(self, *args)
    def findQCLog(self, *args): return _DataModel.QualityControl_findQCLog(self, *args)
    def assign(self, *args): return _DataModel.QualityControl_assign(self, *args)
    def attachTo(self, *args): return _DataModel.QualityControl_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.QualityControl_detachFrom(self, *args)
    def detach(self): return _DataModel.QualityControl_detach(self)
    def clone(self): return _DataModel.QualityControl_clone(self)
    def updateChild(self, *args): return _DataModel.QualityControl_updateChild(self, *args)
    def accept(self, *args): return _DataModel.QualityControl_accept(self, *args)
QualityControl_swigregister = _DataModel.QualityControl_swigregister
QualityControl_swigregister(QualityControl)

def QualityControl_ClassName():
  return _DataModel.QualityControl_ClassName()
QualityControl_ClassName = _DataModel.QualityControl_ClassName

def QualityControl_TypeInfo():
  return _DataModel.QualityControl_TypeInfo()
QualityControl_TypeInfo = _DataModel.QualityControl_TypeInfo

def QualityControl_Cast(*args):
  return _DataModel.QualityControl_Cast(*args)
QualityControl_Cast = _DataModel.QualityControl_Cast

def QualityControl_ConstCast(*args):
  return _DataModel.QualityControl_ConstCast(*args)
QualityControl_ConstCast = _DataModel.QualityControl_ConstCast

class StationReferenceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_StationReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.StationReferenceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationReferenceIndex___ne__(self, *args)
    __swig_setmethods__["stationID"] = _DataModel.StationReferenceIndex_stationID_set
    __swig_getmethods__["stationID"] = _DataModel.StationReferenceIndex_stationID_get
    if _newclass:stationID = _swig_property(_DataModel.StationReferenceIndex_stationID_get, _DataModel.StationReferenceIndex_stationID_set)
    __swig_destroy__ = _DataModel.delete_StationReferenceIndex
    __del__ = lambda self : None;
StationReferenceIndex_swigregister = _DataModel.StationReferenceIndex_swigregister
StationReferenceIndex_swigregister(StationReferenceIndex)

class StationReference(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationReference, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.StationReference_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.StationReference_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.StationReference_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.StationReference_TypeInfo)
    def className(self): return _DataModel.StationReference_className(self)
    def typeInfo(self): return _DataModel.StationReference_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.StationReference_Cast
    if _newclass:Cast = staticmethod(_DataModel.StationReference_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.StationReference_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.StationReference_ConstCast)
    def serialize(self, *args): return _DataModel.StationReference_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_StationReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationReference
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.StationReference___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationReference___ne__(self, *args)
    def equal(self, *args): return _DataModel.StationReference_equal(self, *args)
    def setStationID(self, *args): return _DataModel.StationReference_setStationID(self, *args)
    def stationID(self): return _DataModel.StationReference_stationID(self)
    def index(self): return _DataModel.StationReference_index(self)
    def equalIndex(self, *args): return _DataModel.StationReference_equalIndex(self, *args)
    def stationGroup(self): return _DataModel.StationReference_stationGroup(self)
    def assign(self, *args): return _DataModel.StationReference_assign(self, *args)
    def attachTo(self, *args): return _DataModel.StationReference_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.StationReference_detachFrom(self, *args)
    def detach(self): return _DataModel.StationReference_detach(self)
    def clone(self): return _DataModel.StationReference_clone(self)
    def accept(self, *args): return _DataModel.StationReference_accept(self, *args)
StationReference_swigregister = _DataModel.StationReference_swigregister
StationReference_swigregister(StationReference)

def StationReference_ClassName():
  return _DataModel.StationReference_ClassName()
StationReference_ClassName = _DataModel.StationReference_ClassName

def StationReference_TypeInfo():
  return _DataModel.StationReference_TypeInfo()
StationReference_TypeInfo = _DataModel.StationReference_TypeInfo

def StationReference_Cast(*args):
  return _DataModel.StationReference_Cast(*args)
StationReference_Cast = _DataModel.StationReference_Cast

def StationReference_ConstCast(*args):
  return _DataModel.StationReference_ConstCast(*args)
StationReference_ConstCast = _DataModel.StationReference_ConstCast

class StationGroupIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationGroupIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationGroupIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_StationGroupIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.StationGroupIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationGroupIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.StationGroupIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StationGroupIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StationGroupIndex_code_get, _DataModel.StationGroupIndex_code_set)
    __swig_destroy__ = _DataModel.delete_StationGroupIndex
    __del__ = lambda self : None;
StationGroupIndex_swigregister = _DataModel.StationGroupIndex_swigregister
StationGroupIndex_swigregister(StationGroupIndex)

class StationGroup(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationGroup, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.StationGroup_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.StationGroup_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.StationGroup_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.StationGroup_TypeInfo)
    def className(self): return _DataModel.StationGroup_className(self)
    def typeInfo(self): return _DataModel.StationGroup_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.StationGroup_Cast
    if _newclass:Cast = staticmethod(_DataModel.StationGroup_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.StationGroup_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.StationGroup_ConstCast)
    def serialize(self, *args): return _DataModel.StationGroup_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_StationGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationGroup
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.StationGroup_Create
    if _newclass:Create = staticmethod(_DataModel.StationGroup_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.StationGroup_Find
    if _newclass:Find = staticmethod(_DataModel.StationGroup_Find)
    def __eq__(self, *args): return _DataModel.StationGroup___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationGroup___ne__(self, *args)
    def equal(self, *args): return _DataModel.StationGroup_equal(self, *args)
    def setType(self, *args): return _DataModel.StationGroup_setType(self, *args)
    def type(self): return _DataModel.StationGroup_type(self)
    def setCode(self, *args): return _DataModel.StationGroup_setCode(self, *args)
    def code(self): return _DataModel.StationGroup_code(self)
    def setStart(self, *args): return _DataModel.StationGroup_setStart(self, *args)
    def start(self): return _DataModel.StationGroup_start(self)
    def setEnd(self, *args): return _DataModel.StationGroup_setEnd(self, *args)
    def end(self): return _DataModel.StationGroup_end(self)
    def setDescription(self, *args): return _DataModel.StationGroup_setDescription(self, *args)
    def description(self): return _DataModel.StationGroup_description(self)
    def setLatitude(self, *args): return _DataModel.StationGroup_setLatitude(self, *args)
    def latitude(self): return _DataModel.StationGroup_latitude(self)
    def setLongitude(self, *args): return _DataModel.StationGroup_setLongitude(self, *args)
    def longitude(self): return _DataModel.StationGroup_longitude(self)
    def setElevation(self, *args): return _DataModel.StationGroup_setElevation(self, *args)
    def elevation(self): return _DataModel.StationGroup_elevation(self)
    def index(self): return _DataModel.StationGroup_index(self)
    def equalIndex(self, *args): return _DataModel.StationGroup_equalIndex(self, *args)
    def add(self, *args): return _DataModel.StationGroup_add(self, *args)
    def remove(self, *args): return _DataModel.StationGroup_remove(self, *args)
    def removeStationReference(self, *args): return _DataModel.StationGroup_removeStationReference(self, *args)
    def stationReferenceCount(self): return _DataModel.StationGroup_stationReferenceCount(self)
    def stationReference(self, *args): return _DataModel.StationGroup_stationReference(self, *args)
    def inventory(self): return _DataModel.StationGroup_inventory(self)
    def assign(self, *args): return _DataModel.StationGroup_assign(self, *args)
    def attachTo(self, *args): return _DataModel.StationGroup_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.StationGroup_detachFrom(self, *args)
    def detach(self): return _DataModel.StationGroup_detach(self)
    def clone(self): return _DataModel.StationGroup_clone(self)
    def updateChild(self, *args): return _DataModel.StationGroup_updateChild(self, *args)
    def accept(self, *args): return _DataModel.StationGroup_accept(self, *args)
StationGroup_swigregister = _DataModel.StationGroup_swigregister
StationGroup_swigregister(StationGroup)

def StationGroup_ClassName():
  return _DataModel.StationGroup_ClassName()
StationGroup_ClassName = _DataModel.StationGroup_ClassName

def StationGroup_TypeInfo():
  return _DataModel.StationGroup_TypeInfo()
StationGroup_TypeInfo = _DataModel.StationGroup_TypeInfo

def StationGroup_Cast(*args):
  return _DataModel.StationGroup_Cast(*args)
StationGroup_Cast = _DataModel.StationGroup_Cast

def StationGroup_ConstCast(*args):
  return _DataModel.StationGroup_ConstCast(*args)
StationGroup_ConstCast = _DataModel.StationGroup_ConstCast

def StationGroup_Create(*args):
  return _DataModel.StationGroup_Create(*args)
StationGroup_Create = _DataModel.StationGroup_Create

def StationGroup_Find(*args):
  return _DataModel.StationGroup_Find(*args)
StationGroup_Find = _DataModel.StationGroup_Find

class AuxSourceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxSourceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxSourceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_AuxSourceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.AuxSourceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxSourceIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.AuxSourceIndex_name_set
    __swig_getmethods__["name"] = _DataModel.AuxSourceIndex_name_get
    if _newclass:name = _swig_property(_DataModel.AuxSourceIndex_name_get, _DataModel.AuxSourceIndex_name_set)
    __swig_destroy__ = _DataModel.delete_AuxSourceIndex
    __del__ = lambda self : None;
AuxSourceIndex_swigregister = _DataModel.AuxSourceIndex_swigregister
AuxSourceIndex_swigregister(AuxSourceIndex)

class AuxSource(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxSource, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.AuxSource_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.AuxSource_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.AuxSource_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.AuxSource_TypeInfo)
    def className(self): return _DataModel.AuxSource_className(self)
    def typeInfo(self): return _DataModel.AuxSource_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.AuxSource_Cast
    if _newclass:Cast = staticmethod(_DataModel.AuxSource_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.AuxSource_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.AuxSource_ConstCast)
    def serialize(self, *args): return _DataModel.AuxSource_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_AuxSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxSource
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.AuxSource___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxSource___ne__(self, *args)
    def equal(self, *args): return _DataModel.AuxSource_equal(self, *args)
    def setName(self, *args): return _DataModel.AuxSource_setName(self, *args)
    def name(self): return _DataModel.AuxSource_name(self)
    def setDescription(self, *args): return _DataModel.AuxSource_setDescription(self, *args)
    def description(self): return _DataModel.AuxSource_description(self)
    def setUnit(self, *args): return _DataModel.AuxSource_setUnit(self, *args)
    def unit(self): return _DataModel.AuxSource_unit(self)
    def setConversion(self, *args): return _DataModel.AuxSource_setConversion(self, *args)
    def conversion(self): return _DataModel.AuxSource_conversion(self)
    def setSampleRateNumerator(self, *args): return _DataModel.AuxSource_setSampleRateNumerator(self, *args)
    def sampleRateNumerator(self): return _DataModel.AuxSource_sampleRateNumerator(self)
    def setSampleRateDenominator(self, *args): return _DataModel.AuxSource_setSampleRateDenominator(self, *args)
    def sampleRateDenominator(self): return _DataModel.AuxSource_sampleRateDenominator(self)
    def setRemark(self, *args): return _DataModel.AuxSource_setRemark(self, *args)
    def remark(self, *args): return _DataModel.AuxSource_remark(self, *args)
    def index(self): return _DataModel.AuxSource_index(self)
    def equalIndex(self, *args): return _DataModel.AuxSource_equalIndex(self, *args)
    def auxDevice(self): return _DataModel.AuxSource_auxDevice(self)
    def assign(self, *args): return _DataModel.AuxSource_assign(self, *args)
    def attachTo(self, *args): return _DataModel.AuxSource_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.AuxSource_detachFrom(self, *args)
    def detach(self): return _DataModel.AuxSource_detach(self)
    def clone(self): return _DataModel.AuxSource_clone(self)
    def accept(self, *args): return _DataModel.AuxSource_accept(self, *args)
AuxSource_swigregister = _DataModel.AuxSource_swigregister
AuxSource_swigregister(AuxSource)

def AuxSource_ClassName():
  return _DataModel.AuxSource_ClassName()
AuxSource_ClassName = _DataModel.AuxSource_ClassName

def AuxSource_TypeInfo():
  return _DataModel.AuxSource_TypeInfo()
AuxSource_TypeInfo = _DataModel.AuxSource_TypeInfo

def AuxSource_Cast(*args):
  return _DataModel.AuxSource_Cast(*args)
AuxSource_Cast = _DataModel.AuxSource_Cast

def AuxSource_ConstCast(*args):
  return _DataModel.AuxSource_ConstCast(*args)
AuxSource_ConstCast = _DataModel.AuxSource_ConstCast

class AuxDeviceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxDeviceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxDeviceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_AuxDeviceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.AuxDeviceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxDeviceIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.AuxDeviceIndex_name_set
    __swig_getmethods__["name"] = _DataModel.AuxDeviceIndex_name_get
    if _newclass:name = _swig_property(_DataModel.AuxDeviceIndex_name_get, _DataModel.AuxDeviceIndex_name_set)
    __swig_destroy__ = _DataModel.delete_AuxDeviceIndex
    __del__ = lambda self : None;
AuxDeviceIndex_swigregister = _DataModel.AuxDeviceIndex_swigregister
AuxDeviceIndex_swigregister(AuxDeviceIndex)

class AuxDevice(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxDevice, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.AuxDevice_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.AuxDevice_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.AuxDevice_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.AuxDevice_TypeInfo)
    def className(self): return _DataModel.AuxDevice_className(self)
    def typeInfo(self): return _DataModel.AuxDevice_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.AuxDevice_Cast
    if _newclass:Cast = staticmethod(_DataModel.AuxDevice_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.AuxDevice_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.AuxDevice_ConstCast)
    def serialize(self, *args): return _DataModel.AuxDevice_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_AuxDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxDevice
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.AuxDevice_Create
    if _newclass:Create = staticmethod(_DataModel.AuxDevice_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.AuxDevice_Find
    if _newclass:Find = staticmethod(_DataModel.AuxDevice_Find)
    def __eq__(self, *args): return _DataModel.AuxDevice___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxDevice___ne__(self, *args)
    def equal(self, *args): return _DataModel.AuxDevice_equal(self, *args)
    def setName(self, *args): return _DataModel.AuxDevice_setName(self, *args)
    def name(self): return _DataModel.AuxDevice_name(self)
    def setDescription(self, *args): return _DataModel.AuxDevice_setDescription(self, *args)
    def description(self): return _DataModel.AuxDevice_description(self)
    def setModel(self, *args): return _DataModel.AuxDevice_setModel(self, *args)
    def model(self): return _DataModel.AuxDevice_model(self)
    def setManufacturer(self, *args): return _DataModel.AuxDevice_setManufacturer(self, *args)
    def manufacturer(self): return _DataModel.AuxDevice_manufacturer(self)
    def setRemark(self, *args): return _DataModel.AuxDevice_setRemark(self, *args)
    def remark(self, *args): return _DataModel.AuxDevice_remark(self, *args)
    def index(self): return _DataModel.AuxDevice_index(self)
    def equalIndex(self, *args): return _DataModel.AuxDevice_equalIndex(self, *args)
    def add(self, *args): return _DataModel.AuxDevice_add(self, *args)
    def remove(self, *args): return _DataModel.AuxDevice_remove(self, *args)
    def removeAuxSource(self, *args): return _DataModel.AuxDevice_removeAuxSource(self, *args)
    def auxSourceCount(self): return _DataModel.AuxDevice_auxSourceCount(self)
    def auxSource(self, *args): return _DataModel.AuxDevice_auxSource(self, *args)
    def inventory(self): return _DataModel.AuxDevice_inventory(self)
    def assign(self, *args): return _DataModel.AuxDevice_assign(self, *args)
    def attachTo(self, *args): return _DataModel.AuxDevice_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.AuxDevice_detachFrom(self, *args)
    def detach(self): return _DataModel.AuxDevice_detach(self)
    def clone(self): return _DataModel.AuxDevice_clone(self)
    def updateChild(self, *args): return _DataModel.AuxDevice_updateChild(self, *args)
    def accept(self, *args): return _DataModel.AuxDevice_accept(self, *args)
AuxDevice_swigregister = _DataModel.AuxDevice_swigregister
AuxDevice_swigregister(AuxDevice)

def AuxDevice_ClassName():
  return _DataModel.AuxDevice_ClassName()
AuxDevice_ClassName = _DataModel.AuxDevice_ClassName

def AuxDevice_TypeInfo():
  return _DataModel.AuxDevice_TypeInfo()
AuxDevice_TypeInfo = _DataModel.AuxDevice_TypeInfo

def AuxDevice_Cast(*args):
  return _DataModel.AuxDevice_Cast(*args)
AuxDevice_Cast = _DataModel.AuxDevice_Cast

def AuxDevice_ConstCast(*args):
  return _DataModel.AuxDevice_ConstCast(*args)
AuxDevice_ConstCast = _DataModel.AuxDevice_ConstCast

def AuxDevice_Create(*args):
  return _DataModel.AuxDevice_Create(*args)
AuxDevice_Create = _DataModel.AuxDevice_Create

def AuxDevice_Find(*args):
  return _DataModel.AuxDevice_Find(*args)
AuxDevice_Find = _DataModel.AuxDevice_Find

class SensorCalibrationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorCalibrationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorCalibrationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_SensorCalibrationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.SensorCalibrationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SensorCalibrationIndex___ne__(self, *args)
    __swig_setmethods__["serialNumber"] = _DataModel.SensorCalibrationIndex_serialNumber_set
    __swig_getmethods__["serialNumber"] = _DataModel.SensorCalibrationIndex_serialNumber_get
    if _newclass:serialNumber = _swig_property(_DataModel.SensorCalibrationIndex_serialNumber_get, _DataModel.SensorCalibrationIndex_serialNumber_set)
    __swig_setmethods__["channel"] = _DataModel.SensorCalibrationIndex_channel_set
    __swig_getmethods__["channel"] = _DataModel.SensorCalibrationIndex_channel_get
    if _newclass:channel = _swig_property(_DataModel.SensorCalibrationIndex_channel_get, _DataModel.SensorCalibrationIndex_channel_set)
    __swig_setmethods__["start"] = _DataModel.SensorCalibrationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.SensorCalibrationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.SensorCalibrationIndex_start_get, _DataModel.SensorCalibrationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_SensorCalibrationIndex
    __del__ = lambda self : None;
SensorCalibrationIndex_swigregister = _DataModel.SensorCalibrationIndex_swigregister
SensorCalibrationIndex_swigregister(SensorCalibrationIndex)

class SensorCalibration(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorCalibration, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SensorCalibration, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.SensorCalibration_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.SensorCalibration_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.SensorCalibration_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.SensorCalibration_TypeInfo)
    def className(self): return _DataModel.SensorCalibration_className(self)
    def typeInfo(self): return _DataModel.SensorCalibration_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.SensorCalibration_Cast
    if _newclass:Cast = staticmethod(_DataModel.SensorCalibration_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.SensorCalibration_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.SensorCalibration_ConstCast)
    def serialize(self, *args): return _DataModel.SensorCalibration_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_SensorCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SensorCalibration
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.SensorCalibration___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SensorCalibration___ne__(self, *args)
    def equal(self, *args): return _DataModel.SensorCalibration_equal(self, *args)
    def setSerialNumber(self, *args): return _DataModel.SensorCalibration_setSerialNumber(self, *args)
    def serialNumber(self): return _DataModel.SensorCalibration_serialNumber(self)
    def setChannel(self, *args): return _DataModel.SensorCalibration_setChannel(self, *args)
    def channel(self): return _DataModel.SensorCalibration_channel(self)
    def setStart(self, *args): return _DataModel.SensorCalibration_setStart(self, *args)
    def start(self): return _DataModel.SensorCalibration_start(self)
    def setEnd(self, *args): return _DataModel.SensorCalibration_setEnd(self, *args)
    def end(self): return _DataModel.SensorCalibration_end(self)
    def setGain(self, *args): return _DataModel.SensorCalibration_setGain(self, *args)
    def gain(self): return _DataModel.SensorCalibration_gain(self)
    def setGainFrequency(self, *args): return _DataModel.SensorCalibration_setGainFrequency(self, *args)
    def gainFrequency(self): return _DataModel.SensorCalibration_gainFrequency(self)
    def setRemark(self, *args): return _DataModel.SensorCalibration_setRemark(self, *args)
    def remark(self, *args): return _DataModel.SensorCalibration_remark(self, *args)
    def index(self): return _DataModel.SensorCalibration_index(self)
    def equalIndex(self, *args): return _DataModel.SensorCalibration_equalIndex(self, *args)
    def sensor(self): return _DataModel.SensorCalibration_sensor(self)
    def assign(self, *args): return _DataModel.SensorCalibration_assign(self, *args)
    def attachTo(self, *args): return _DataModel.SensorCalibration_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.SensorCalibration_detachFrom(self, *args)
    def detach(self): return _DataModel.SensorCalibration_detach(self)
    def clone(self): return _DataModel.SensorCalibration_clone(self)
    def accept(self, *args): return _DataModel.SensorCalibration_accept(self, *args)
SensorCalibration_swigregister = _DataModel.SensorCalibration_swigregister
SensorCalibration_swigregister(SensorCalibration)

def SensorCalibration_ClassName():
  return _DataModel.SensorCalibration_ClassName()
SensorCalibration_ClassName = _DataModel.SensorCalibration_ClassName

def SensorCalibration_TypeInfo():
  return _DataModel.SensorCalibration_TypeInfo()
SensorCalibration_TypeInfo = _DataModel.SensorCalibration_TypeInfo

def SensorCalibration_Cast(*args):
  return _DataModel.SensorCalibration_Cast(*args)
SensorCalibration_Cast = _DataModel.SensorCalibration_Cast

def SensorCalibration_ConstCast(*args):
  return _DataModel.SensorCalibration_ConstCast(*args)
SensorCalibration_ConstCast = _DataModel.SensorCalibration_ConstCast

class SensorIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_SensorIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.SensorIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SensorIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.SensorIndex_name_set
    __swig_getmethods__["name"] = _DataModel.SensorIndex_name_get
    if _newclass:name = _swig_property(_DataModel.SensorIndex_name_get, _DataModel.SensorIndex_name_set)
    __swig_destroy__ = _DataModel.delete_SensorIndex
    __del__ = lambda self : None;
SensorIndex_swigregister = _DataModel.SensorIndex_swigregister
SensorIndex_swigregister(SensorIndex)

class Sensor(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sensor, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sensor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Sensor_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Sensor_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Sensor_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Sensor_TypeInfo)
    def className(self): return _DataModel.Sensor_className(self)
    def typeInfo(self): return _DataModel.Sensor_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Sensor_Cast
    if _newclass:Cast = staticmethod(_DataModel.Sensor_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Sensor_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Sensor_ConstCast)
    def serialize(self, *args): return _DataModel.Sensor_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Sensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Sensor
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Sensor_Create
    if _newclass:Create = staticmethod(_DataModel.Sensor_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Sensor_Find
    if _newclass:Find = staticmethod(_DataModel.Sensor_Find)
    def __eq__(self, *args): return _DataModel.Sensor___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Sensor___ne__(self, *args)
    def equal(self, *args): return _DataModel.Sensor_equal(self, *args)
    def setName(self, *args): return _DataModel.Sensor_setName(self, *args)
    def name(self): return _DataModel.Sensor_name(self)
    def setDescription(self, *args): return _DataModel.Sensor_setDescription(self, *args)
    def description(self): return _DataModel.Sensor_description(self)
    def setModel(self, *args): return _DataModel.Sensor_setModel(self, *args)
    def model(self): return _DataModel.Sensor_model(self)
    def setManufacturer(self, *args): return _DataModel.Sensor_setManufacturer(self, *args)
    def manufacturer(self): return _DataModel.Sensor_manufacturer(self)
    def setType(self, *args): return _DataModel.Sensor_setType(self, *args)
    def type(self): return _DataModel.Sensor_type(self)
    def setUnit(self, *args): return _DataModel.Sensor_setUnit(self, *args)
    def unit(self): return _DataModel.Sensor_unit(self)
    def setLowFrequency(self, *args): return _DataModel.Sensor_setLowFrequency(self, *args)
    def lowFrequency(self): return _DataModel.Sensor_lowFrequency(self)
    def setHighFrequency(self, *args): return _DataModel.Sensor_setHighFrequency(self, *args)
    def highFrequency(self): return _DataModel.Sensor_highFrequency(self)
    def setResponse(self, *args): return _DataModel.Sensor_setResponse(self, *args)
    def response(self): return _DataModel.Sensor_response(self)
    def setRemark(self, *args): return _DataModel.Sensor_setRemark(self, *args)
    def remark(self, *args): return _DataModel.Sensor_remark(self, *args)
    def index(self): return _DataModel.Sensor_index(self)
    def equalIndex(self, *args): return _DataModel.Sensor_equalIndex(self, *args)
    def add(self, *args): return _DataModel.Sensor_add(self, *args)
    def remove(self, *args): return _DataModel.Sensor_remove(self, *args)
    def removeSensorCalibration(self, *args): return _DataModel.Sensor_removeSensorCalibration(self, *args)
    def sensorCalibrationCount(self): return _DataModel.Sensor_sensorCalibrationCount(self)
    def sensorCalibration(self, *args): return _DataModel.Sensor_sensorCalibration(self, *args)
    def inventory(self): return _DataModel.Sensor_inventory(self)
    def assign(self, *args): return _DataModel.Sensor_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Sensor_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Sensor_detachFrom(self, *args)
    def detach(self): return _DataModel.Sensor_detach(self)
    def clone(self): return _DataModel.Sensor_clone(self)
    def updateChild(self, *args): return _DataModel.Sensor_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Sensor_accept(self, *args)
Sensor_swigregister = _DataModel.Sensor_swigregister
Sensor_swigregister(Sensor)

def Sensor_ClassName():
  return _DataModel.Sensor_ClassName()
Sensor_ClassName = _DataModel.Sensor_ClassName

def Sensor_TypeInfo():
  return _DataModel.Sensor_TypeInfo()
Sensor_TypeInfo = _DataModel.Sensor_TypeInfo

def Sensor_Cast(*args):
  return _DataModel.Sensor_Cast(*args)
Sensor_Cast = _DataModel.Sensor_Cast

def Sensor_ConstCast(*args):
  return _DataModel.Sensor_ConstCast(*args)
Sensor_ConstCast = _DataModel.Sensor_ConstCast

def Sensor_Create(*args):
  return _DataModel.Sensor_Create(*args)
Sensor_Create = _DataModel.Sensor_Create

def Sensor_Find(*args):
  return _DataModel.Sensor_Find(*args)
Sensor_Find = _DataModel.Sensor_Find

class ResponsePAZIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePAZIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePAZIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ResponsePAZIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ResponsePAZIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponsePAZIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.ResponsePAZIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponsePAZIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponsePAZIndex_name_get, _DataModel.ResponsePAZIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponsePAZIndex
    __del__ = lambda self : None;
ResponsePAZIndex_swigregister = _DataModel.ResponsePAZIndex_swigregister
ResponsePAZIndex_swigregister(ResponsePAZIndex)

class ResponsePAZ(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePAZ, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePAZ, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ResponsePAZ_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ResponsePAZ_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ResponsePAZ_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ResponsePAZ_TypeInfo)
    def className(self): return _DataModel.ResponsePAZ_className(self)
    def typeInfo(self): return _DataModel.ResponsePAZ_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ResponsePAZ_Cast
    if _newclass:Cast = staticmethod(_DataModel.ResponsePAZ_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ResponsePAZ_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ResponsePAZ_ConstCast)
    def serialize(self, *args): return _DataModel.ResponsePAZ_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ResponsePAZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponsePAZ
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ResponsePAZ_Create
    if _newclass:Create = staticmethod(_DataModel.ResponsePAZ_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ResponsePAZ_Find
    if _newclass:Find = staticmethod(_DataModel.ResponsePAZ_Find)
    def __eq__(self, *args): return _DataModel.ResponsePAZ___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponsePAZ___ne__(self, *args)
    def equal(self, *args): return _DataModel.ResponsePAZ_equal(self, *args)
    def setName(self, *args): return _DataModel.ResponsePAZ_setName(self, *args)
    def name(self): return _DataModel.ResponsePAZ_name(self)
    def setType(self, *args): return _DataModel.ResponsePAZ_setType(self, *args)
    def type(self): return _DataModel.ResponsePAZ_type(self)
    def setGain(self, *args): return _DataModel.ResponsePAZ_setGain(self, *args)
    def gain(self): return _DataModel.ResponsePAZ_gain(self)
    def setGainFrequency(self, *args): return _DataModel.ResponsePAZ_setGainFrequency(self, *args)
    def gainFrequency(self): return _DataModel.ResponsePAZ_gainFrequency(self)
    def setNormalizationFactor(self, *args): return _DataModel.ResponsePAZ_setNormalizationFactor(self, *args)
    def normalizationFactor(self): return _DataModel.ResponsePAZ_normalizationFactor(self)
    def setNormalizationFrequency(self, *args): return _DataModel.ResponsePAZ_setNormalizationFrequency(self, *args)
    def normalizationFrequency(self): return _DataModel.ResponsePAZ_normalizationFrequency(self)
    def setNumberOfZeros(self, *args): return _DataModel.ResponsePAZ_setNumberOfZeros(self, *args)
    def numberOfZeros(self): return _DataModel.ResponsePAZ_numberOfZeros(self)
    def setNumberOfPoles(self, *args): return _DataModel.ResponsePAZ_setNumberOfPoles(self, *args)
    def numberOfPoles(self): return _DataModel.ResponsePAZ_numberOfPoles(self)
    def setZeros(self, *args): return _DataModel.ResponsePAZ_setZeros(self, *args)
    def zeros(self, *args): return _DataModel.ResponsePAZ_zeros(self, *args)
    def setPoles(self, *args): return _DataModel.ResponsePAZ_setPoles(self, *args)
    def poles(self, *args): return _DataModel.ResponsePAZ_poles(self, *args)
    def setRemark(self, *args): return _DataModel.ResponsePAZ_setRemark(self, *args)
    def remark(self, *args): return _DataModel.ResponsePAZ_remark(self, *args)
    def index(self): return _DataModel.ResponsePAZ_index(self)
    def equalIndex(self, *args): return _DataModel.ResponsePAZ_equalIndex(self, *args)
    def inventory(self): return _DataModel.ResponsePAZ_inventory(self)
    def assign(self, *args): return _DataModel.ResponsePAZ_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ResponsePAZ_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ResponsePAZ_detachFrom(self, *args)
    def detach(self): return _DataModel.ResponsePAZ_detach(self)
    def clone(self): return _DataModel.ResponsePAZ_clone(self)
    def updateChild(self, *args): return _DataModel.ResponsePAZ_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ResponsePAZ_accept(self, *args)
ResponsePAZ_swigregister = _DataModel.ResponsePAZ_swigregister
ResponsePAZ_swigregister(ResponsePAZ)

def ResponsePAZ_ClassName():
  return _DataModel.ResponsePAZ_ClassName()
ResponsePAZ_ClassName = _DataModel.ResponsePAZ_ClassName

def ResponsePAZ_TypeInfo():
  return _DataModel.ResponsePAZ_TypeInfo()
ResponsePAZ_TypeInfo = _DataModel.ResponsePAZ_TypeInfo

def ResponsePAZ_Cast(*args):
  return _DataModel.ResponsePAZ_Cast(*args)
ResponsePAZ_Cast = _DataModel.ResponsePAZ_Cast

def ResponsePAZ_ConstCast(*args):
  return _DataModel.ResponsePAZ_ConstCast(*args)
ResponsePAZ_ConstCast = _DataModel.ResponsePAZ_ConstCast

def ResponsePAZ_Create(*args):
  return _DataModel.ResponsePAZ_Create(*args)
ResponsePAZ_Create = _DataModel.ResponsePAZ_Create

def ResponsePAZ_Find(*args):
  return _DataModel.ResponsePAZ_Find(*args)
ResponsePAZ_Find = _DataModel.ResponsePAZ_Find

class ResponsePolynomialIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePolynomialIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePolynomialIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ResponsePolynomialIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ResponsePolynomialIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponsePolynomialIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.ResponsePolynomialIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponsePolynomialIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponsePolynomialIndex_name_get, _DataModel.ResponsePolynomialIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponsePolynomialIndex
    __del__ = lambda self : None;
ResponsePolynomialIndex_swigregister = _DataModel.ResponsePolynomialIndex_swigregister
ResponsePolynomialIndex_swigregister(ResponsePolynomialIndex)

class ResponsePolynomial(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePolynomial, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePolynomial, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ResponsePolynomial_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ResponsePolynomial_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ResponsePolynomial_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ResponsePolynomial_TypeInfo)
    def className(self): return _DataModel.ResponsePolynomial_className(self)
    def typeInfo(self): return _DataModel.ResponsePolynomial_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ResponsePolynomial_Cast
    if _newclass:Cast = staticmethod(_DataModel.ResponsePolynomial_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ResponsePolynomial_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ResponsePolynomial_ConstCast)
    def serialize(self, *args): return _DataModel.ResponsePolynomial_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ResponsePolynomial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponsePolynomial
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ResponsePolynomial_Create
    if _newclass:Create = staticmethod(_DataModel.ResponsePolynomial_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ResponsePolynomial_Find
    if _newclass:Find = staticmethod(_DataModel.ResponsePolynomial_Find)
    def __eq__(self, *args): return _DataModel.ResponsePolynomial___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponsePolynomial___ne__(self, *args)
    def equal(self, *args): return _DataModel.ResponsePolynomial_equal(self, *args)
    def setName(self, *args): return _DataModel.ResponsePolynomial_setName(self, *args)
    def name(self): return _DataModel.ResponsePolynomial_name(self)
    def setGain(self, *args): return _DataModel.ResponsePolynomial_setGain(self, *args)
    def gain(self): return _DataModel.ResponsePolynomial_gain(self)
    def setGainFrequency(self, *args): return _DataModel.ResponsePolynomial_setGainFrequency(self, *args)
    def gainFrequency(self): return _DataModel.ResponsePolynomial_gainFrequency(self)
    def setFrequencyUnit(self, *args): return _DataModel.ResponsePolynomial_setFrequencyUnit(self, *args)
    def frequencyUnit(self): return _DataModel.ResponsePolynomial_frequencyUnit(self)
    def setApproximationType(self, *args): return _DataModel.ResponsePolynomial_setApproximationType(self, *args)
    def approximationType(self): return _DataModel.ResponsePolynomial_approximationType(self)
    def setApproximationLowerBound(self, *args): return _DataModel.ResponsePolynomial_setApproximationLowerBound(self, *args)
    def approximationLowerBound(self): return _DataModel.ResponsePolynomial_approximationLowerBound(self)
    def setApproximationUpperBound(self, *args): return _DataModel.ResponsePolynomial_setApproximationUpperBound(self, *args)
    def approximationUpperBound(self): return _DataModel.ResponsePolynomial_approximationUpperBound(self)
    def setApproximationError(self, *args): return _DataModel.ResponsePolynomial_setApproximationError(self, *args)
    def approximationError(self): return _DataModel.ResponsePolynomial_approximationError(self)
    def setNumberOfCoefficients(self, *args): return _DataModel.ResponsePolynomial_setNumberOfCoefficients(self, *args)
    def numberOfCoefficients(self): return _DataModel.ResponsePolynomial_numberOfCoefficients(self)
    def setCoefficients(self, *args): return _DataModel.ResponsePolynomial_setCoefficients(self, *args)
    def coefficients(self, *args): return _DataModel.ResponsePolynomial_coefficients(self, *args)
    def setRemark(self, *args): return _DataModel.ResponsePolynomial_setRemark(self, *args)
    def remark(self, *args): return _DataModel.ResponsePolynomial_remark(self, *args)
    def index(self): return _DataModel.ResponsePolynomial_index(self)
    def equalIndex(self, *args): return _DataModel.ResponsePolynomial_equalIndex(self, *args)
    def inventory(self): return _DataModel.ResponsePolynomial_inventory(self)
    def assign(self, *args): return _DataModel.ResponsePolynomial_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ResponsePolynomial_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ResponsePolynomial_detachFrom(self, *args)
    def detach(self): return _DataModel.ResponsePolynomial_detach(self)
    def clone(self): return _DataModel.ResponsePolynomial_clone(self)
    def updateChild(self, *args): return _DataModel.ResponsePolynomial_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ResponsePolynomial_accept(self, *args)
ResponsePolynomial_swigregister = _DataModel.ResponsePolynomial_swigregister
ResponsePolynomial_swigregister(ResponsePolynomial)

def ResponsePolynomial_ClassName():
  return _DataModel.ResponsePolynomial_ClassName()
ResponsePolynomial_ClassName = _DataModel.ResponsePolynomial_ClassName

def ResponsePolynomial_TypeInfo():
  return _DataModel.ResponsePolynomial_TypeInfo()
ResponsePolynomial_TypeInfo = _DataModel.ResponsePolynomial_TypeInfo

def ResponsePolynomial_Cast(*args):
  return _DataModel.ResponsePolynomial_Cast(*args)
ResponsePolynomial_Cast = _DataModel.ResponsePolynomial_Cast

def ResponsePolynomial_ConstCast(*args):
  return _DataModel.ResponsePolynomial_ConstCast(*args)
ResponsePolynomial_ConstCast = _DataModel.ResponsePolynomial_ConstCast

def ResponsePolynomial_Create(*args):
  return _DataModel.ResponsePolynomial_Create(*args)
ResponsePolynomial_Create = _DataModel.ResponsePolynomial_Create

def ResponsePolynomial_Find(*args):
  return _DataModel.ResponsePolynomial_Find(*args)
ResponsePolynomial_Find = _DataModel.ResponsePolynomial_Find

class DataloggerCalibrationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerCalibrationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerCalibrationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DataloggerCalibrationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.DataloggerCalibrationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.DataloggerCalibrationIndex___ne__(self, *args)
    __swig_setmethods__["serialNumber"] = _DataModel.DataloggerCalibrationIndex_serialNumber_set
    __swig_getmethods__["serialNumber"] = _DataModel.DataloggerCalibrationIndex_serialNumber_get
    if _newclass:serialNumber = _swig_property(_DataModel.DataloggerCalibrationIndex_serialNumber_get, _DataModel.DataloggerCalibrationIndex_serialNumber_set)
    __swig_setmethods__["channel"] = _DataModel.DataloggerCalibrationIndex_channel_set
    __swig_getmethods__["channel"] = _DataModel.DataloggerCalibrationIndex_channel_get
    if _newclass:channel = _swig_property(_DataModel.DataloggerCalibrationIndex_channel_get, _DataModel.DataloggerCalibrationIndex_channel_set)
    __swig_setmethods__["start"] = _DataModel.DataloggerCalibrationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.DataloggerCalibrationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.DataloggerCalibrationIndex_start_get, _DataModel.DataloggerCalibrationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_DataloggerCalibrationIndex
    __del__ = lambda self : None;
DataloggerCalibrationIndex_swigregister = _DataModel.DataloggerCalibrationIndex_swigregister
DataloggerCalibrationIndex_swigregister(DataloggerCalibrationIndex)

class DataloggerCalibration(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerCalibration, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerCalibration, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.DataloggerCalibration_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.DataloggerCalibration_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.DataloggerCalibration_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.DataloggerCalibration_TypeInfo)
    def className(self): return _DataModel.DataloggerCalibration_className(self)
    def typeInfo(self): return _DataModel.DataloggerCalibration_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.DataloggerCalibration_Cast
    if _newclass:Cast = staticmethod(_DataModel.DataloggerCalibration_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.DataloggerCalibration_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.DataloggerCalibration_ConstCast)
    def serialize(self, *args): return _DataModel.DataloggerCalibration_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_DataloggerCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DataloggerCalibration
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.DataloggerCalibration___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.DataloggerCalibration___ne__(self, *args)
    def equal(self, *args): return _DataModel.DataloggerCalibration_equal(self, *args)
    def setSerialNumber(self, *args): return _DataModel.DataloggerCalibration_setSerialNumber(self, *args)
    def serialNumber(self): return _DataModel.DataloggerCalibration_serialNumber(self)
    def setChannel(self, *args): return _DataModel.DataloggerCalibration_setChannel(self, *args)
    def channel(self): return _DataModel.DataloggerCalibration_channel(self)
    def setStart(self, *args): return _DataModel.DataloggerCalibration_setStart(self, *args)
    def start(self): return _DataModel.DataloggerCalibration_start(self)
    def setEnd(self, *args): return _DataModel.DataloggerCalibration_setEnd(self, *args)
    def end(self): return _DataModel.DataloggerCalibration_end(self)
    def setGain(self, *args): return _DataModel.DataloggerCalibration_setGain(self, *args)
    def gain(self): return _DataModel.DataloggerCalibration_gain(self)
    def setGainFrequency(self, *args): return _DataModel.DataloggerCalibration_setGainFrequency(self, *args)
    def gainFrequency(self): return _DataModel.DataloggerCalibration_gainFrequency(self)
    def setRemark(self, *args): return _DataModel.DataloggerCalibration_setRemark(self, *args)
    def remark(self, *args): return _DataModel.DataloggerCalibration_remark(self, *args)
    def index(self): return _DataModel.DataloggerCalibration_index(self)
    def equalIndex(self, *args): return _DataModel.DataloggerCalibration_equalIndex(self, *args)
    def datalogger(self): return _DataModel.DataloggerCalibration_datalogger(self)
    def assign(self, *args): return _DataModel.DataloggerCalibration_assign(self, *args)
    def attachTo(self, *args): return _DataModel.DataloggerCalibration_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.DataloggerCalibration_detachFrom(self, *args)
    def detach(self): return _DataModel.DataloggerCalibration_detach(self)
    def clone(self): return _DataModel.DataloggerCalibration_clone(self)
    def accept(self, *args): return _DataModel.DataloggerCalibration_accept(self, *args)
DataloggerCalibration_swigregister = _DataModel.DataloggerCalibration_swigregister
DataloggerCalibration_swigregister(DataloggerCalibration)

def DataloggerCalibration_ClassName():
  return _DataModel.DataloggerCalibration_ClassName()
DataloggerCalibration_ClassName = _DataModel.DataloggerCalibration_ClassName

def DataloggerCalibration_TypeInfo():
  return _DataModel.DataloggerCalibration_TypeInfo()
DataloggerCalibration_TypeInfo = _DataModel.DataloggerCalibration_TypeInfo

def DataloggerCalibration_Cast(*args):
  return _DataModel.DataloggerCalibration_Cast(*args)
DataloggerCalibration_Cast = _DataModel.DataloggerCalibration_Cast

def DataloggerCalibration_ConstCast(*args):
  return _DataModel.DataloggerCalibration_ConstCast(*args)
DataloggerCalibration_ConstCast = _DataModel.DataloggerCalibration_ConstCast

class DecimationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecimationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecimationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DecimationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.DecimationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.DecimationIndex___ne__(self, *args)
    __swig_setmethods__["sampleRateNumerator"] = _DataModel.DecimationIndex_sampleRateNumerator_set
    __swig_getmethods__["sampleRateNumerator"] = _DataModel.DecimationIndex_sampleRateNumerator_get
    if _newclass:sampleRateNumerator = _swig_property(_DataModel.DecimationIndex_sampleRateNumerator_get, _DataModel.DecimationIndex_sampleRateNumerator_set)
    __swig_setmethods__["sampleRateDenominator"] = _DataModel.DecimationIndex_sampleRateDenominator_set
    __swig_getmethods__["sampleRateDenominator"] = _DataModel.DecimationIndex_sampleRateDenominator_get
    if _newclass:sampleRateDenominator = _swig_property(_DataModel.DecimationIndex_sampleRateDenominator_get, _DataModel.DecimationIndex_sampleRateDenominator_set)
    __swig_destroy__ = _DataModel.delete_DecimationIndex
    __del__ = lambda self : None;
DecimationIndex_swigregister = _DataModel.DecimationIndex_swigregister
DecimationIndex_swigregister(DecimationIndex)

class Decimation(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decimation, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decimation, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Decimation_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Decimation_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Decimation_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Decimation_TypeInfo)
    def className(self): return _DataModel.Decimation_className(self)
    def typeInfo(self): return _DataModel.Decimation_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Decimation_Cast
    if _newclass:Cast = staticmethod(_DataModel.Decimation_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Decimation_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Decimation_ConstCast)
    def serialize(self, *args): return _DataModel.Decimation_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Decimation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Decimation
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Decimation___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Decimation___ne__(self, *args)
    def equal(self, *args): return _DataModel.Decimation_equal(self, *args)
    def setSampleRateNumerator(self, *args): return _DataModel.Decimation_setSampleRateNumerator(self, *args)
    def sampleRateNumerator(self): return _DataModel.Decimation_sampleRateNumerator(self)
    def setSampleRateDenominator(self, *args): return _DataModel.Decimation_setSampleRateDenominator(self, *args)
    def sampleRateDenominator(self): return _DataModel.Decimation_sampleRateDenominator(self)
    def setAnalogueFilterChain(self, *args): return _DataModel.Decimation_setAnalogueFilterChain(self, *args)
    def analogueFilterChain(self, *args): return _DataModel.Decimation_analogueFilterChain(self, *args)
    def setDigitalFilterChain(self, *args): return _DataModel.Decimation_setDigitalFilterChain(self, *args)
    def digitalFilterChain(self, *args): return _DataModel.Decimation_digitalFilterChain(self, *args)
    def index(self): return _DataModel.Decimation_index(self)
    def equalIndex(self, *args): return _DataModel.Decimation_equalIndex(self, *args)
    def datalogger(self): return _DataModel.Decimation_datalogger(self)
    def assign(self, *args): return _DataModel.Decimation_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Decimation_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Decimation_detachFrom(self, *args)
    def detach(self): return _DataModel.Decimation_detach(self)
    def clone(self): return _DataModel.Decimation_clone(self)
    def accept(self, *args): return _DataModel.Decimation_accept(self, *args)
Decimation_swigregister = _DataModel.Decimation_swigregister
Decimation_swigregister(Decimation)

def Decimation_ClassName():
  return _DataModel.Decimation_ClassName()
Decimation_ClassName = _DataModel.Decimation_ClassName

def Decimation_TypeInfo():
  return _DataModel.Decimation_TypeInfo()
Decimation_TypeInfo = _DataModel.Decimation_TypeInfo

def Decimation_Cast(*args):
  return _DataModel.Decimation_Cast(*args)
Decimation_Cast = _DataModel.Decimation_Cast

def Decimation_ConstCast(*args):
  return _DataModel.Decimation_ConstCast(*args)
Decimation_ConstCast = _DataModel.Decimation_ConstCast

class DataloggerIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DataloggerIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.DataloggerIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.DataloggerIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.DataloggerIndex_name_set
    __swig_getmethods__["name"] = _DataModel.DataloggerIndex_name_get
    if _newclass:name = _swig_property(_DataModel.DataloggerIndex_name_get, _DataModel.DataloggerIndex_name_set)
    __swig_destroy__ = _DataModel.delete_DataloggerIndex
    __del__ = lambda self : None;
DataloggerIndex_swigregister = _DataModel.DataloggerIndex_swigregister
DataloggerIndex_swigregister(DataloggerIndex)

class Datalogger(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datalogger, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datalogger, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Datalogger_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Datalogger_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Datalogger_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Datalogger_TypeInfo)
    def className(self): return _DataModel.Datalogger_className(self)
    def typeInfo(self): return _DataModel.Datalogger_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Datalogger_Cast
    if _newclass:Cast = staticmethod(_DataModel.Datalogger_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Datalogger_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Datalogger_ConstCast)
    def serialize(self, *args): return _DataModel.Datalogger_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Datalogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Datalogger
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Datalogger_Create
    if _newclass:Create = staticmethod(_DataModel.Datalogger_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Datalogger_Find
    if _newclass:Find = staticmethod(_DataModel.Datalogger_Find)
    def __eq__(self, *args): return _DataModel.Datalogger___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Datalogger___ne__(self, *args)
    def equal(self, *args): return _DataModel.Datalogger_equal(self, *args)
    def setName(self, *args): return _DataModel.Datalogger_setName(self, *args)
    def name(self): return _DataModel.Datalogger_name(self)
    def setDescription(self, *args): return _DataModel.Datalogger_setDescription(self, *args)
    def description(self): return _DataModel.Datalogger_description(self)
    def setDigitizerModel(self, *args): return _DataModel.Datalogger_setDigitizerModel(self, *args)
    def digitizerModel(self): return _DataModel.Datalogger_digitizerModel(self)
    def setDigitizerManufacturer(self, *args): return _DataModel.Datalogger_setDigitizerManufacturer(self, *args)
    def digitizerManufacturer(self): return _DataModel.Datalogger_digitizerManufacturer(self)
    def setRecorderModel(self, *args): return _DataModel.Datalogger_setRecorderModel(self, *args)
    def recorderModel(self): return _DataModel.Datalogger_recorderModel(self)
    def setRecorderManufacturer(self, *args): return _DataModel.Datalogger_setRecorderManufacturer(self, *args)
    def recorderManufacturer(self): return _DataModel.Datalogger_recorderManufacturer(self)
    def setClockModel(self, *args): return _DataModel.Datalogger_setClockModel(self, *args)
    def clockModel(self): return _DataModel.Datalogger_clockModel(self)
    def setClockManufacturer(self, *args): return _DataModel.Datalogger_setClockManufacturer(self, *args)
    def clockManufacturer(self): return _DataModel.Datalogger_clockManufacturer(self)
    def setClockType(self, *args): return _DataModel.Datalogger_setClockType(self, *args)
    def clockType(self): return _DataModel.Datalogger_clockType(self)
    def setGain(self, *args): return _DataModel.Datalogger_setGain(self, *args)
    def gain(self): return _DataModel.Datalogger_gain(self)
    def setMaxClockDrift(self, *args): return _DataModel.Datalogger_setMaxClockDrift(self, *args)
    def maxClockDrift(self): return _DataModel.Datalogger_maxClockDrift(self)
    def setRemark(self, *args): return _DataModel.Datalogger_setRemark(self, *args)
    def remark(self, *args): return _DataModel.Datalogger_remark(self, *args)
    def index(self): return _DataModel.Datalogger_index(self)
    def equalIndex(self, *args): return _DataModel.Datalogger_equalIndex(self, *args)
    def add(self, *args): return _DataModel.Datalogger_add(self, *args)
    def remove(self, *args): return _DataModel.Datalogger_remove(self, *args)
    def removeDataloggerCalibration(self, *args): return _DataModel.Datalogger_removeDataloggerCalibration(self, *args)
    def removeDecimation(self, *args): return _DataModel.Datalogger_removeDecimation(self, *args)
    def dataloggerCalibrationCount(self): return _DataModel.Datalogger_dataloggerCalibrationCount(self)
    def decimationCount(self): return _DataModel.Datalogger_decimationCount(self)
    def dataloggerCalibration(self, *args): return _DataModel.Datalogger_dataloggerCalibration(self, *args)
    def decimation(self, *args): return _DataModel.Datalogger_decimation(self, *args)
    def inventory(self): return _DataModel.Datalogger_inventory(self)
    def assign(self, *args): return _DataModel.Datalogger_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Datalogger_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Datalogger_detachFrom(self, *args)
    def detach(self): return _DataModel.Datalogger_detach(self)
    def clone(self): return _DataModel.Datalogger_clone(self)
    def updateChild(self, *args): return _DataModel.Datalogger_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Datalogger_accept(self, *args)
Datalogger_swigregister = _DataModel.Datalogger_swigregister
Datalogger_swigregister(Datalogger)

def Datalogger_ClassName():
  return _DataModel.Datalogger_ClassName()
Datalogger_ClassName = _DataModel.Datalogger_ClassName

def Datalogger_TypeInfo():
  return _DataModel.Datalogger_TypeInfo()
Datalogger_TypeInfo = _DataModel.Datalogger_TypeInfo

def Datalogger_Cast(*args):
  return _DataModel.Datalogger_Cast(*args)
Datalogger_Cast = _DataModel.Datalogger_Cast

def Datalogger_ConstCast(*args):
  return _DataModel.Datalogger_ConstCast(*args)
Datalogger_ConstCast = _DataModel.Datalogger_ConstCast

def Datalogger_Create(*args):
  return _DataModel.Datalogger_Create(*args)
Datalogger_Create = _DataModel.Datalogger_Create

def Datalogger_Find(*args):
  return _DataModel.Datalogger_Find(*args)
Datalogger_Find = _DataModel.Datalogger_Find

class ResponseFIRIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFIRIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFIRIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ResponseFIRIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ResponseFIRIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponseFIRIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.ResponseFIRIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponseFIRIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponseFIRIndex_name_get, _DataModel.ResponseFIRIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponseFIRIndex
    __del__ = lambda self : None;
ResponseFIRIndex_swigregister = _DataModel.ResponseFIRIndex_swigregister
ResponseFIRIndex_swigregister(ResponseFIRIndex)

class ResponseFIR(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFIR, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ResponseFIR_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ResponseFIR_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ResponseFIR_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ResponseFIR_TypeInfo)
    def className(self): return _DataModel.ResponseFIR_className(self)
    def typeInfo(self): return _DataModel.ResponseFIR_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ResponseFIR_Cast
    if _newclass:Cast = staticmethod(_DataModel.ResponseFIR_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ResponseFIR_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ResponseFIR_ConstCast)
    def serialize(self, *args): return _DataModel.ResponseFIR_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ResponseFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponseFIR
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ResponseFIR_Create
    if _newclass:Create = staticmethod(_DataModel.ResponseFIR_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ResponseFIR_Find
    if _newclass:Find = staticmethod(_DataModel.ResponseFIR_Find)
    def __eq__(self, *args): return _DataModel.ResponseFIR___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ResponseFIR___ne__(self, *args)
    def equal(self, *args): return _DataModel.ResponseFIR_equal(self, *args)
    def setName(self, *args): return _DataModel.ResponseFIR_setName(self, *args)
    def name(self): return _DataModel.ResponseFIR_name(self)
    def setGain(self, *args): return _DataModel.ResponseFIR_setGain(self, *args)
    def gain(self): return _DataModel.ResponseFIR_gain(self)
    def setDecimationFactor(self, *args): return _DataModel.ResponseFIR_setDecimationFactor(self, *args)
    def decimationFactor(self): return _DataModel.ResponseFIR_decimationFactor(self)
    def setDelay(self, *args): return _DataModel.ResponseFIR_setDelay(self, *args)
    def delay(self): return _DataModel.ResponseFIR_delay(self)
    def setCorrection(self, *args): return _DataModel.ResponseFIR_setCorrection(self, *args)
    def correction(self): return _DataModel.ResponseFIR_correction(self)
    def setNumberOfCoefficients(self, *args): return _DataModel.ResponseFIR_setNumberOfCoefficients(self, *args)
    def numberOfCoefficients(self): return _DataModel.ResponseFIR_numberOfCoefficients(self)
    def setSymmetry(self, *args): return _DataModel.ResponseFIR_setSymmetry(self, *args)
    def symmetry(self): return _DataModel.ResponseFIR_symmetry(self)
    def setCoefficients(self, *args): return _DataModel.ResponseFIR_setCoefficients(self, *args)
    def coefficients(self, *args): return _DataModel.ResponseFIR_coefficients(self, *args)
    def setRemark(self, *args): return _DataModel.ResponseFIR_setRemark(self, *args)
    def remark(self, *args): return _DataModel.ResponseFIR_remark(self, *args)
    def index(self): return _DataModel.ResponseFIR_index(self)
    def equalIndex(self, *args): return _DataModel.ResponseFIR_equalIndex(self, *args)
    def inventory(self): return _DataModel.ResponseFIR_inventory(self)
    def assign(self, *args): return _DataModel.ResponseFIR_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ResponseFIR_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ResponseFIR_detachFrom(self, *args)
    def detach(self): return _DataModel.ResponseFIR_detach(self)
    def clone(self): return _DataModel.ResponseFIR_clone(self)
    def updateChild(self, *args): return _DataModel.ResponseFIR_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ResponseFIR_accept(self, *args)
ResponseFIR_swigregister = _DataModel.ResponseFIR_swigregister
ResponseFIR_swigregister(ResponseFIR)

def ResponseFIR_ClassName():
  return _DataModel.ResponseFIR_ClassName()
ResponseFIR_ClassName = _DataModel.ResponseFIR_ClassName

def ResponseFIR_TypeInfo():
  return _DataModel.ResponseFIR_TypeInfo()
ResponseFIR_TypeInfo = _DataModel.ResponseFIR_TypeInfo

def ResponseFIR_Cast(*args):
  return _DataModel.ResponseFIR_Cast(*args)
ResponseFIR_Cast = _DataModel.ResponseFIR_Cast

def ResponseFIR_ConstCast(*args):
  return _DataModel.ResponseFIR_ConstCast(*args)
ResponseFIR_ConstCast = _DataModel.ResponseFIR_ConstCast

def ResponseFIR_Create(*args):
  return _DataModel.ResponseFIR_Create(*args)
ResponseFIR_Create = _DataModel.ResponseFIR_Create

def ResponseFIR_Find(*args):
  return _DataModel.ResponseFIR_Find(*args)
ResponseFIR_Find = _DataModel.ResponseFIR_Find

class AuxStreamIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxStreamIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxStreamIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_AuxStreamIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.AuxStreamIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxStreamIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.AuxStreamIndex_code_set
    __swig_getmethods__["code"] = _DataModel.AuxStreamIndex_code_get
    if _newclass:code = _swig_property(_DataModel.AuxStreamIndex_code_get, _DataModel.AuxStreamIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.AuxStreamIndex_start_set
    __swig_getmethods__["start"] = _DataModel.AuxStreamIndex_start_get
    if _newclass:start = _swig_property(_DataModel.AuxStreamIndex_start_get, _DataModel.AuxStreamIndex_start_set)
    __swig_destroy__ = _DataModel.delete_AuxStreamIndex
    __del__ = lambda self : None;
AuxStreamIndex_swigregister = _DataModel.AuxStreamIndex_swigregister
AuxStreamIndex_swigregister(AuxStreamIndex)

class AuxStream(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxStream, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.AuxStream_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.AuxStream_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.AuxStream_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.AuxStream_TypeInfo)
    def className(self): return _DataModel.AuxStream_className(self)
    def typeInfo(self): return _DataModel.AuxStream_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.AuxStream_Cast
    if _newclass:Cast = staticmethod(_DataModel.AuxStream_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.AuxStream_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.AuxStream_ConstCast)
    def serialize(self, *args): return _DataModel.AuxStream_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_AuxStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxStream
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.AuxStream___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AuxStream___ne__(self, *args)
    def equal(self, *args): return _DataModel.AuxStream_equal(self, *args)
    def setCode(self, *args): return _DataModel.AuxStream_setCode(self, *args)
    def code(self): return _DataModel.AuxStream_code(self)
    def setStart(self, *args): return _DataModel.AuxStream_setStart(self, *args)
    def start(self): return _DataModel.AuxStream_start(self)
    def setEnd(self, *args): return _DataModel.AuxStream_setEnd(self, *args)
    def end(self): return _DataModel.AuxStream_end(self)
    def setDevice(self, *args): return _DataModel.AuxStream_setDevice(self, *args)
    def device(self): return _DataModel.AuxStream_device(self)
    def setDeviceSerialNumber(self, *args): return _DataModel.AuxStream_setDeviceSerialNumber(self, *args)
    def deviceSerialNumber(self): return _DataModel.AuxStream_deviceSerialNumber(self)
    def setSource(self, *args): return _DataModel.AuxStream_setSource(self, *args)
    def source(self): return _DataModel.AuxStream_source(self)
    def setFormat(self, *args): return _DataModel.AuxStream_setFormat(self, *args)
    def format(self): return _DataModel.AuxStream_format(self)
    def setFlags(self, *args): return _DataModel.AuxStream_setFlags(self, *args)
    def flags(self): return _DataModel.AuxStream_flags(self)
    def setRestricted(self, *args): return _DataModel.AuxStream_setRestricted(self, *args)
    def restricted(self): return _DataModel.AuxStream_restricted(self)
    def setShared(self, *args): return _DataModel.AuxStream_setShared(self, *args)
    def shared(self): return _DataModel.AuxStream_shared(self)
    def index(self): return _DataModel.AuxStream_index(self)
    def equalIndex(self, *args): return _DataModel.AuxStream_equalIndex(self, *args)
    def sensorLocation(self): return _DataModel.AuxStream_sensorLocation(self)
    def assign(self, *args): return _DataModel.AuxStream_assign(self, *args)
    def attachTo(self, *args): return _DataModel.AuxStream_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.AuxStream_detachFrom(self, *args)
    def detach(self): return _DataModel.AuxStream_detach(self)
    def clone(self): return _DataModel.AuxStream_clone(self)
    def accept(self, *args): return _DataModel.AuxStream_accept(self, *args)
AuxStream_swigregister = _DataModel.AuxStream_swigregister
AuxStream_swigregister(AuxStream)

def AuxStream_ClassName():
  return _DataModel.AuxStream_ClassName()
AuxStream_ClassName = _DataModel.AuxStream_ClassName

def AuxStream_TypeInfo():
  return _DataModel.AuxStream_TypeInfo()
AuxStream_TypeInfo = _DataModel.AuxStream_TypeInfo

def AuxStream_Cast(*args):
  return _DataModel.AuxStream_Cast(*args)
AuxStream_Cast = _DataModel.AuxStream_Cast

def AuxStream_ConstCast(*args):
  return _DataModel.AuxStream_ConstCast(*args)
AuxStream_ConstCast = _DataModel.AuxStream_ConstCast

class StreamIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_StreamIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.StreamIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StreamIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.StreamIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StreamIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StreamIndex_code_get, _DataModel.StreamIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.StreamIndex_start_set
    __swig_getmethods__["start"] = _DataModel.StreamIndex_start_get
    if _newclass:start = _swig_property(_DataModel.StreamIndex_start_get, _DataModel.StreamIndex_start_set)
    __swig_destroy__ = _DataModel.delete_StreamIndex
    __del__ = lambda self : None;
StreamIndex_swigregister = _DataModel.StreamIndex_swigregister
StreamIndex_swigregister(StreamIndex)

class Stream(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Stream_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Stream_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Stream_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Stream_TypeInfo)
    def className(self): return _DataModel.Stream_className(self)
    def typeInfo(self): return _DataModel.Stream_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Stream_Cast
    if _newclass:Cast = staticmethod(_DataModel.Stream_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Stream_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Stream_ConstCast)
    def serialize(self, *args): return _DataModel.Stream_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Stream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Stream
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Stream___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Stream___ne__(self, *args)
    def equal(self, *args): return _DataModel.Stream_equal(self, *args)
    def setCode(self, *args): return _DataModel.Stream_setCode(self, *args)
    def code(self): return _DataModel.Stream_code(self)
    def setStart(self, *args): return _DataModel.Stream_setStart(self, *args)
    def start(self): return _DataModel.Stream_start(self)
    def setEnd(self, *args): return _DataModel.Stream_setEnd(self, *args)
    def end(self): return _DataModel.Stream_end(self)
    def setDatalogger(self, *args): return _DataModel.Stream_setDatalogger(self, *args)
    def datalogger(self): return _DataModel.Stream_datalogger(self)
    def setDataloggerSerialNumber(self, *args): return _DataModel.Stream_setDataloggerSerialNumber(self, *args)
    def dataloggerSerialNumber(self): return _DataModel.Stream_dataloggerSerialNumber(self)
    def setDataloggerChannel(self, *args): return _DataModel.Stream_setDataloggerChannel(self, *args)
    def dataloggerChannel(self): return _DataModel.Stream_dataloggerChannel(self)
    def setSensor(self, *args): return _DataModel.Stream_setSensor(self, *args)
    def sensor(self): return _DataModel.Stream_sensor(self)
    def setSensorSerialNumber(self, *args): return _DataModel.Stream_setSensorSerialNumber(self, *args)
    def sensorSerialNumber(self): return _DataModel.Stream_sensorSerialNumber(self)
    def setSensorChannel(self, *args): return _DataModel.Stream_setSensorChannel(self, *args)
    def sensorChannel(self): return _DataModel.Stream_sensorChannel(self)
    def setClockSerialNumber(self, *args): return _DataModel.Stream_setClockSerialNumber(self, *args)
    def clockSerialNumber(self): return _DataModel.Stream_clockSerialNumber(self)
    def setSampleRateNumerator(self, *args): return _DataModel.Stream_setSampleRateNumerator(self, *args)
    def sampleRateNumerator(self): return _DataModel.Stream_sampleRateNumerator(self)
    def setSampleRateDenominator(self, *args): return _DataModel.Stream_setSampleRateDenominator(self, *args)
    def sampleRateDenominator(self): return _DataModel.Stream_sampleRateDenominator(self)
    def setDepth(self, *args): return _DataModel.Stream_setDepth(self, *args)
    def depth(self): return _DataModel.Stream_depth(self)
    def setAzimuth(self, *args): return _DataModel.Stream_setAzimuth(self, *args)
    def azimuth(self): return _DataModel.Stream_azimuth(self)
    def setDip(self, *args): return _DataModel.Stream_setDip(self, *args)
    def dip(self): return _DataModel.Stream_dip(self)
    def setGain(self, *args): return _DataModel.Stream_setGain(self, *args)
    def gain(self): return _DataModel.Stream_gain(self)
    def setGainFrequency(self, *args): return _DataModel.Stream_setGainFrequency(self, *args)
    def gainFrequency(self): return _DataModel.Stream_gainFrequency(self)
    def setGainUnit(self, *args): return _DataModel.Stream_setGainUnit(self, *args)
    def gainUnit(self): return _DataModel.Stream_gainUnit(self)
    def setFormat(self, *args): return _DataModel.Stream_setFormat(self, *args)
    def format(self): return _DataModel.Stream_format(self)
    def setFlags(self, *args): return _DataModel.Stream_setFlags(self, *args)
    def flags(self): return _DataModel.Stream_flags(self)
    def setRestricted(self, *args): return _DataModel.Stream_setRestricted(self, *args)
    def restricted(self): return _DataModel.Stream_restricted(self)
    def setShared(self, *args): return _DataModel.Stream_setShared(self, *args)
    def shared(self): return _DataModel.Stream_shared(self)
    def index(self): return _DataModel.Stream_index(self)
    def equalIndex(self, *args): return _DataModel.Stream_equalIndex(self, *args)
    def sensorLocation(self): return _DataModel.Stream_sensorLocation(self)
    def assign(self, *args): return _DataModel.Stream_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Stream_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Stream_detachFrom(self, *args)
    def detach(self): return _DataModel.Stream_detach(self)
    def clone(self): return _DataModel.Stream_clone(self)
    def accept(self, *args): return _DataModel.Stream_accept(self, *args)
Stream_swigregister = _DataModel.Stream_swigregister
Stream_swigregister(Stream)

def Stream_ClassName():
  return _DataModel.Stream_ClassName()
Stream_ClassName = _DataModel.Stream_ClassName

def Stream_TypeInfo():
  return _DataModel.Stream_TypeInfo()
Stream_TypeInfo = _DataModel.Stream_TypeInfo

def Stream_Cast(*args):
  return _DataModel.Stream_Cast(*args)
Stream_Cast = _DataModel.Stream_Cast

def Stream_ConstCast(*args):
  return _DataModel.Stream_ConstCast(*args)
Stream_ConstCast = _DataModel.Stream_ConstCast

class SensorLocationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorLocationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorLocationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_SensorLocationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.SensorLocationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SensorLocationIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.SensorLocationIndex_code_set
    __swig_getmethods__["code"] = _DataModel.SensorLocationIndex_code_get
    if _newclass:code = _swig_property(_DataModel.SensorLocationIndex_code_get, _DataModel.SensorLocationIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.SensorLocationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.SensorLocationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.SensorLocationIndex_start_get, _DataModel.SensorLocationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_SensorLocationIndex
    __del__ = lambda self : None;
SensorLocationIndex_swigregister = _DataModel.SensorLocationIndex_swigregister
SensorLocationIndex_swigregister(SensorLocationIndex)

class SensorLocation(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SensorLocation, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.SensorLocation_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.SensorLocation_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.SensorLocation_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.SensorLocation_TypeInfo)
    def className(self): return _DataModel.SensorLocation_className(self)
    def typeInfo(self): return _DataModel.SensorLocation_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.SensorLocation_Cast
    if _newclass:Cast = staticmethod(_DataModel.SensorLocation_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.SensorLocation_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.SensorLocation_ConstCast)
    def serialize(self, *args): return _DataModel.SensorLocation_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_SensorLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SensorLocation
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.SensorLocation_Create
    if _newclass:Create = staticmethod(_DataModel.SensorLocation_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.SensorLocation_Find
    if _newclass:Find = staticmethod(_DataModel.SensorLocation_Find)
    def __eq__(self, *args): return _DataModel.SensorLocation___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SensorLocation___ne__(self, *args)
    def equal(self, *args): return _DataModel.SensorLocation_equal(self, *args)
    def setCode(self, *args): return _DataModel.SensorLocation_setCode(self, *args)
    def code(self): return _DataModel.SensorLocation_code(self)
    def setStart(self, *args): return _DataModel.SensorLocation_setStart(self, *args)
    def start(self): return _DataModel.SensorLocation_start(self)
    def setEnd(self, *args): return _DataModel.SensorLocation_setEnd(self, *args)
    def end(self): return _DataModel.SensorLocation_end(self)
    def setLatitude(self, *args): return _DataModel.SensorLocation_setLatitude(self, *args)
    def latitude(self): return _DataModel.SensorLocation_latitude(self)
    def setLongitude(self, *args): return _DataModel.SensorLocation_setLongitude(self, *args)
    def longitude(self): return _DataModel.SensorLocation_longitude(self)
    def setElevation(self, *args): return _DataModel.SensorLocation_setElevation(self, *args)
    def elevation(self): return _DataModel.SensorLocation_elevation(self)
    def index(self): return _DataModel.SensorLocation_index(self)
    def equalIndex(self, *args): return _DataModel.SensorLocation_equalIndex(self, *args)
    def add(self, *args): return _DataModel.SensorLocation_add(self, *args)
    def remove(self, *args): return _DataModel.SensorLocation_remove(self, *args)
    def removeAuxStream(self, *args): return _DataModel.SensorLocation_removeAuxStream(self, *args)
    def removeStream(self, *args): return _DataModel.SensorLocation_removeStream(self, *args)
    def auxStreamCount(self): return _DataModel.SensorLocation_auxStreamCount(self)
    def streamCount(self): return _DataModel.SensorLocation_streamCount(self)
    def auxStream(self, *args): return _DataModel.SensorLocation_auxStream(self, *args)
    def stream(self, *args): return _DataModel.SensorLocation_stream(self, *args)
    def station(self): return _DataModel.SensorLocation_station(self)
    def assign(self, *args): return _DataModel.SensorLocation_assign(self, *args)
    def attachTo(self, *args): return _DataModel.SensorLocation_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.SensorLocation_detachFrom(self, *args)
    def detach(self): return _DataModel.SensorLocation_detach(self)
    def clone(self): return _DataModel.SensorLocation_clone(self)
    def updateChild(self, *args): return _DataModel.SensorLocation_updateChild(self, *args)
    def accept(self, *args): return _DataModel.SensorLocation_accept(self, *args)
SensorLocation_swigregister = _DataModel.SensorLocation_swigregister
SensorLocation_swigregister(SensorLocation)

def SensorLocation_ClassName():
  return _DataModel.SensorLocation_ClassName()
SensorLocation_ClassName = _DataModel.SensorLocation_ClassName

def SensorLocation_TypeInfo():
  return _DataModel.SensorLocation_TypeInfo()
SensorLocation_TypeInfo = _DataModel.SensorLocation_TypeInfo

def SensorLocation_Cast(*args):
  return _DataModel.SensorLocation_Cast(*args)
SensorLocation_Cast = _DataModel.SensorLocation_Cast

def SensorLocation_ConstCast(*args):
  return _DataModel.SensorLocation_ConstCast(*args)
SensorLocation_ConstCast = _DataModel.SensorLocation_ConstCast

def SensorLocation_Create(*args):
  return _DataModel.SensorLocation_Create(*args)
SensorLocation_Create = _DataModel.SensorLocation_Create

def SensorLocation_Find(*args):
  return _DataModel.SensorLocation_Find(*args)
SensorLocation_Find = _DataModel.SensorLocation_Find

class StationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_StationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.StationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.StationIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StationIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StationIndex_code_get, _DataModel.StationIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.StationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.StationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.StationIndex_start_get, _DataModel.StationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_StationIndex
    __del__ = lambda self : None;
StationIndex_swigregister = _DataModel.StationIndex_swigregister
StationIndex_swigregister(StationIndex)

class Station(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Station, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Station, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Station_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Station_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Station_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Station_TypeInfo)
    def className(self): return _DataModel.Station_className(self)
    def typeInfo(self): return _DataModel.Station_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Station_Cast
    if _newclass:Cast = staticmethod(_DataModel.Station_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Station_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Station_ConstCast)
    def serialize(self, *args): return _DataModel.Station_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Station(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Station
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Station_Create
    if _newclass:Create = staticmethod(_DataModel.Station_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Station_Find
    if _newclass:Find = staticmethod(_DataModel.Station_Find)
    def __eq__(self, *args): return _DataModel.Station___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Station___ne__(self, *args)
    def equal(self, *args): return _DataModel.Station_equal(self, *args)
    def setCode(self, *args): return _DataModel.Station_setCode(self, *args)
    def code(self): return _DataModel.Station_code(self)
    def setStart(self, *args): return _DataModel.Station_setStart(self, *args)
    def start(self): return _DataModel.Station_start(self)
    def setEnd(self, *args): return _DataModel.Station_setEnd(self, *args)
    def end(self): return _DataModel.Station_end(self)
    def setDescription(self, *args): return _DataModel.Station_setDescription(self, *args)
    def description(self): return _DataModel.Station_description(self)
    def setLatitude(self, *args): return _DataModel.Station_setLatitude(self, *args)
    def latitude(self): return _DataModel.Station_latitude(self)
    def setLongitude(self, *args): return _DataModel.Station_setLongitude(self, *args)
    def longitude(self): return _DataModel.Station_longitude(self)
    def setElevation(self, *args): return _DataModel.Station_setElevation(self, *args)
    def elevation(self): return _DataModel.Station_elevation(self)
    def setPlace(self, *args): return _DataModel.Station_setPlace(self, *args)
    def place(self): return _DataModel.Station_place(self)
    def setCountry(self, *args): return _DataModel.Station_setCountry(self, *args)
    def country(self): return _DataModel.Station_country(self)
    def setAffiliation(self, *args): return _DataModel.Station_setAffiliation(self, *args)
    def affiliation(self): return _DataModel.Station_affiliation(self)
    def setType(self, *args): return _DataModel.Station_setType(self, *args)
    def type(self): return _DataModel.Station_type(self)
    def setArchive(self, *args): return _DataModel.Station_setArchive(self, *args)
    def archive(self): return _DataModel.Station_archive(self)
    def setArchiveNetworkCode(self, *args): return _DataModel.Station_setArchiveNetworkCode(self, *args)
    def archiveNetworkCode(self): return _DataModel.Station_archiveNetworkCode(self)
    def setRestricted(self, *args): return _DataModel.Station_setRestricted(self, *args)
    def restricted(self): return _DataModel.Station_restricted(self)
    def setShared(self, *args): return _DataModel.Station_setShared(self, *args)
    def shared(self): return _DataModel.Station_shared(self)
    def setRemark(self, *args): return _DataModel.Station_setRemark(self, *args)
    def remark(self, *args): return _DataModel.Station_remark(self, *args)
    def index(self): return _DataModel.Station_index(self)
    def equalIndex(self, *args): return _DataModel.Station_equalIndex(self, *args)
    def add(self, *args): return _DataModel.Station_add(self, *args)
    def remove(self, *args): return _DataModel.Station_remove(self, *args)
    def removeSensorLocation(self, *args): return _DataModel.Station_removeSensorLocation(self, *args)
    def sensorLocationCount(self): return _DataModel.Station_sensorLocationCount(self)
    def sensorLocation(self, *args): return _DataModel.Station_sensorLocation(self, *args)
    def findSensorLocation(self, *args): return _DataModel.Station_findSensorLocation(self, *args)
    def network(self): return _DataModel.Station_network(self)
    def assign(self, *args): return _DataModel.Station_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Station_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Station_detachFrom(self, *args)
    def detach(self): return _DataModel.Station_detach(self)
    def clone(self): return _DataModel.Station_clone(self)
    def updateChild(self, *args): return _DataModel.Station_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Station_accept(self, *args)
Station_swigregister = _DataModel.Station_swigregister
Station_swigregister(Station)

def Station_ClassName():
  return _DataModel.Station_ClassName()
Station_ClassName = _DataModel.Station_ClassName

def Station_TypeInfo():
  return _DataModel.Station_TypeInfo()
Station_TypeInfo = _DataModel.Station_TypeInfo

def Station_Cast(*args):
  return _DataModel.Station_Cast(*args)
Station_Cast = _DataModel.Station_Cast

def Station_ConstCast(*args):
  return _DataModel.Station_ConstCast(*args)
Station_ConstCast = _DataModel.Station_ConstCast

def Station_Create(*args):
  return _DataModel.Station_Create(*args)
Station_Create = _DataModel.Station_Create

def Station_Find(*args):
  return _DataModel.Station_Find(*args)
Station_Find = _DataModel.Station_Find

class NetworkIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_NetworkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.NetworkIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.NetworkIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.NetworkIndex_code_set
    __swig_getmethods__["code"] = _DataModel.NetworkIndex_code_get
    if _newclass:code = _swig_property(_DataModel.NetworkIndex_code_get, _DataModel.NetworkIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.NetworkIndex_start_set
    __swig_getmethods__["start"] = _DataModel.NetworkIndex_start_get
    if _newclass:start = _swig_property(_DataModel.NetworkIndex_start_get, _DataModel.NetworkIndex_start_set)
    __swig_destroy__ = _DataModel.delete_NetworkIndex
    __del__ = lambda self : None;
NetworkIndex_swigregister = _DataModel.NetworkIndex_swigregister
NetworkIndex_swigregister(NetworkIndex)

class Network(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Network_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Network_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Network_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Network_TypeInfo)
    def className(self): return _DataModel.Network_className(self)
    def typeInfo(self): return _DataModel.Network_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Network_Cast
    if _newclass:Cast = staticmethod(_DataModel.Network_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Network_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Network_ConstCast)
    def serialize(self, *args): return _DataModel.Network_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Network
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Network_Create
    if _newclass:Create = staticmethod(_DataModel.Network_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Network_Find
    if _newclass:Find = staticmethod(_DataModel.Network_Find)
    def __eq__(self, *args): return _DataModel.Network___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Network___ne__(self, *args)
    def equal(self, *args): return _DataModel.Network_equal(self, *args)
    def setCode(self, *args): return _DataModel.Network_setCode(self, *args)
    def code(self): return _DataModel.Network_code(self)
    def setStart(self, *args): return _DataModel.Network_setStart(self, *args)
    def start(self): return _DataModel.Network_start(self)
    def setEnd(self, *args): return _DataModel.Network_setEnd(self, *args)
    def end(self): return _DataModel.Network_end(self)
    def setDescription(self, *args): return _DataModel.Network_setDescription(self, *args)
    def description(self): return _DataModel.Network_description(self)
    def setInstitutions(self, *args): return _DataModel.Network_setInstitutions(self, *args)
    def institutions(self): return _DataModel.Network_institutions(self)
    def setRegion(self, *args): return _DataModel.Network_setRegion(self, *args)
    def region(self): return _DataModel.Network_region(self)
    def setType(self, *args): return _DataModel.Network_setType(self, *args)
    def type(self): return _DataModel.Network_type(self)
    def setNetClass(self, *args): return _DataModel.Network_setNetClass(self, *args)
    def netClass(self): return _DataModel.Network_netClass(self)
    def setArchive(self, *args): return _DataModel.Network_setArchive(self, *args)
    def archive(self): return _DataModel.Network_archive(self)
    def setRestricted(self, *args): return _DataModel.Network_setRestricted(self, *args)
    def restricted(self): return _DataModel.Network_restricted(self)
    def setShared(self, *args): return _DataModel.Network_setShared(self, *args)
    def shared(self): return _DataModel.Network_shared(self)
    def setRemark(self, *args): return _DataModel.Network_setRemark(self, *args)
    def remark(self, *args): return _DataModel.Network_remark(self, *args)
    def index(self): return _DataModel.Network_index(self)
    def equalIndex(self, *args): return _DataModel.Network_equalIndex(self, *args)
    def add(self, *args): return _DataModel.Network_add(self, *args)
    def remove(self, *args): return _DataModel.Network_remove(self, *args)
    def removeStation(self, *args): return _DataModel.Network_removeStation(self, *args)
    def stationCount(self): return _DataModel.Network_stationCount(self)
    def station(self, *args): return _DataModel.Network_station(self, *args)
    def findStation(self, *args): return _DataModel.Network_findStation(self, *args)
    def inventory(self): return _DataModel.Network_inventory(self)
    def assign(self, *args): return _DataModel.Network_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Network_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Network_detachFrom(self, *args)
    def detach(self): return _DataModel.Network_detach(self)
    def clone(self): return _DataModel.Network_clone(self)
    def updateChild(self, *args): return _DataModel.Network_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Network_accept(self, *args)
Network_swigregister = _DataModel.Network_swigregister
Network_swigregister(Network)

def Network_ClassName():
  return _DataModel.Network_ClassName()
Network_ClassName = _DataModel.Network_ClassName

def Network_TypeInfo():
  return _DataModel.Network_TypeInfo()
Network_TypeInfo = _DataModel.Network_TypeInfo

def Network_Cast(*args):
  return _DataModel.Network_Cast(*args)
Network_Cast = _DataModel.Network_Cast

def Network_ConstCast(*args):
  return _DataModel.Network_ConstCast(*args)
Network_ConstCast = _DataModel.Network_ConstCast

def Network_Create(*args):
  return _DataModel.Network_Create(*args)
Network_Create = _DataModel.Network_Create

def Network_Find(*args):
  return _DataModel.Network_Find(*args)
Network_Find = _DataModel.Network_Find

class Inventory(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inventory, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Inventory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Inventory_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Inventory_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Inventory_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Inventory_TypeInfo)
    def className(self): return _DataModel.Inventory_className(self)
    def typeInfo(self): return _DataModel.Inventory_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Inventory_Cast
    if _newclass:Cast = staticmethod(_DataModel.Inventory_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Inventory_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Inventory_ConstCast)
    def serialize(self, *args): return _DataModel.Inventory_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Inventory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Inventory
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Inventory___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Inventory___ne__(self, *args)
    def equal(self, *args): return _DataModel.Inventory_equal(self, *args)
    def add(self, *args): return _DataModel.Inventory_add(self, *args)
    def remove(self, *args): return _DataModel.Inventory_remove(self, *args)
    def removeStationGroup(self, *args): return _DataModel.Inventory_removeStationGroup(self, *args)
    def removeAuxDevice(self, *args): return _DataModel.Inventory_removeAuxDevice(self, *args)
    def removeSensor(self, *args): return _DataModel.Inventory_removeSensor(self, *args)
    def removeDatalogger(self, *args): return _DataModel.Inventory_removeDatalogger(self, *args)
    def removeResponsePAZ(self, *args): return _DataModel.Inventory_removeResponsePAZ(self, *args)
    def removeResponseFIR(self, *args): return _DataModel.Inventory_removeResponseFIR(self, *args)
    def removeResponsePolynomial(self, *args): return _DataModel.Inventory_removeResponsePolynomial(self, *args)
    def removeNetwork(self, *args): return _DataModel.Inventory_removeNetwork(self, *args)
    def stationGroupCount(self): return _DataModel.Inventory_stationGroupCount(self)
    def auxDeviceCount(self): return _DataModel.Inventory_auxDeviceCount(self)
    def sensorCount(self): return _DataModel.Inventory_sensorCount(self)
    def dataloggerCount(self): return _DataModel.Inventory_dataloggerCount(self)
    def responsePAZCount(self): return _DataModel.Inventory_responsePAZCount(self)
    def responseFIRCount(self): return _DataModel.Inventory_responseFIRCount(self)
    def responsePolynomialCount(self): return _DataModel.Inventory_responsePolynomialCount(self)
    def networkCount(self): return _DataModel.Inventory_networkCount(self)
    def stationGroup(self, *args): return _DataModel.Inventory_stationGroup(self, *args)
    def auxDevice(self, *args): return _DataModel.Inventory_auxDevice(self, *args)
    def sensor(self, *args): return _DataModel.Inventory_sensor(self, *args)
    def datalogger(self, *args): return _DataModel.Inventory_datalogger(self, *args)
    def responsePAZ(self, *args): return _DataModel.Inventory_responsePAZ(self, *args)
    def responseFIR(self, *args): return _DataModel.Inventory_responseFIR(self, *args)
    def responsePolynomial(self, *args): return _DataModel.Inventory_responsePolynomial(self, *args)
    def network(self, *args): return _DataModel.Inventory_network(self, *args)
    def findStationGroup(self, *args): return _DataModel.Inventory_findStationGroup(self, *args)
    def findAuxDevice(self, *args): return _DataModel.Inventory_findAuxDevice(self, *args)
    def findSensor(self, *args): return _DataModel.Inventory_findSensor(self, *args)
    def findDatalogger(self, *args): return _DataModel.Inventory_findDatalogger(self, *args)
    def findResponsePAZ(self, *args): return _DataModel.Inventory_findResponsePAZ(self, *args)
    def findResponseFIR(self, *args): return _DataModel.Inventory_findResponseFIR(self, *args)
    def findResponsePolynomial(self, *args): return _DataModel.Inventory_findResponsePolynomial(self, *args)
    def findNetwork(self, *args): return _DataModel.Inventory_findNetwork(self, *args)
    def assign(self, *args): return _DataModel.Inventory_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Inventory_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Inventory_detachFrom(self, *args)
    def detach(self): return _DataModel.Inventory_detach(self)
    def clone(self): return _DataModel.Inventory_clone(self)
    def updateChild(self, *args): return _DataModel.Inventory_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Inventory_accept(self, *args)
Inventory_swigregister = _DataModel.Inventory_swigregister
Inventory_swigregister(Inventory)

def Inventory_ClassName():
  return _DataModel.Inventory_ClassName()
Inventory_ClassName = _DataModel.Inventory_ClassName

def Inventory_TypeInfo():
  return _DataModel.Inventory_TypeInfo()
Inventory_TypeInfo = _DataModel.Inventory_TypeInfo

def Inventory_Cast(*args):
  return _DataModel.Inventory_Cast(*args)
Inventory_Cast = _DataModel.Inventory_Cast

def Inventory_ConstCast(*args):
  return _DataModel.Inventory_ConstCast(*args)
Inventory_ConstCast = _DataModel.Inventory_ConstCast

class EventDescriptionIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDescriptionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventDescriptionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_EventDescriptionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.EventDescriptionIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.EventDescriptionIndex___ne__(self, *args)
    __swig_setmethods__["type"] = _DataModel.EventDescriptionIndex_type_set
    __swig_getmethods__["type"] = _DataModel.EventDescriptionIndex_type_get
    if _newclass:type = _swig_property(_DataModel.EventDescriptionIndex_type_get, _DataModel.EventDescriptionIndex_type_set)
    __swig_destroy__ = _DataModel.delete_EventDescriptionIndex
    __del__ = lambda self : None;
EventDescriptionIndex_swigregister = _DataModel.EventDescriptionIndex_swigregister
EventDescriptionIndex_swigregister(EventDescriptionIndex)

class EventDescription(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventDescription, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.EventDescription_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.EventDescription_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.EventDescription_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.EventDescription_TypeInfo)
    def className(self): return _DataModel.EventDescription_className(self)
    def typeInfo(self): return _DataModel.EventDescription_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.EventDescription_Cast
    if _newclass:Cast = staticmethod(_DataModel.EventDescription_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.EventDescription_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.EventDescription_ConstCast)
    def serialize(self, *args): return _DataModel.EventDescription_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_EventDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_EventDescription
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.EventDescription___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.EventDescription___ne__(self, *args)
    def equal(self, *args): return _DataModel.EventDescription_equal(self, *args)
    def setText(self, *args): return _DataModel.EventDescription_setText(self, *args)
    def text(self): return _DataModel.EventDescription_text(self)
    def setType(self, *args): return _DataModel.EventDescription_setType(self, *args)
    def type(self): return _DataModel.EventDescription_type(self)
    def index(self): return _DataModel.EventDescription_index(self)
    def equalIndex(self, *args): return _DataModel.EventDescription_equalIndex(self, *args)
    def event(self): return _DataModel.EventDescription_event(self)
    def assign(self, *args): return _DataModel.EventDescription_assign(self, *args)
    def attachTo(self, *args): return _DataModel.EventDescription_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.EventDescription_detachFrom(self, *args)
    def detach(self): return _DataModel.EventDescription_detach(self)
    def clone(self): return _DataModel.EventDescription_clone(self)
    def accept(self, *args): return _DataModel.EventDescription_accept(self, *args)
EventDescription_swigregister = _DataModel.EventDescription_swigregister
EventDescription_swigregister(EventDescription)

def EventDescription_ClassName():
  return _DataModel.EventDescription_ClassName()
EventDescription_ClassName = _DataModel.EventDescription_ClassName

def EventDescription_TypeInfo():
  return _DataModel.EventDescription_TypeInfo()
EventDescription_TypeInfo = _DataModel.EventDescription_TypeInfo

def EventDescription_Cast(*args):
  return _DataModel.EventDescription_Cast(*args)
EventDescription_Cast = _DataModel.EventDescription_Cast

def EventDescription_ConstCast(*args):
  return _DataModel.EventDescription_ConstCast(*args)
EventDescription_ConstCast = _DataModel.EventDescription_ConstCast

class DataUsed(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataUsed, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataUsed, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.DataUsed_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.DataUsed_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.DataUsed_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.DataUsed_TypeInfo)
    def className(self): return _DataModel.DataUsed_className(self)
    def typeInfo(self): return _DataModel.DataUsed_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.DataUsed_Cast
    if _newclass:Cast = staticmethod(_DataModel.DataUsed_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.DataUsed_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.DataUsed_ConstCast)
    def serialize(self, *args): return _DataModel.DataUsed_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_DataUsed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DataUsed
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.DataUsed___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.DataUsed___ne__(self, *args)
    def equal(self, *args): return _DataModel.DataUsed_equal(self, *args)
    def setWaveType(self, *args): return _DataModel.DataUsed_setWaveType(self, *args)
    def waveType(self): return _DataModel.DataUsed_waveType(self)
    def setStationCount(self, *args): return _DataModel.DataUsed_setStationCount(self, *args)
    def stationCount(self): return _DataModel.DataUsed_stationCount(self)
    def setComponentCount(self, *args): return _DataModel.DataUsed_setComponentCount(self, *args)
    def componentCount(self): return _DataModel.DataUsed_componentCount(self)
    def setShortestPeriod(self, *args): return _DataModel.DataUsed_setShortestPeriod(self, *args)
    def shortestPeriod(self): return _DataModel.DataUsed_shortestPeriod(self)
    def momentTensor(self): return _DataModel.DataUsed_momentTensor(self)
    def assign(self, *args): return _DataModel.DataUsed_assign(self, *args)
    def attachTo(self, *args): return _DataModel.DataUsed_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.DataUsed_detachFrom(self, *args)
    def detach(self): return _DataModel.DataUsed_detach(self)
    def clone(self): return _DataModel.DataUsed_clone(self)
    def accept(self, *args): return _DataModel.DataUsed_accept(self, *args)
DataUsed_swigregister = _DataModel.DataUsed_swigregister
DataUsed_swigregister(DataUsed)

def DataUsed_ClassName():
  return _DataModel.DataUsed_ClassName()
DataUsed_ClassName = _DataModel.DataUsed_ClassName

def DataUsed_TypeInfo():
  return _DataModel.DataUsed_TypeInfo()
DataUsed_TypeInfo = _DataModel.DataUsed_TypeInfo

def DataUsed_Cast(*args):
  return _DataModel.DataUsed_Cast(*args)
DataUsed_Cast = _DataModel.DataUsed_Cast

def DataUsed_ConstCast(*args):
  return _DataModel.DataUsed_ConstCast(*args)
DataUsed_ConstCast = _DataModel.DataUsed_ConstCast

class CompositeTime(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeTime, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.CompositeTime_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.CompositeTime_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.CompositeTime_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.CompositeTime_TypeInfo)
    def className(self): return _DataModel.CompositeTime_className(self)
    def typeInfo(self): return _DataModel.CompositeTime_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.CompositeTime_Cast
    if _newclass:Cast = staticmethod(_DataModel.CompositeTime_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.CompositeTime_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.CompositeTime_ConstCast)
    def serialize(self, *args): return _DataModel.CompositeTime_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_CompositeTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_CompositeTime
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.CompositeTime___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.CompositeTime___ne__(self, *args)
    def equal(self, *args): return _DataModel.CompositeTime_equal(self, *args)
    def setYear(self, *args): return _DataModel.CompositeTime_setYear(self, *args)
    def year(self, *args): return _DataModel.CompositeTime_year(self, *args)
    def setMonth(self, *args): return _DataModel.CompositeTime_setMonth(self, *args)
    def month(self, *args): return _DataModel.CompositeTime_month(self, *args)
    def setDay(self, *args): return _DataModel.CompositeTime_setDay(self, *args)
    def day(self, *args): return _DataModel.CompositeTime_day(self, *args)
    def setHour(self, *args): return _DataModel.CompositeTime_setHour(self, *args)
    def hour(self, *args): return _DataModel.CompositeTime_hour(self, *args)
    def setMinute(self, *args): return _DataModel.CompositeTime_setMinute(self, *args)
    def minute(self, *args): return _DataModel.CompositeTime_minute(self, *args)
    def setSecond(self, *args): return _DataModel.CompositeTime_setSecond(self, *args)
    def second(self, *args): return _DataModel.CompositeTime_second(self, *args)
    def origin(self): return _DataModel.CompositeTime_origin(self)
    def assign(self, *args): return _DataModel.CompositeTime_assign(self, *args)
    def attachTo(self, *args): return _DataModel.CompositeTime_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.CompositeTime_detachFrom(self, *args)
    def detach(self): return _DataModel.CompositeTime_detach(self)
    def clone(self): return _DataModel.CompositeTime_clone(self)
    def accept(self, *args): return _DataModel.CompositeTime_accept(self, *args)
CompositeTime_swigregister = _DataModel.CompositeTime_swigregister
CompositeTime_swigregister(CompositeTime)

def CompositeTime_ClassName():
  return _DataModel.CompositeTime_ClassName()
CompositeTime_ClassName = _DataModel.CompositeTime_ClassName

def CompositeTime_TypeInfo():
  return _DataModel.CompositeTime_TypeInfo()
CompositeTime_TypeInfo = _DataModel.CompositeTime_TypeInfo

def CompositeTime_Cast(*args):
  return _DataModel.CompositeTime_Cast(*args)
CompositeTime_Cast = _DataModel.CompositeTime_Cast

def CompositeTime_ConstCast(*args):
  return _DataModel.CompositeTime_ConstCast(*args)
CompositeTime_ConstCast = _DataModel.CompositeTime_ConstCast

class PickReferenceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PickReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_PickReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.PickReferenceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.PickReferenceIndex___ne__(self, *args)
    __swig_setmethods__["pickID"] = _DataModel.PickReferenceIndex_pickID_set
    __swig_getmethods__["pickID"] = _DataModel.PickReferenceIndex_pickID_get
    if _newclass:pickID = _swig_property(_DataModel.PickReferenceIndex_pickID_get, _DataModel.PickReferenceIndex_pickID_set)
    __swig_destroy__ = _DataModel.delete_PickReferenceIndex
    __del__ = lambda self : None;
PickReferenceIndex_swigregister = _DataModel.PickReferenceIndex_swigregister
PickReferenceIndex_swigregister(PickReferenceIndex)

class PickReference(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickReference, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.PickReference_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.PickReference_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.PickReference_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.PickReference_TypeInfo)
    def className(self): return _DataModel.PickReference_className(self)
    def typeInfo(self): return _DataModel.PickReference_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.PickReference_Cast
    if _newclass:Cast = staticmethod(_DataModel.PickReference_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.PickReference_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.PickReference_ConstCast)
    def serialize(self, *args): return _DataModel.PickReference_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_PickReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_PickReference
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.PickReference___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.PickReference___ne__(self, *args)
    def equal(self, *args): return _DataModel.PickReference_equal(self, *args)
    def setPickID(self, *args): return _DataModel.PickReference_setPickID(self, *args)
    def pickID(self): return _DataModel.PickReference_pickID(self)
    def index(self): return _DataModel.PickReference_index(self)
    def equalIndex(self, *args): return _DataModel.PickReference_equalIndex(self, *args)
    def reading(self): return _DataModel.PickReference_reading(self)
    def assign(self, *args): return _DataModel.PickReference_assign(self, *args)
    def attachTo(self, *args): return _DataModel.PickReference_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.PickReference_detachFrom(self, *args)
    def detach(self): return _DataModel.PickReference_detach(self)
    def clone(self): return _DataModel.PickReference_clone(self)
    def accept(self, *args): return _DataModel.PickReference_accept(self, *args)
PickReference_swigregister = _DataModel.PickReference_swigregister
PickReference_swigregister(PickReference)

def PickReference_ClassName():
  return _DataModel.PickReference_ClassName()
PickReference_ClassName = _DataModel.PickReference_ClassName

def PickReference_TypeInfo():
  return _DataModel.PickReference_TypeInfo()
PickReference_TypeInfo = _DataModel.PickReference_TypeInfo

def PickReference_Cast(*args):
  return _DataModel.PickReference_Cast(*args)
PickReference_Cast = _DataModel.PickReference_Cast

def PickReference_ConstCast(*args):
  return _DataModel.PickReference_ConstCast(*args)
PickReference_ConstCast = _DataModel.PickReference_ConstCast

class AmplitudeReferenceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplitudeReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AmplitudeReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_AmplitudeReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.AmplitudeReferenceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AmplitudeReferenceIndex___ne__(self, *args)
    __swig_setmethods__["amplitudeID"] = _DataModel.AmplitudeReferenceIndex_amplitudeID_set
    __swig_getmethods__["amplitudeID"] = _DataModel.AmplitudeReferenceIndex_amplitudeID_get
    if _newclass:amplitudeID = _swig_property(_DataModel.AmplitudeReferenceIndex_amplitudeID_get, _DataModel.AmplitudeReferenceIndex_amplitudeID_set)
    __swig_destroy__ = _DataModel.delete_AmplitudeReferenceIndex
    __del__ = lambda self : None;
AmplitudeReferenceIndex_swigregister = _DataModel.AmplitudeReferenceIndex_swigregister
AmplitudeReferenceIndex_swigregister(AmplitudeReferenceIndex)

class AmplitudeReference(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplitudeReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmplitudeReference, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.AmplitudeReference_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.AmplitudeReference_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.AmplitudeReference_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.AmplitudeReference_TypeInfo)
    def className(self): return _DataModel.AmplitudeReference_className(self)
    def typeInfo(self): return _DataModel.AmplitudeReference_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.AmplitudeReference_Cast
    if _newclass:Cast = staticmethod(_DataModel.AmplitudeReference_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.AmplitudeReference_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.AmplitudeReference_ConstCast)
    def serialize(self, *args): return _DataModel.AmplitudeReference_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_AmplitudeReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AmplitudeReference
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.AmplitudeReference___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AmplitudeReference___ne__(self, *args)
    def equal(self, *args): return _DataModel.AmplitudeReference_equal(self, *args)
    def setAmplitudeID(self, *args): return _DataModel.AmplitudeReference_setAmplitudeID(self, *args)
    def amplitudeID(self): return _DataModel.AmplitudeReference_amplitudeID(self)
    def index(self): return _DataModel.AmplitudeReference_index(self)
    def equalIndex(self, *args): return _DataModel.AmplitudeReference_equalIndex(self, *args)
    def reading(self): return _DataModel.AmplitudeReference_reading(self)
    def assign(self, *args): return _DataModel.AmplitudeReference_assign(self, *args)
    def attachTo(self, *args): return _DataModel.AmplitudeReference_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.AmplitudeReference_detachFrom(self, *args)
    def detach(self): return _DataModel.AmplitudeReference_detach(self)
    def clone(self): return _DataModel.AmplitudeReference_clone(self)
    def accept(self, *args): return _DataModel.AmplitudeReference_accept(self, *args)
AmplitudeReference_swigregister = _DataModel.AmplitudeReference_swigregister
AmplitudeReference_swigregister(AmplitudeReference)

def AmplitudeReference_ClassName():
  return _DataModel.AmplitudeReference_ClassName()
AmplitudeReference_ClassName = _DataModel.AmplitudeReference_ClassName

def AmplitudeReference_TypeInfo():
  return _DataModel.AmplitudeReference_TypeInfo()
AmplitudeReference_TypeInfo = _DataModel.AmplitudeReference_TypeInfo

def AmplitudeReference_Cast(*args):
  return _DataModel.AmplitudeReference_Cast(*args)
AmplitudeReference_Cast = _DataModel.AmplitudeReference_Cast

def AmplitudeReference_ConstCast(*args):
  return _DataModel.AmplitudeReference_ConstCast(*args)
AmplitudeReference_ConstCast = _DataModel.AmplitudeReference_ConstCast

class Reading(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reading, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reading, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Reading_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Reading_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Reading_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Reading_TypeInfo)
    def className(self): return _DataModel.Reading_className(self)
    def typeInfo(self): return _DataModel.Reading_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Reading_Cast
    if _newclass:Cast = staticmethod(_DataModel.Reading_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Reading_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Reading_ConstCast)
    def serialize(self, *args): return _DataModel.Reading_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Reading(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Reading
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Reading_Create
    if _newclass:Create = staticmethod(_DataModel.Reading_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Reading_Find
    if _newclass:Find = staticmethod(_DataModel.Reading_Find)
    def __eq__(self, *args): return _DataModel.Reading___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Reading___ne__(self, *args)
    def equal(self, *args): return _DataModel.Reading_equal(self, *args)
    def add(self, *args): return _DataModel.Reading_add(self, *args)
    def remove(self, *args): return _DataModel.Reading_remove(self, *args)
    def removePickReference(self, *args): return _DataModel.Reading_removePickReference(self, *args)
    def removeAmplitudeReference(self, *args): return _DataModel.Reading_removeAmplitudeReference(self, *args)
    def pickReferenceCount(self): return _DataModel.Reading_pickReferenceCount(self)
    def amplitudeReferenceCount(self): return _DataModel.Reading_amplitudeReferenceCount(self)
    def pickReference(self, *args): return _DataModel.Reading_pickReference(self, *args)
    def amplitudeReference(self, *args): return _DataModel.Reading_amplitudeReference(self, *args)
    def eventParameters(self): return _DataModel.Reading_eventParameters(self)
    def assign(self, *args): return _DataModel.Reading_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Reading_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Reading_detachFrom(self, *args)
    def detach(self): return _DataModel.Reading_detach(self)
    def clone(self): return _DataModel.Reading_clone(self)
    def updateChild(self, *args): return _DataModel.Reading_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Reading_accept(self, *args)
Reading_swigregister = _DataModel.Reading_swigregister
Reading_swigregister(Reading)

def Reading_ClassName():
  return _DataModel.Reading_ClassName()
Reading_ClassName = _DataModel.Reading_ClassName

def Reading_TypeInfo():
  return _DataModel.Reading_TypeInfo()
Reading_TypeInfo = _DataModel.Reading_TypeInfo

def Reading_Cast(*args):
  return _DataModel.Reading_Cast(*args)
Reading_Cast = _DataModel.Reading_Cast

def Reading_ConstCast(*args):
  return _DataModel.Reading_ConstCast(*args)
Reading_ConstCast = _DataModel.Reading_ConstCast

def Reading_Create(*args):
  return _DataModel.Reading_Create(*args)
Reading_Create = _DataModel.Reading_Create

def Reading_Find(*args):
  return _DataModel.Reading_Find(*args)
Reading_Find = _DataModel.Reading_Find

class MomentTensorComponentContributionIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorComponentContributionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorComponentContributionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensorComponentContributionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.MomentTensorComponentContributionIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensorComponentContributionIndex___ne__(self, *args)
    __swig_setmethods__["phaseCode"] = _DataModel.MomentTensorComponentContributionIndex_phaseCode_set
    __swig_getmethods__["phaseCode"] = _DataModel.MomentTensorComponentContributionIndex_phaseCode_get
    if _newclass:phaseCode = _swig_property(_DataModel.MomentTensorComponentContributionIndex_phaseCode_get, _DataModel.MomentTensorComponentContributionIndex_phaseCode_set)
    __swig_setmethods__["component"] = _DataModel.MomentTensorComponentContributionIndex_component_set
    __swig_getmethods__["component"] = _DataModel.MomentTensorComponentContributionIndex_component_get
    if _newclass:component = _swig_property(_DataModel.MomentTensorComponentContributionIndex_component_get, _DataModel.MomentTensorComponentContributionIndex_component_set)
    __swig_destroy__ = _DataModel.delete_MomentTensorComponentContributionIndex
    __del__ = lambda self : None;
MomentTensorComponentContributionIndex_swigregister = _DataModel.MomentTensorComponentContributionIndex_swigregister
MomentTensorComponentContributionIndex_swigregister(MomentTensorComponentContributionIndex)

class MomentTensorComponentContribution(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorComponentContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorComponentContribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.MomentTensorComponentContribution_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.MomentTensorComponentContribution_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.MomentTensorComponentContribution_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.MomentTensorComponentContribution_TypeInfo)
    def className(self): return _DataModel.MomentTensorComponentContribution_className(self)
    def typeInfo(self): return _DataModel.MomentTensorComponentContribution_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.MomentTensorComponentContribution_Cast
    if _newclass:Cast = staticmethod(_DataModel.MomentTensorComponentContribution_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.MomentTensorComponentContribution_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.MomentTensorComponentContribution_ConstCast)
    def serialize(self, *args): return _DataModel.MomentTensorComponentContribution_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensorComponentContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorComponentContribution
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.MomentTensorComponentContribution___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensorComponentContribution___ne__(self, *args)
    def equal(self, *args): return _DataModel.MomentTensorComponentContribution_equal(self, *args)
    def setPhaseCode(self, *args): return _DataModel.MomentTensorComponentContribution_setPhaseCode(self, *args)
    def phaseCode(self): return _DataModel.MomentTensorComponentContribution_phaseCode(self)
    def setComponent(self, *args): return _DataModel.MomentTensorComponentContribution_setComponent(self, *args)
    def component(self): return _DataModel.MomentTensorComponentContribution_component(self)
    def setActive(self, *args): return _DataModel.MomentTensorComponentContribution_setActive(self, *args)
    def active(self): return _DataModel.MomentTensorComponentContribution_active(self)
    def setWeight(self, *args): return _DataModel.MomentTensorComponentContribution_setWeight(self, *args)
    def weight(self): return _DataModel.MomentTensorComponentContribution_weight(self)
    def setTimeShift(self, *args): return _DataModel.MomentTensorComponentContribution_setTimeShift(self, *args)
    def timeShift(self): return _DataModel.MomentTensorComponentContribution_timeShift(self)
    def setDataTimeWindow(self, *args): return _DataModel.MomentTensorComponentContribution_setDataTimeWindow(self, *args)
    def dataTimeWindow(self, *args): return _DataModel.MomentTensorComponentContribution_dataTimeWindow(self, *args)
    def setMisfit(self, *args): return _DataModel.MomentTensorComponentContribution_setMisfit(self, *args)
    def misfit(self): return _DataModel.MomentTensorComponentContribution_misfit(self)
    def setSnr(self, *args): return _DataModel.MomentTensorComponentContribution_setSnr(self, *args)
    def snr(self): return _DataModel.MomentTensorComponentContribution_snr(self)
    def index(self): return _DataModel.MomentTensorComponentContribution_index(self)
    def equalIndex(self, *args): return _DataModel.MomentTensorComponentContribution_equalIndex(self, *args)
    def momentTensorStationContribution(self): return _DataModel.MomentTensorComponentContribution_momentTensorStationContribution(self)
    def assign(self, *args): return _DataModel.MomentTensorComponentContribution_assign(self, *args)
    def attachTo(self, *args): return _DataModel.MomentTensorComponentContribution_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.MomentTensorComponentContribution_detachFrom(self, *args)
    def detach(self): return _DataModel.MomentTensorComponentContribution_detach(self)
    def clone(self): return _DataModel.MomentTensorComponentContribution_clone(self)
    def accept(self, *args): return _DataModel.MomentTensorComponentContribution_accept(self, *args)
MomentTensorComponentContribution_swigregister = _DataModel.MomentTensorComponentContribution_swigregister
MomentTensorComponentContribution_swigregister(MomentTensorComponentContribution)

def MomentTensorComponentContribution_ClassName():
  return _DataModel.MomentTensorComponentContribution_ClassName()
MomentTensorComponentContribution_ClassName = _DataModel.MomentTensorComponentContribution_ClassName

def MomentTensorComponentContribution_TypeInfo():
  return _DataModel.MomentTensorComponentContribution_TypeInfo()
MomentTensorComponentContribution_TypeInfo = _DataModel.MomentTensorComponentContribution_TypeInfo

def MomentTensorComponentContribution_Cast(*args):
  return _DataModel.MomentTensorComponentContribution_Cast(*args)
MomentTensorComponentContribution_Cast = _DataModel.MomentTensorComponentContribution_Cast

def MomentTensorComponentContribution_ConstCast(*args):
  return _DataModel.MomentTensorComponentContribution_ConstCast(*args)
MomentTensorComponentContribution_ConstCast = _DataModel.MomentTensorComponentContribution_ConstCast

class MomentTensorStationContribution(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorStationContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorStationContribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.MomentTensorStationContribution_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.MomentTensorStationContribution_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.MomentTensorStationContribution_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.MomentTensorStationContribution_TypeInfo)
    def className(self): return _DataModel.MomentTensorStationContribution_className(self)
    def typeInfo(self): return _DataModel.MomentTensorStationContribution_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.MomentTensorStationContribution_Cast
    if _newclass:Cast = staticmethod(_DataModel.MomentTensorStationContribution_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.MomentTensorStationContribution_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.MomentTensorStationContribution_ConstCast)
    def serialize(self, *args): return _DataModel.MomentTensorStationContribution_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensorStationContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorStationContribution
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.MomentTensorStationContribution_Create
    if _newclass:Create = staticmethod(_DataModel.MomentTensorStationContribution_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.MomentTensorStationContribution_Find
    if _newclass:Find = staticmethod(_DataModel.MomentTensorStationContribution_Find)
    def __eq__(self, *args): return _DataModel.MomentTensorStationContribution___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensorStationContribution___ne__(self, *args)
    def equal(self, *args): return _DataModel.MomentTensorStationContribution_equal(self, *args)
    def setActive(self, *args): return _DataModel.MomentTensorStationContribution_setActive(self, *args)
    def active(self): return _DataModel.MomentTensorStationContribution_active(self)
    def setWaveformID(self, *args): return _DataModel.MomentTensorStationContribution_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.MomentTensorStationContribution_waveformID(self, *args)
    def setWeight(self, *args): return _DataModel.MomentTensorStationContribution_setWeight(self, *args)
    def weight(self): return _DataModel.MomentTensorStationContribution_weight(self)
    def setTimeShift(self, *args): return _DataModel.MomentTensorStationContribution_setTimeShift(self, *args)
    def timeShift(self): return _DataModel.MomentTensorStationContribution_timeShift(self)
    def add(self, *args): return _DataModel.MomentTensorStationContribution_add(self, *args)
    def remove(self, *args): return _DataModel.MomentTensorStationContribution_remove(self, *args)
    def removeMomentTensorComponentContribution(self, *args): return _DataModel.MomentTensorStationContribution_removeMomentTensorComponentContribution(self, *args)
    def momentTensorComponentContributionCount(self): return _DataModel.MomentTensorStationContribution_momentTensorComponentContributionCount(self)
    def momentTensorComponentContribution(self, *args): return _DataModel.MomentTensorStationContribution_momentTensorComponentContribution(self, *args)
    def momentTensor(self): return _DataModel.MomentTensorStationContribution_momentTensor(self)
    def assign(self, *args): return _DataModel.MomentTensorStationContribution_assign(self, *args)
    def attachTo(self, *args): return _DataModel.MomentTensorStationContribution_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.MomentTensorStationContribution_detachFrom(self, *args)
    def detach(self): return _DataModel.MomentTensorStationContribution_detach(self)
    def clone(self): return _DataModel.MomentTensorStationContribution_clone(self)
    def updateChild(self, *args): return _DataModel.MomentTensorStationContribution_updateChild(self, *args)
    def accept(self, *args): return _DataModel.MomentTensorStationContribution_accept(self, *args)
MomentTensorStationContribution_swigregister = _DataModel.MomentTensorStationContribution_swigregister
MomentTensorStationContribution_swigregister(MomentTensorStationContribution)

def MomentTensorStationContribution_ClassName():
  return _DataModel.MomentTensorStationContribution_ClassName()
MomentTensorStationContribution_ClassName = _DataModel.MomentTensorStationContribution_ClassName

def MomentTensorStationContribution_TypeInfo():
  return _DataModel.MomentTensorStationContribution_TypeInfo()
MomentTensorStationContribution_TypeInfo = _DataModel.MomentTensorStationContribution_TypeInfo

def MomentTensorStationContribution_Cast(*args):
  return _DataModel.MomentTensorStationContribution_Cast(*args)
MomentTensorStationContribution_Cast = _DataModel.MomentTensorStationContribution_Cast

def MomentTensorStationContribution_ConstCast(*args):
  return _DataModel.MomentTensorStationContribution_ConstCast(*args)
MomentTensorStationContribution_ConstCast = _DataModel.MomentTensorStationContribution_ConstCast

def MomentTensorStationContribution_Create(*args):
  return _DataModel.MomentTensorStationContribution_Create(*args)
MomentTensorStationContribution_Create = _DataModel.MomentTensorStationContribution_Create

def MomentTensorStationContribution_Find(*args):
  return _DataModel.MomentTensorStationContribution_Find(*args)
MomentTensorStationContribution_Find = _DataModel.MomentTensorStationContribution_Find

class MomentTensorPhaseSettingIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorPhaseSettingIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorPhaseSettingIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensorPhaseSettingIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.MomentTensorPhaseSettingIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensorPhaseSettingIndex___ne__(self, *args)
    __swig_setmethods__["code"] = _DataModel.MomentTensorPhaseSettingIndex_code_set
    __swig_getmethods__["code"] = _DataModel.MomentTensorPhaseSettingIndex_code_get
    if _newclass:code = _swig_property(_DataModel.MomentTensorPhaseSettingIndex_code_get, _DataModel.MomentTensorPhaseSettingIndex_code_set)
    __swig_destroy__ = _DataModel.delete_MomentTensorPhaseSettingIndex
    __del__ = lambda self : None;
MomentTensorPhaseSettingIndex_swigregister = _DataModel.MomentTensorPhaseSettingIndex_swigregister
MomentTensorPhaseSettingIndex_swigregister(MomentTensorPhaseSettingIndex)

class MomentTensorPhaseSetting(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorPhaseSetting, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorPhaseSetting, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.MomentTensorPhaseSetting_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.MomentTensorPhaseSetting_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.MomentTensorPhaseSetting_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.MomentTensorPhaseSetting_TypeInfo)
    def className(self): return _DataModel.MomentTensorPhaseSetting_className(self)
    def typeInfo(self): return _DataModel.MomentTensorPhaseSetting_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.MomentTensorPhaseSetting_Cast
    if _newclass:Cast = staticmethod(_DataModel.MomentTensorPhaseSetting_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.MomentTensorPhaseSetting_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.MomentTensorPhaseSetting_ConstCast)
    def serialize(self, *args): return _DataModel.MomentTensorPhaseSetting_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensorPhaseSetting(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorPhaseSetting
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.MomentTensorPhaseSetting___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensorPhaseSetting___ne__(self, *args)
    def equal(self, *args): return _DataModel.MomentTensorPhaseSetting_equal(self, *args)
    def setCode(self, *args): return _DataModel.MomentTensorPhaseSetting_setCode(self, *args)
    def code(self): return _DataModel.MomentTensorPhaseSetting_code(self)
    def setLowerPeriod(self, *args): return _DataModel.MomentTensorPhaseSetting_setLowerPeriod(self, *args)
    def lowerPeriod(self): return _DataModel.MomentTensorPhaseSetting_lowerPeriod(self)
    def setUpperPeriod(self, *args): return _DataModel.MomentTensorPhaseSetting_setUpperPeriod(self, *args)
    def upperPeriod(self): return _DataModel.MomentTensorPhaseSetting_upperPeriod(self)
    def setMinimumSNR(self, *args): return _DataModel.MomentTensorPhaseSetting_setMinimumSNR(self, *args)
    def minimumSNR(self): return _DataModel.MomentTensorPhaseSetting_minimumSNR(self)
    def setMaximumTimeShift(self, *args): return _DataModel.MomentTensorPhaseSetting_setMaximumTimeShift(self, *args)
    def maximumTimeShift(self): return _DataModel.MomentTensorPhaseSetting_maximumTimeShift(self)
    def index(self): return _DataModel.MomentTensorPhaseSetting_index(self)
    def equalIndex(self, *args): return _DataModel.MomentTensorPhaseSetting_equalIndex(self, *args)
    def momentTensor(self): return _DataModel.MomentTensorPhaseSetting_momentTensor(self)
    def assign(self, *args): return _DataModel.MomentTensorPhaseSetting_assign(self, *args)
    def attachTo(self, *args): return _DataModel.MomentTensorPhaseSetting_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.MomentTensorPhaseSetting_detachFrom(self, *args)
    def detach(self): return _DataModel.MomentTensorPhaseSetting_detach(self)
    def clone(self): return _DataModel.MomentTensorPhaseSetting_clone(self)
    def accept(self, *args): return _DataModel.MomentTensorPhaseSetting_accept(self, *args)
MomentTensorPhaseSetting_swigregister = _DataModel.MomentTensorPhaseSetting_swigregister
MomentTensorPhaseSetting_swigregister(MomentTensorPhaseSetting)

def MomentTensorPhaseSetting_ClassName():
  return _DataModel.MomentTensorPhaseSetting_ClassName()
MomentTensorPhaseSetting_ClassName = _DataModel.MomentTensorPhaseSetting_ClassName

def MomentTensorPhaseSetting_TypeInfo():
  return _DataModel.MomentTensorPhaseSetting_TypeInfo()
MomentTensorPhaseSetting_TypeInfo = _DataModel.MomentTensorPhaseSetting_TypeInfo

def MomentTensorPhaseSetting_Cast(*args):
  return _DataModel.MomentTensorPhaseSetting_Cast(*args)
MomentTensorPhaseSetting_Cast = _DataModel.MomentTensorPhaseSetting_Cast

def MomentTensorPhaseSetting_ConstCast(*args):
  return _DataModel.MomentTensorPhaseSetting_ConstCast(*args)
MomentTensorPhaseSetting_ConstCast = _DataModel.MomentTensorPhaseSetting_ConstCast

class MomentTensor(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensor, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.MomentTensor_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.MomentTensor_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.MomentTensor_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.MomentTensor_TypeInfo)
    def className(self): return _DataModel.MomentTensor_className(self)
    def typeInfo(self): return _DataModel.MomentTensor_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.MomentTensor_Cast
    if _newclass:Cast = staticmethod(_DataModel.MomentTensor_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.MomentTensor_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.MomentTensor_ConstCast)
    def serialize(self, *args): return _DataModel.MomentTensor_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_MomentTensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensor
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.MomentTensor_Create
    if _newclass:Create = staticmethod(_DataModel.MomentTensor_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.MomentTensor_Find
    if _newclass:Find = staticmethod(_DataModel.MomentTensor_Find)
    def __eq__(self, *args): return _DataModel.MomentTensor___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.MomentTensor___ne__(self, *args)
    def equal(self, *args): return _DataModel.MomentTensor_equal(self, *args)
    def setDerivedOriginID(self, *args): return _DataModel.MomentTensor_setDerivedOriginID(self, *args)
    def derivedOriginID(self): return _DataModel.MomentTensor_derivedOriginID(self)
    def setMomentMagnitudeID(self, *args): return _DataModel.MomentTensor_setMomentMagnitudeID(self, *args)
    def momentMagnitudeID(self): return _DataModel.MomentTensor_momentMagnitudeID(self)
    def setScalarMoment(self, *args): return _DataModel.MomentTensor_setScalarMoment(self, *args)
    def scalarMoment(self, *args): return _DataModel.MomentTensor_scalarMoment(self, *args)
    def setTensor(self, *args): return _DataModel.MomentTensor_setTensor(self, *args)
    def tensor(self, *args): return _DataModel.MomentTensor_tensor(self, *args)
    def setVariance(self, *args): return _DataModel.MomentTensor_setVariance(self, *args)
    def variance(self): return _DataModel.MomentTensor_variance(self)
    def setVarianceReduction(self, *args): return _DataModel.MomentTensor_setVarianceReduction(self, *args)
    def varianceReduction(self): return _DataModel.MomentTensor_varianceReduction(self)
    def setDoubleCouple(self, *args): return _DataModel.MomentTensor_setDoubleCouple(self, *args)
    def doubleCouple(self): return _DataModel.MomentTensor_doubleCouple(self)
    def setClvd(self, *args): return _DataModel.MomentTensor_setClvd(self, *args)
    def clvd(self): return _DataModel.MomentTensor_clvd(self)
    def setIso(self, *args): return _DataModel.MomentTensor_setIso(self, *args)
    def iso(self): return _DataModel.MomentTensor_iso(self)
    def setGreensFunctionID(self, *args): return _DataModel.MomentTensor_setGreensFunctionID(self, *args)
    def greensFunctionID(self): return _DataModel.MomentTensor_greensFunctionID(self)
    def setFilterID(self, *args): return _DataModel.MomentTensor_setFilterID(self, *args)
    def filterID(self): return _DataModel.MomentTensor_filterID(self)
    def setSourceTimeFunction(self, *args): return _DataModel.MomentTensor_setSourceTimeFunction(self, *args)
    def sourceTimeFunction(self, *args): return _DataModel.MomentTensor_sourceTimeFunction(self, *args)
    def setMethodID(self, *args): return _DataModel.MomentTensor_setMethodID(self, *args)
    def methodID(self): return _DataModel.MomentTensor_methodID(self)
    def setMethod(self, *args): return _DataModel.MomentTensor_setMethod(self, *args)
    def method(self): return _DataModel.MomentTensor_method(self)
    def setStatus(self, *args): return _DataModel.MomentTensor_setStatus(self, *args)
    def status(self): return _DataModel.MomentTensor_status(self)
    def setCmtName(self, *args): return _DataModel.MomentTensor_setCmtName(self, *args)
    def cmtName(self): return _DataModel.MomentTensor_cmtName(self)
    def setCmtVersion(self, *args): return _DataModel.MomentTensor_setCmtVersion(self, *args)
    def cmtVersion(self): return _DataModel.MomentTensor_cmtVersion(self)
    def setCreationInfo(self, *args): return _DataModel.MomentTensor_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.MomentTensor_creationInfo(self, *args)
    def add(self, *args): return _DataModel.MomentTensor_add(self, *args)
    def remove(self, *args): return _DataModel.MomentTensor_remove(self, *args)
    def removeComment(self, *args): return _DataModel.MomentTensor_removeComment(self, *args)
    def removeDataUsed(self, *args): return _DataModel.MomentTensor_removeDataUsed(self, *args)
    def removeMomentTensorPhaseSetting(self, *args): return _DataModel.MomentTensor_removeMomentTensorPhaseSetting(self, *args)
    def removeMomentTensorStationContribution(self, *args): return _DataModel.MomentTensor_removeMomentTensorStationContribution(self, *args)
    def commentCount(self): return _DataModel.MomentTensor_commentCount(self)
    def dataUsedCount(self): return _DataModel.MomentTensor_dataUsedCount(self)
    def momentTensorPhaseSettingCount(self): return _DataModel.MomentTensor_momentTensorPhaseSettingCount(self)
    def momentTensorStationContributionCount(self): return _DataModel.MomentTensor_momentTensorStationContributionCount(self)
    def comment(self, *args): return _DataModel.MomentTensor_comment(self, *args)
    def dataUsed(self, *args): return _DataModel.MomentTensor_dataUsed(self, *args)
    def momentTensorPhaseSetting(self, *args): return _DataModel.MomentTensor_momentTensorPhaseSetting(self, *args)
    def momentTensorStationContribution(self, *args): return _DataModel.MomentTensor_momentTensorStationContribution(self, *args)
    def findDataUsed(self, *args): return _DataModel.MomentTensor_findDataUsed(self, *args)
    def findMomentTensorStationContribution(self, *args): return _DataModel.MomentTensor_findMomentTensorStationContribution(self, *args)
    def focalMechanism(self): return _DataModel.MomentTensor_focalMechanism(self)
    def assign(self, *args): return _DataModel.MomentTensor_assign(self, *args)
    def attachTo(self, *args): return _DataModel.MomentTensor_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.MomentTensor_detachFrom(self, *args)
    def detach(self): return _DataModel.MomentTensor_detach(self)
    def clone(self): return _DataModel.MomentTensor_clone(self)
    def updateChild(self, *args): return _DataModel.MomentTensor_updateChild(self, *args)
    def accept(self, *args): return _DataModel.MomentTensor_accept(self, *args)
MomentTensor_swigregister = _DataModel.MomentTensor_swigregister
MomentTensor_swigregister(MomentTensor)

def MomentTensor_ClassName():
  return _DataModel.MomentTensor_ClassName()
MomentTensor_ClassName = _DataModel.MomentTensor_ClassName

def MomentTensor_TypeInfo():
  return _DataModel.MomentTensor_TypeInfo()
MomentTensor_TypeInfo = _DataModel.MomentTensor_TypeInfo

def MomentTensor_Cast(*args):
  return _DataModel.MomentTensor_Cast(*args)
MomentTensor_Cast = _DataModel.MomentTensor_Cast

def MomentTensor_ConstCast(*args):
  return _DataModel.MomentTensor_ConstCast(*args)
MomentTensor_ConstCast = _DataModel.MomentTensor_ConstCast

def MomentTensor_Create(*args):
  return _DataModel.MomentTensor_Create(*args)
MomentTensor_Create = _DataModel.MomentTensor_Create

def MomentTensor_Find(*args):
  return _DataModel.MomentTensor_Find(*args)
MomentTensor_Find = _DataModel.MomentTensor_Find

class FocalMechanism(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanism, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanism, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.FocalMechanism_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.FocalMechanism_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.FocalMechanism_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.FocalMechanism_TypeInfo)
    def className(self): return _DataModel.FocalMechanism_className(self)
    def typeInfo(self): return _DataModel.FocalMechanism_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.FocalMechanism_Cast
    if _newclass:Cast = staticmethod(_DataModel.FocalMechanism_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.FocalMechanism_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.FocalMechanism_ConstCast)
    def serialize(self, *args): return _DataModel.FocalMechanism_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_FocalMechanism(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_FocalMechanism
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.FocalMechanism_Create
    if _newclass:Create = staticmethod(_DataModel.FocalMechanism_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.FocalMechanism_Find
    if _newclass:Find = staticmethod(_DataModel.FocalMechanism_Find)
    def __eq__(self, *args): return _DataModel.FocalMechanism___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.FocalMechanism___ne__(self, *args)
    def equal(self, *args): return _DataModel.FocalMechanism_equal(self, *args)
    def setTriggeringOriginID(self, *args): return _DataModel.FocalMechanism_setTriggeringOriginID(self, *args)
    def triggeringOriginID(self): return _DataModel.FocalMechanism_triggeringOriginID(self)
    def setNodalPlanes(self, *args): return _DataModel.FocalMechanism_setNodalPlanes(self, *args)
    def nodalPlanes(self, *args): return _DataModel.FocalMechanism_nodalPlanes(self, *args)
    def setPrincipalAxes(self, *args): return _DataModel.FocalMechanism_setPrincipalAxes(self, *args)
    def principalAxes(self, *args): return _DataModel.FocalMechanism_principalAxes(self, *args)
    def setAzimuthalGap(self, *args): return _DataModel.FocalMechanism_setAzimuthalGap(self, *args)
    def azimuthalGap(self): return _DataModel.FocalMechanism_azimuthalGap(self)
    def setStationPolarityCount(self, *args): return _DataModel.FocalMechanism_setStationPolarityCount(self, *args)
    def stationPolarityCount(self): return _DataModel.FocalMechanism_stationPolarityCount(self)
    def setMisfit(self, *args): return _DataModel.FocalMechanism_setMisfit(self, *args)
    def misfit(self): return _DataModel.FocalMechanism_misfit(self)
    def setStationDistributionRatio(self, *args): return _DataModel.FocalMechanism_setStationDistributionRatio(self, *args)
    def stationDistributionRatio(self): return _DataModel.FocalMechanism_stationDistributionRatio(self)
    def setMethodID(self, *args): return _DataModel.FocalMechanism_setMethodID(self, *args)
    def methodID(self): return _DataModel.FocalMechanism_methodID(self)
    def setEvaluationMode(self, *args): return _DataModel.FocalMechanism_setEvaluationMode(self, *args)
    def evaluationMode(self): return _DataModel.FocalMechanism_evaluationMode(self)
    def setEvaluationStatus(self, *args): return _DataModel.FocalMechanism_setEvaluationStatus(self, *args)
    def evaluationStatus(self): return _DataModel.FocalMechanism_evaluationStatus(self)
    def setCreationInfo(self, *args): return _DataModel.FocalMechanism_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.FocalMechanism_creationInfo(self, *args)
    def add(self, *args): return _DataModel.FocalMechanism_add(self, *args)
    def remove(self, *args): return _DataModel.FocalMechanism_remove(self, *args)
    def removeComment(self, *args): return _DataModel.FocalMechanism_removeComment(self, *args)
    def removeMomentTensor(self, *args): return _DataModel.FocalMechanism_removeMomentTensor(self, *args)
    def commentCount(self): return _DataModel.FocalMechanism_commentCount(self)
    def momentTensorCount(self): return _DataModel.FocalMechanism_momentTensorCount(self)
    def comment(self, *args): return _DataModel.FocalMechanism_comment(self, *args)
    def momentTensor(self, *args): return _DataModel.FocalMechanism_momentTensor(self, *args)
    def findMomentTensor(self, *args): return _DataModel.FocalMechanism_findMomentTensor(self, *args)
    def eventParameters(self): return _DataModel.FocalMechanism_eventParameters(self)
    def assign(self, *args): return _DataModel.FocalMechanism_assign(self, *args)
    def attachTo(self, *args): return _DataModel.FocalMechanism_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.FocalMechanism_detachFrom(self, *args)
    def detach(self): return _DataModel.FocalMechanism_detach(self)
    def clone(self): return _DataModel.FocalMechanism_clone(self)
    def updateChild(self, *args): return _DataModel.FocalMechanism_updateChild(self, *args)
    def accept(self, *args): return _DataModel.FocalMechanism_accept(self, *args)
FocalMechanism_swigregister = _DataModel.FocalMechanism_swigregister
FocalMechanism_swigregister(FocalMechanism)

def FocalMechanism_ClassName():
  return _DataModel.FocalMechanism_ClassName()
FocalMechanism_ClassName = _DataModel.FocalMechanism_ClassName

def FocalMechanism_TypeInfo():
  return _DataModel.FocalMechanism_TypeInfo()
FocalMechanism_TypeInfo = _DataModel.FocalMechanism_TypeInfo

def FocalMechanism_Cast(*args):
  return _DataModel.FocalMechanism_Cast(*args)
FocalMechanism_Cast = _DataModel.FocalMechanism_Cast

def FocalMechanism_ConstCast(*args):
  return _DataModel.FocalMechanism_ConstCast(*args)
FocalMechanism_ConstCast = _DataModel.FocalMechanism_ConstCast

def FocalMechanism_Create(*args):
  return _DataModel.FocalMechanism_Create(*args)
FocalMechanism_Create = _DataModel.FocalMechanism_Create

def FocalMechanism_Find(*args):
  return _DataModel.FocalMechanism_Find(*args)
FocalMechanism_Find = _DataModel.FocalMechanism_Find

class Amplitude(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Amplitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Amplitude, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Amplitude_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Amplitude_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Amplitude_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Amplitude_TypeInfo)
    def className(self): return _DataModel.Amplitude_className(self)
    def typeInfo(self): return _DataModel.Amplitude_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Amplitude_Cast
    if _newclass:Cast = staticmethod(_DataModel.Amplitude_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Amplitude_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Amplitude_ConstCast)
    def serialize(self, *args): return _DataModel.Amplitude_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Amplitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Amplitude
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Amplitude_Create
    if _newclass:Create = staticmethod(_DataModel.Amplitude_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Amplitude_Find
    if _newclass:Find = staticmethod(_DataModel.Amplitude_Find)
    def __eq__(self, *args): return _DataModel.Amplitude___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Amplitude___ne__(self, *args)
    def equal(self, *args): return _DataModel.Amplitude_equal(self, *args)
    def setType(self, *args): return _DataModel.Amplitude_setType(self, *args)
    def type(self): return _DataModel.Amplitude_type(self)
    def setAmplitude(self, *args): return _DataModel.Amplitude_setAmplitude(self, *args)
    def amplitude(self, *args): return _DataModel.Amplitude_amplitude(self, *args)
    def setTimeWindow(self, *args): return _DataModel.Amplitude_setTimeWindow(self, *args)
    def timeWindow(self, *args): return _DataModel.Amplitude_timeWindow(self, *args)
    def setPeriod(self, *args): return _DataModel.Amplitude_setPeriod(self, *args)
    def period(self, *args): return _DataModel.Amplitude_period(self, *args)
    def setSnr(self, *args): return _DataModel.Amplitude_setSnr(self, *args)
    def snr(self): return _DataModel.Amplitude_snr(self)
    def setUnit(self, *args): return _DataModel.Amplitude_setUnit(self, *args)
    def unit(self): return _DataModel.Amplitude_unit(self)
    def setPickID(self, *args): return _DataModel.Amplitude_setPickID(self, *args)
    def pickID(self): return _DataModel.Amplitude_pickID(self)
    def setWaveformID(self, *args): return _DataModel.Amplitude_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.Amplitude_waveformID(self, *args)
    def setFilterID(self, *args): return _DataModel.Amplitude_setFilterID(self, *args)
    def filterID(self): return _DataModel.Amplitude_filterID(self)
    def setMethodID(self, *args): return _DataModel.Amplitude_setMethodID(self, *args)
    def methodID(self): return _DataModel.Amplitude_methodID(self)
    def setScalingTime(self, *args): return _DataModel.Amplitude_setScalingTime(self, *args)
    def scalingTime(self, *args): return _DataModel.Amplitude_scalingTime(self, *args)
    def setMagnitudeHint(self, *args): return _DataModel.Amplitude_setMagnitudeHint(self, *args)
    def magnitudeHint(self): return _DataModel.Amplitude_magnitudeHint(self)
    def setEvaluationMode(self, *args): return _DataModel.Amplitude_setEvaluationMode(self, *args)
    def evaluationMode(self): return _DataModel.Amplitude_evaluationMode(self)
    def setCreationInfo(self, *args): return _DataModel.Amplitude_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Amplitude_creationInfo(self, *args)
    def add(self, *args): return _DataModel.Amplitude_add(self, *args)
    def remove(self, *args): return _DataModel.Amplitude_remove(self, *args)
    def removeComment(self, *args): return _DataModel.Amplitude_removeComment(self, *args)
    def commentCount(self): return _DataModel.Amplitude_commentCount(self)
    def comment(self, *args): return _DataModel.Amplitude_comment(self, *args)
    def eventParameters(self): return _DataModel.Amplitude_eventParameters(self)
    def assign(self, *args): return _DataModel.Amplitude_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Amplitude_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Amplitude_detachFrom(self, *args)
    def detach(self): return _DataModel.Amplitude_detach(self)
    def clone(self): return _DataModel.Amplitude_clone(self)
    def updateChild(self, *args): return _DataModel.Amplitude_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Amplitude_accept(self, *args)
Amplitude_swigregister = _DataModel.Amplitude_swigregister
Amplitude_swigregister(Amplitude)

def Amplitude_ClassName():
  return _DataModel.Amplitude_ClassName()
Amplitude_ClassName = _DataModel.Amplitude_ClassName

def Amplitude_TypeInfo():
  return _DataModel.Amplitude_TypeInfo()
Amplitude_TypeInfo = _DataModel.Amplitude_TypeInfo

def Amplitude_Cast(*args):
  return _DataModel.Amplitude_Cast(*args)
Amplitude_Cast = _DataModel.Amplitude_Cast

def Amplitude_ConstCast(*args):
  return _DataModel.Amplitude_ConstCast(*args)
Amplitude_ConstCast = _DataModel.Amplitude_ConstCast

def Amplitude_Create(*args):
  return _DataModel.Amplitude_Create(*args)
Amplitude_Create = _DataModel.Amplitude_Create

def Amplitude_Find(*args):
  return _DataModel.Amplitude_Find(*args)
Amplitude_Find = _DataModel.Amplitude_Find

class StationMagnitudeContributionIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitudeContributionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitudeContributionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_StationMagnitudeContributionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.StationMagnitudeContributionIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationMagnitudeContributionIndex___ne__(self, *args)
    __swig_setmethods__["stationMagnitudeID"] = _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_set
    __swig_getmethods__["stationMagnitudeID"] = _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_get
    if _newclass:stationMagnitudeID = _swig_property(_DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_get, _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_set)
    __swig_destroy__ = _DataModel.delete_StationMagnitudeContributionIndex
    __del__ = lambda self : None;
StationMagnitudeContributionIndex_swigregister = _DataModel.StationMagnitudeContributionIndex_swigregister
StationMagnitudeContributionIndex_swigregister(StationMagnitudeContributionIndex)

class StationMagnitudeContribution(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitudeContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitudeContribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.StationMagnitudeContribution_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.StationMagnitudeContribution_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.StationMagnitudeContribution_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.StationMagnitudeContribution_TypeInfo)
    def className(self): return _DataModel.StationMagnitudeContribution_className(self)
    def typeInfo(self): return _DataModel.StationMagnitudeContribution_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.StationMagnitudeContribution_Cast
    if _newclass:Cast = staticmethod(_DataModel.StationMagnitudeContribution_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.StationMagnitudeContribution_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.StationMagnitudeContribution_ConstCast)
    def serialize(self, *args): return _DataModel.StationMagnitudeContribution_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_StationMagnitudeContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationMagnitudeContribution
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.StationMagnitudeContribution___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationMagnitudeContribution___ne__(self, *args)
    def equal(self, *args): return _DataModel.StationMagnitudeContribution_equal(self, *args)
    def setStationMagnitudeID(self, *args): return _DataModel.StationMagnitudeContribution_setStationMagnitudeID(self, *args)
    def stationMagnitudeID(self): return _DataModel.StationMagnitudeContribution_stationMagnitudeID(self)
    def setResidual(self, *args): return _DataModel.StationMagnitudeContribution_setResidual(self, *args)
    def residual(self): return _DataModel.StationMagnitudeContribution_residual(self)
    def setWeight(self, *args): return _DataModel.StationMagnitudeContribution_setWeight(self, *args)
    def weight(self): return _DataModel.StationMagnitudeContribution_weight(self)
    def index(self): return _DataModel.StationMagnitudeContribution_index(self)
    def equalIndex(self, *args): return _DataModel.StationMagnitudeContribution_equalIndex(self, *args)
    def magnitude(self): return _DataModel.StationMagnitudeContribution_magnitude(self)
    def assign(self, *args): return _DataModel.StationMagnitudeContribution_assign(self, *args)
    def attachTo(self, *args): return _DataModel.StationMagnitudeContribution_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.StationMagnitudeContribution_detachFrom(self, *args)
    def detach(self): return _DataModel.StationMagnitudeContribution_detach(self)
    def clone(self): return _DataModel.StationMagnitudeContribution_clone(self)
    def accept(self, *args): return _DataModel.StationMagnitudeContribution_accept(self, *args)
StationMagnitudeContribution_swigregister = _DataModel.StationMagnitudeContribution_swigregister
StationMagnitudeContribution_swigregister(StationMagnitudeContribution)

def StationMagnitudeContribution_ClassName():
  return _DataModel.StationMagnitudeContribution_ClassName()
StationMagnitudeContribution_ClassName = _DataModel.StationMagnitudeContribution_ClassName

def StationMagnitudeContribution_TypeInfo():
  return _DataModel.StationMagnitudeContribution_TypeInfo()
StationMagnitudeContribution_TypeInfo = _DataModel.StationMagnitudeContribution_TypeInfo

def StationMagnitudeContribution_Cast(*args):
  return _DataModel.StationMagnitudeContribution_Cast(*args)
StationMagnitudeContribution_Cast = _DataModel.StationMagnitudeContribution_Cast

def StationMagnitudeContribution_ConstCast(*args):
  return _DataModel.StationMagnitudeContribution_ConstCast(*args)
StationMagnitudeContribution_ConstCast = _DataModel.StationMagnitudeContribution_ConstCast

class Magnitude(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Magnitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Magnitude, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Magnitude_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Magnitude_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Magnitude_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Magnitude_TypeInfo)
    def className(self): return _DataModel.Magnitude_className(self)
    def typeInfo(self): return _DataModel.Magnitude_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Magnitude_Cast
    if _newclass:Cast = staticmethod(_DataModel.Magnitude_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Magnitude_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Magnitude_ConstCast)
    def serialize(self, *args): return _DataModel.Magnitude_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Magnitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Magnitude
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Magnitude_Create
    if _newclass:Create = staticmethod(_DataModel.Magnitude_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Magnitude_Find
    if _newclass:Find = staticmethod(_DataModel.Magnitude_Find)
    def __eq__(self, *args): return _DataModel.Magnitude___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Magnitude___ne__(self, *args)
    def equal(self, *args): return _DataModel.Magnitude_equal(self, *args)
    def setMagnitude(self, *args): return _DataModel.Magnitude_setMagnitude(self, *args)
    def magnitude(self, *args): return _DataModel.Magnitude_magnitude(self, *args)
    def setType(self, *args): return _DataModel.Magnitude_setType(self, *args)
    def type(self): return _DataModel.Magnitude_type(self)
    def setOriginID(self, *args): return _DataModel.Magnitude_setOriginID(self, *args)
    def originID(self): return _DataModel.Magnitude_originID(self)
    def setMethodID(self, *args): return _DataModel.Magnitude_setMethodID(self, *args)
    def methodID(self): return _DataModel.Magnitude_methodID(self)
    def setStationCount(self, *args): return _DataModel.Magnitude_setStationCount(self, *args)
    def stationCount(self): return _DataModel.Magnitude_stationCount(self)
    def setAzimuthalGap(self, *args): return _DataModel.Magnitude_setAzimuthalGap(self, *args)
    def azimuthalGap(self): return _DataModel.Magnitude_azimuthalGap(self)
    def setEvaluationStatus(self, *args): return _DataModel.Magnitude_setEvaluationStatus(self, *args)
    def evaluationStatus(self): return _DataModel.Magnitude_evaluationStatus(self)
    def setCreationInfo(self, *args): return _DataModel.Magnitude_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Magnitude_creationInfo(self, *args)
    def add(self, *args): return _DataModel.Magnitude_add(self, *args)
    def remove(self, *args): return _DataModel.Magnitude_remove(self, *args)
    def removeComment(self, *args): return _DataModel.Magnitude_removeComment(self, *args)
    def removeStationMagnitudeContribution(self, *args): return _DataModel.Magnitude_removeStationMagnitudeContribution(self, *args)
    def commentCount(self): return _DataModel.Magnitude_commentCount(self)
    def stationMagnitudeContributionCount(self): return _DataModel.Magnitude_stationMagnitudeContributionCount(self)
    def comment(self, *args): return _DataModel.Magnitude_comment(self, *args)
    def stationMagnitudeContribution(self, *args): return _DataModel.Magnitude_stationMagnitudeContribution(self, *args)
    def origin(self): return _DataModel.Magnitude_origin(self)
    def assign(self, *args): return _DataModel.Magnitude_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Magnitude_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Magnitude_detachFrom(self, *args)
    def detach(self): return _DataModel.Magnitude_detach(self)
    def clone(self): return _DataModel.Magnitude_clone(self)
    def updateChild(self, *args): return _DataModel.Magnitude_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Magnitude_accept(self, *args)
Magnitude_swigregister = _DataModel.Magnitude_swigregister
Magnitude_swigregister(Magnitude)

def Magnitude_ClassName():
  return _DataModel.Magnitude_ClassName()
Magnitude_ClassName = _DataModel.Magnitude_ClassName

def Magnitude_TypeInfo():
  return _DataModel.Magnitude_TypeInfo()
Magnitude_TypeInfo = _DataModel.Magnitude_TypeInfo

def Magnitude_Cast(*args):
  return _DataModel.Magnitude_Cast(*args)
Magnitude_Cast = _DataModel.Magnitude_Cast

def Magnitude_ConstCast(*args):
  return _DataModel.Magnitude_ConstCast(*args)
Magnitude_ConstCast = _DataModel.Magnitude_ConstCast

def Magnitude_Create(*args):
  return _DataModel.Magnitude_Create(*args)
Magnitude_Create = _DataModel.Magnitude_Create

def Magnitude_Find(*args):
  return _DataModel.Magnitude_Find(*args)
Magnitude_Find = _DataModel.Magnitude_Find

class StationMagnitude(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitude, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.StationMagnitude_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.StationMagnitude_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.StationMagnitude_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.StationMagnitude_TypeInfo)
    def className(self): return _DataModel.StationMagnitude_className(self)
    def typeInfo(self): return _DataModel.StationMagnitude_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.StationMagnitude_Cast
    if _newclass:Cast = staticmethod(_DataModel.StationMagnitude_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.StationMagnitude_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.StationMagnitude_ConstCast)
    def serialize(self, *args): return _DataModel.StationMagnitude_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_StationMagnitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationMagnitude
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.StationMagnitude_Create
    if _newclass:Create = staticmethod(_DataModel.StationMagnitude_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.StationMagnitude_Find
    if _newclass:Find = staticmethod(_DataModel.StationMagnitude_Find)
    def __eq__(self, *args): return _DataModel.StationMagnitude___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.StationMagnitude___ne__(self, *args)
    def equal(self, *args): return _DataModel.StationMagnitude_equal(self, *args)
    def setOriginID(self, *args): return _DataModel.StationMagnitude_setOriginID(self, *args)
    def originID(self): return _DataModel.StationMagnitude_originID(self)
    def setMagnitude(self, *args): return _DataModel.StationMagnitude_setMagnitude(self, *args)
    def magnitude(self, *args): return _DataModel.StationMagnitude_magnitude(self, *args)
    def setType(self, *args): return _DataModel.StationMagnitude_setType(self, *args)
    def type(self): return _DataModel.StationMagnitude_type(self)
    def setAmplitudeID(self, *args): return _DataModel.StationMagnitude_setAmplitudeID(self, *args)
    def amplitudeID(self): return _DataModel.StationMagnitude_amplitudeID(self)
    def setMethodID(self, *args): return _DataModel.StationMagnitude_setMethodID(self, *args)
    def methodID(self): return _DataModel.StationMagnitude_methodID(self)
    def setWaveformID(self, *args): return _DataModel.StationMagnitude_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.StationMagnitude_waveformID(self, *args)
    def setCreationInfo(self, *args): return _DataModel.StationMagnitude_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.StationMagnitude_creationInfo(self, *args)
    def add(self, *args): return _DataModel.StationMagnitude_add(self, *args)
    def remove(self, *args): return _DataModel.StationMagnitude_remove(self, *args)
    def removeComment(self, *args): return _DataModel.StationMagnitude_removeComment(self, *args)
    def commentCount(self): return _DataModel.StationMagnitude_commentCount(self)
    def comment(self, *args): return _DataModel.StationMagnitude_comment(self, *args)
    def origin(self): return _DataModel.StationMagnitude_origin(self)
    def assign(self, *args): return _DataModel.StationMagnitude_assign(self, *args)
    def attachTo(self, *args): return _DataModel.StationMagnitude_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.StationMagnitude_detachFrom(self, *args)
    def detach(self): return _DataModel.StationMagnitude_detach(self)
    def clone(self): return _DataModel.StationMagnitude_clone(self)
    def updateChild(self, *args): return _DataModel.StationMagnitude_updateChild(self, *args)
    def accept(self, *args): return _DataModel.StationMagnitude_accept(self, *args)
StationMagnitude_swigregister = _DataModel.StationMagnitude_swigregister
StationMagnitude_swigregister(StationMagnitude)

def StationMagnitude_ClassName():
  return _DataModel.StationMagnitude_ClassName()
StationMagnitude_ClassName = _DataModel.StationMagnitude_ClassName

def StationMagnitude_TypeInfo():
  return _DataModel.StationMagnitude_TypeInfo()
StationMagnitude_TypeInfo = _DataModel.StationMagnitude_TypeInfo

def StationMagnitude_Cast(*args):
  return _DataModel.StationMagnitude_Cast(*args)
StationMagnitude_Cast = _DataModel.StationMagnitude_Cast

def StationMagnitude_ConstCast(*args):
  return _DataModel.StationMagnitude_ConstCast(*args)
StationMagnitude_ConstCast = _DataModel.StationMagnitude_ConstCast

def StationMagnitude_Create(*args):
  return _DataModel.StationMagnitude_Create(*args)
StationMagnitude_Create = _DataModel.StationMagnitude_Create

def StationMagnitude_Find(*args):
  return _DataModel.StationMagnitude_Find(*args)
StationMagnitude_Find = _DataModel.StationMagnitude_Find

class Pick(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pick, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Pick_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Pick_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Pick_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Pick_TypeInfo)
    def className(self): return _DataModel.Pick_className(self)
    def typeInfo(self): return _DataModel.Pick_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Pick_Cast
    if _newclass:Cast = staticmethod(_DataModel.Pick_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Pick_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Pick_ConstCast)
    def serialize(self, *args): return _DataModel.Pick_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Pick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Pick
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Pick_Create
    if _newclass:Create = staticmethod(_DataModel.Pick_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Pick_Find
    if _newclass:Find = staticmethod(_DataModel.Pick_Find)
    def __eq__(self, *args): return _DataModel.Pick___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Pick___ne__(self, *args)
    def equal(self, *args): return _DataModel.Pick_equal(self, *args)
    def setTime(self, *args): return _DataModel.Pick_setTime(self, *args)
    def time(self, *args): return _DataModel.Pick_time(self, *args)
    def setWaveformID(self, *args): return _DataModel.Pick_setWaveformID(self, *args)
    def waveformID(self, *args): return _DataModel.Pick_waveformID(self, *args)
    def setFilterID(self, *args): return _DataModel.Pick_setFilterID(self, *args)
    def filterID(self): return _DataModel.Pick_filterID(self)
    def setMethodID(self, *args): return _DataModel.Pick_setMethodID(self, *args)
    def methodID(self): return _DataModel.Pick_methodID(self)
    def setHorizontalSlowness(self, *args): return _DataModel.Pick_setHorizontalSlowness(self, *args)
    def horizontalSlowness(self, *args): return _DataModel.Pick_horizontalSlowness(self, *args)
    def setBackazimuth(self, *args): return _DataModel.Pick_setBackazimuth(self, *args)
    def backazimuth(self, *args): return _DataModel.Pick_backazimuth(self, *args)
    def setSlownessMethodID(self, *args): return _DataModel.Pick_setSlownessMethodID(self, *args)
    def slownessMethodID(self): return _DataModel.Pick_slownessMethodID(self)
    def setOnset(self, *args): return _DataModel.Pick_setOnset(self, *args)
    def onset(self): return _DataModel.Pick_onset(self)
    def setPhaseHint(self, *args): return _DataModel.Pick_setPhaseHint(self, *args)
    def phaseHint(self, *args): return _DataModel.Pick_phaseHint(self, *args)
    def setPolarity(self, *args): return _DataModel.Pick_setPolarity(self, *args)
    def polarity(self): return _DataModel.Pick_polarity(self)
    def setEvaluationMode(self, *args): return _DataModel.Pick_setEvaluationMode(self, *args)
    def evaluationMode(self): return _DataModel.Pick_evaluationMode(self)
    def setEvaluationStatus(self, *args): return _DataModel.Pick_setEvaluationStatus(self, *args)
    def evaluationStatus(self): return _DataModel.Pick_evaluationStatus(self)
    def setCreationInfo(self, *args): return _DataModel.Pick_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Pick_creationInfo(self, *args)
    def add(self, *args): return _DataModel.Pick_add(self, *args)
    def remove(self, *args): return _DataModel.Pick_remove(self, *args)
    def removeComment(self, *args): return _DataModel.Pick_removeComment(self, *args)
    def commentCount(self): return _DataModel.Pick_commentCount(self)
    def comment(self, *args): return _DataModel.Pick_comment(self, *args)
    def eventParameters(self): return _DataModel.Pick_eventParameters(self)
    def assign(self, *args): return _DataModel.Pick_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Pick_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Pick_detachFrom(self, *args)
    def detach(self): return _DataModel.Pick_detach(self)
    def clone(self): return _DataModel.Pick_clone(self)
    def updateChild(self, *args): return _DataModel.Pick_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Pick_accept(self, *args)
Pick_swigregister = _DataModel.Pick_swigregister
Pick_swigregister(Pick)

def Pick_ClassName():
  return _DataModel.Pick_ClassName()
Pick_ClassName = _DataModel.Pick_ClassName

def Pick_TypeInfo():
  return _DataModel.Pick_TypeInfo()
Pick_TypeInfo = _DataModel.Pick_TypeInfo

def Pick_Cast(*args):
  return _DataModel.Pick_Cast(*args)
Pick_Cast = _DataModel.Pick_Cast

def Pick_ConstCast(*args):
  return _DataModel.Pick_ConstCast(*args)
Pick_ConstCast = _DataModel.Pick_ConstCast

def Pick_Create(*args):
  return _DataModel.Pick_Create(*args)
Pick_Create = _DataModel.Pick_Create

def Pick_Find(*args):
  return _DataModel.Pick_Find(*args)
Pick_Find = _DataModel.Pick_Find

class OriginReferenceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OriginReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_OriginReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.OriginReferenceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.OriginReferenceIndex___ne__(self, *args)
    __swig_setmethods__["originID"] = _DataModel.OriginReferenceIndex_originID_set
    __swig_getmethods__["originID"] = _DataModel.OriginReferenceIndex_originID_get
    if _newclass:originID = _swig_property(_DataModel.OriginReferenceIndex_originID_get, _DataModel.OriginReferenceIndex_originID_set)
    __swig_destroy__ = _DataModel.delete_OriginReferenceIndex
    __del__ = lambda self : None;
OriginReferenceIndex_swigregister = _DataModel.OriginReferenceIndex_swigregister
OriginReferenceIndex_swigregister(OriginReferenceIndex)

class OriginReference(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginReference, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.OriginReference_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.OriginReference_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.OriginReference_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.OriginReference_TypeInfo)
    def className(self): return _DataModel.OriginReference_className(self)
    def typeInfo(self): return _DataModel.OriginReference_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.OriginReference_Cast
    if _newclass:Cast = staticmethod(_DataModel.OriginReference_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.OriginReference_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.OriginReference_ConstCast)
    def serialize(self, *args): return _DataModel.OriginReference_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_OriginReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginReference
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.OriginReference___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.OriginReference___ne__(self, *args)
    def equal(self, *args): return _DataModel.OriginReference_equal(self, *args)
    def setOriginID(self, *args): return _DataModel.OriginReference_setOriginID(self, *args)
    def originID(self): return _DataModel.OriginReference_originID(self)
    def index(self): return _DataModel.OriginReference_index(self)
    def equalIndex(self, *args): return _DataModel.OriginReference_equalIndex(self, *args)
    def event(self): return _DataModel.OriginReference_event(self)
    def assign(self, *args): return _DataModel.OriginReference_assign(self, *args)
    def attachTo(self, *args): return _DataModel.OriginReference_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.OriginReference_detachFrom(self, *args)
    def detach(self): return _DataModel.OriginReference_detach(self)
    def clone(self): return _DataModel.OriginReference_clone(self)
    def accept(self, *args): return _DataModel.OriginReference_accept(self, *args)
OriginReference_swigregister = _DataModel.OriginReference_swigregister
OriginReference_swigregister(OriginReference)

def OriginReference_ClassName():
  return _DataModel.OriginReference_ClassName()
OriginReference_ClassName = _DataModel.OriginReference_ClassName

def OriginReference_TypeInfo():
  return _DataModel.OriginReference_TypeInfo()
OriginReference_TypeInfo = _DataModel.OriginReference_TypeInfo

def OriginReference_Cast(*args):
  return _DataModel.OriginReference_Cast(*args)
OriginReference_Cast = _DataModel.OriginReference_Cast

def OriginReference_ConstCast(*args):
  return _DataModel.OriginReference_ConstCast(*args)
OriginReference_ConstCast = _DataModel.OriginReference_ConstCast

class FocalMechanismReferenceIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanismReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanismReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_FocalMechanismReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.FocalMechanismReferenceIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.FocalMechanismReferenceIndex___ne__(self, *args)
    __swig_setmethods__["focalMechanismID"] = _DataModel.FocalMechanismReferenceIndex_focalMechanismID_set
    __swig_getmethods__["focalMechanismID"] = _DataModel.FocalMechanismReferenceIndex_focalMechanismID_get
    if _newclass:focalMechanismID = _swig_property(_DataModel.FocalMechanismReferenceIndex_focalMechanismID_get, _DataModel.FocalMechanismReferenceIndex_focalMechanismID_set)
    __swig_destroy__ = _DataModel.delete_FocalMechanismReferenceIndex
    __del__ = lambda self : None;
FocalMechanismReferenceIndex_swigregister = _DataModel.FocalMechanismReferenceIndex_swigregister
FocalMechanismReferenceIndex_swigregister(FocalMechanismReferenceIndex)

class FocalMechanismReference(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanismReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanismReference, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.FocalMechanismReference_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.FocalMechanismReference_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.FocalMechanismReference_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.FocalMechanismReference_TypeInfo)
    def className(self): return _DataModel.FocalMechanismReference_className(self)
    def typeInfo(self): return _DataModel.FocalMechanismReference_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.FocalMechanismReference_Cast
    if _newclass:Cast = staticmethod(_DataModel.FocalMechanismReference_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.FocalMechanismReference_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.FocalMechanismReference_ConstCast)
    def serialize(self, *args): return _DataModel.FocalMechanismReference_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_FocalMechanismReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_FocalMechanismReference
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.FocalMechanismReference___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.FocalMechanismReference___ne__(self, *args)
    def equal(self, *args): return _DataModel.FocalMechanismReference_equal(self, *args)
    def setFocalMechanismID(self, *args): return _DataModel.FocalMechanismReference_setFocalMechanismID(self, *args)
    def focalMechanismID(self): return _DataModel.FocalMechanismReference_focalMechanismID(self)
    def index(self): return _DataModel.FocalMechanismReference_index(self)
    def equalIndex(self, *args): return _DataModel.FocalMechanismReference_equalIndex(self, *args)
    def event(self): return _DataModel.FocalMechanismReference_event(self)
    def assign(self, *args): return _DataModel.FocalMechanismReference_assign(self, *args)
    def attachTo(self, *args): return _DataModel.FocalMechanismReference_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.FocalMechanismReference_detachFrom(self, *args)
    def detach(self): return _DataModel.FocalMechanismReference_detach(self)
    def clone(self): return _DataModel.FocalMechanismReference_clone(self)
    def accept(self, *args): return _DataModel.FocalMechanismReference_accept(self, *args)
FocalMechanismReference_swigregister = _DataModel.FocalMechanismReference_swigregister
FocalMechanismReference_swigregister(FocalMechanismReference)

def FocalMechanismReference_ClassName():
  return _DataModel.FocalMechanismReference_ClassName()
FocalMechanismReference_ClassName = _DataModel.FocalMechanismReference_ClassName

def FocalMechanismReference_TypeInfo():
  return _DataModel.FocalMechanismReference_TypeInfo()
FocalMechanismReference_TypeInfo = _DataModel.FocalMechanismReference_TypeInfo

def FocalMechanismReference_Cast(*args):
  return _DataModel.FocalMechanismReference_Cast(*args)
FocalMechanismReference_Cast = _DataModel.FocalMechanismReference_Cast

def FocalMechanismReference_ConstCast(*args):
  return _DataModel.FocalMechanismReference_ConstCast(*args)
FocalMechanismReference_ConstCast = _DataModel.FocalMechanismReference_ConstCast

class Event(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Event_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Event_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Event_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Event_TypeInfo)
    def className(self): return _DataModel.Event_className(self)
    def typeInfo(self): return _DataModel.Event_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Event_Cast
    if _newclass:Cast = staticmethod(_DataModel.Event_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Event_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Event_ConstCast)
    def serialize(self, *args): return _DataModel.Event_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Event
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Event_Create
    if _newclass:Create = staticmethod(_DataModel.Event_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Event_Find
    if _newclass:Find = staticmethod(_DataModel.Event_Find)
    def __eq__(self, *args): return _DataModel.Event___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Event___ne__(self, *args)
    def equal(self, *args): return _DataModel.Event_equal(self, *args)
    def setPreferredOriginID(self, *args): return _DataModel.Event_setPreferredOriginID(self, *args)
    def preferredOriginID(self): return _DataModel.Event_preferredOriginID(self)
    def setPreferredMagnitudeID(self, *args): return _DataModel.Event_setPreferredMagnitudeID(self, *args)
    def preferredMagnitudeID(self): return _DataModel.Event_preferredMagnitudeID(self)
    def setPreferredFocalMechanismID(self, *args): return _DataModel.Event_setPreferredFocalMechanismID(self, *args)
    def preferredFocalMechanismID(self): return _DataModel.Event_preferredFocalMechanismID(self)
    def setType(self, *args): return _DataModel.Event_setType(self, *args)
    def type(self): return _DataModel.Event_type(self)
    def setTypeCertainty(self, *args): return _DataModel.Event_setTypeCertainty(self, *args)
    def typeCertainty(self): return _DataModel.Event_typeCertainty(self)
    def setCreationInfo(self, *args): return _DataModel.Event_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Event_creationInfo(self, *args)
    def add(self, *args): return _DataModel.Event_add(self, *args)
    def remove(self, *args): return _DataModel.Event_remove(self, *args)
    def removeEventDescription(self, *args): return _DataModel.Event_removeEventDescription(self, *args)
    def removeComment(self, *args): return _DataModel.Event_removeComment(self, *args)
    def removeOriginReference(self, *args): return _DataModel.Event_removeOriginReference(self, *args)
    def removeFocalMechanismReference(self, *args): return _DataModel.Event_removeFocalMechanismReference(self, *args)
    def eventDescriptionCount(self): return _DataModel.Event_eventDescriptionCount(self)
    def commentCount(self): return _DataModel.Event_commentCount(self)
    def originReferenceCount(self): return _DataModel.Event_originReferenceCount(self)
    def focalMechanismReferenceCount(self): return _DataModel.Event_focalMechanismReferenceCount(self)
    def eventDescription(self, *args): return _DataModel.Event_eventDescription(self, *args)
    def comment(self, *args): return _DataModel.Event_comment(self, *args)
    def originReference(self, *args): return _DataModel.Event_originReference(self, *args)
    def focalMechanismReference(self, *args): return _DataModel.Event_focalMechanismReference(self, *args)
    def eventParameters(self): return _DataModel.Event_eventParameters(self)
    def assign(self, *args): return _DataModel.Event_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Event_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Event_detachFrom(self, *args)
    def detach(self): return _DataModel.Event_detach(self)
    def clone(self): return _DataModel.Event_clone(self)
    def updateChild(self, *args): return _DataModel.Event_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Event_accept(self, *args)
Event_swigregister = _DataModel.Event_swigregister
Event_swigregister(Event)

def Event_ClassName():
  return _DataModel.Event_ClassName()
Event_ClassName = _DataModel.Event_ClassName

def Event_TypeInfo():
  return _DataModel.Event_TypeInfo()
Event_TypeInfo = _DataModel.Event_TypeInfo

def Event_Cast(*args):
  return _DataModel.Event_Cast(*args)
Event_Cast = _DataModel.Event_Cast

def Event_ConstCast(*args):
  return _DataModel.Event_ConstCast(*args)
Event_ConstCast = _DataModel.Event_ConstCast

def Event_Create(*args):
  return _DataModel.Event_Create(*args)
Event_Create = _DataModel.Event_Create

def Event_Find(*args):
  return _DataModel.Event_Find(*args)
Event_Find = _DataModel.Event_Find

class ArrivalIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrivalIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrivalIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ArrivalIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ArrivalIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ArrivalIndex___ne__(self, *args)
    __swig_setmethods__["pickID"] = _DataModel.ArrivalIndex_pickID_set
    __swig_getmethods__["pickID"] = _DataModel.ArrivalIndex_pickID_get
    if _newclass:pickID = _swig_property(_DataModel.ArrivalIndex_pickID_get, _DataModel.ArrivalIndex_pickID_set)
    __swig_destroy__ = _DataModel.delete_ArrivalIndex
    __del__ = lambda self : None;
ArrivalIndex_swigregister = _DataModel.ArrivalIndex_swigregister
ArrivalIndex_swigregister(ArrivalIndex)

class Arrival(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrival, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Arrival, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Arrival_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Arrival_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Arrival_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Arrival_TypeInfo)
    def className(self): return _DataModel.Arrival_className(self)
    def typeInfo(self): return _DataModel.Arrival_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Arrival_Cast
    if _newclass:Cast = staticmethod(_DataModel.Arrival_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Arrival_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Arrival_ConstCast)
    def serialize(self, *args): return _DataModel.Arrival_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Arrival(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Arrival
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Arrival___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Arrival___ne__(self, *args)
    def equal(self, *args): return _DataModel.Arrival_equal(self, *args)
    def setPickID(self, *args): return _DataModel.Arrival_setPickID(self, *args)
    def pickID(self): return _DataModel.Arrival_pickID(self)
    def setPhase(self, *args): return _DataModel.Arrival_setPhase(self, *args)
    def phase(self, *args): return _DataModel.Arrival_phase(self, *args)
    def setTimeCorrection(self, *args): return _DataModel.Arrival_setTimeCorrection(self, *args)
    def timeCorrection(self): return _DataModel.Arrival_timeCorrection(self)
    def setAzimuth(self, *args): return _DataModel.Arrival_setAzimuth(self, *args)
    def azimuth(self): return _DataModel.Arrival_azimuth(self)
    def setDistance(self, *args): return _DataModel.Arrival_setDistance(self, *args)
    def distance(self): return _DataModel.Arrival_distance(self)
    def setTakeOffAngle(self, *args): return _DataModel.Arrival_setTakeOffAngle(self, *args)
    def takeOffAngle(self): return _DataModel.Arrival_takeOffAngle(self)
    def setTimeResidual(self, *args): return _DataModel.Arrival_setTimeResidual(self, *args)
    def timeResidual(self): return _DataModel.Arrival_timeResidual(self)
    def setHorizontalSlownessResidual(self, *args): return _DataModel.Arrival_setHorizontalSlownessResidual(self, *args)
    def horizontalSlownessResidual(self): return _DataModel.Arrival_horizontalSlownessResidual(self)
    def setBackazimuthResidual(self, *args): return _DataModel.Arrival_setBackazimuthResidual(self, *args)
    def backazimuthResidual(self): return _DataModel.Arrival_backazimuthResidual(self)
    def setTimeUsed(self, *args): return _DataModel.Arrival_setTimeUsed(self, *args)
    def timeUsed(self): return _DataModel.Arrival_timeUsed(self)
    def setHorizontalSlownessUsed(self, *args): return _DataModel.Arrival_setHorizontalSlownessUsed(self, *args)
    def horizontalSlownessUsed(self): return _DataModel.Arrival_horizontalSlownessUsed(self)
    def setBackazimuthUsed(self, *args): return _DataModel.Arrival_setBackazimuthUsed(self, *args)
    def backazimuthUsed(self): return _DataModel.Arrival_backazimuthUsed(self)
    def setWeight(self, *args): return _DataModel.Arrival_setWeight(self, *args)
    def weight(self): return _DataModel.Arrival_weight(self)
    def setEarthModelID(self, *args): return _DataModel.Arrival_setEarthModelID(self, *args)
    def earthModelID(self): return _DataModel.Arrival_earthModelID(self)
    def setPreliminary(self, *args): return _DataModel.Arrival_setPreliminary(self, *args)
    def preliminary(self): return _DataModel.Arrival_preliminary(self)
    def setCreationInfo(self, *args): return _DataModel.Arrival_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Arrival_creationInfo(self, *args)
    def index(self): return _DataModel.Arrival_index(self)
    def equalIndex(self, *args): return _DataModel.Arrival_equalIndex(self, *args)
    def origin(self): return _DataModel.Arrival_origin(self)
    def assign(self, *args): return _DataModel.Arrival_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Arrival_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Arrival_detachFrom(self, *args)
    def detach(self): return _DataModel.Arrival_detach(self)
    def clone(self): return _DataModel.Arrival_clone(self)
    def accept(self, *args): return _DataModel.Arrival_accept(self, *args)
Arrival_swigregister = _DataModel.Arrival_swigregister
Arrival_swigregister(Arrival)

def Arrival_ClassName():
  return _DataModel.Arrival_ClassName()
Arrival_ClassName = _DataModel.Arrival_ClassName

def Arrival_TypeInfo():
  return _DataModel.Arrival_TypeInfo()
Arrival_TypeInfo = _DataModel.Arrival_TypeInfo

def Arrival_Cast(*args):
  return _DataModel.Arrival_Cast(*args)
Arrival_Cast = _DataModel.Arrival_Cast

def Arrival_ConstCast(*args):
  return _DataModel.Arrival_ConstCast(*args)
Arrival_ConstCast = _DataModel.Arrival_ConstCast

class Origin(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Origin, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Origin, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Origin_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Origin_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Origin_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Origin_TypeInfo)
    def className(self): return _DataModel.Origin_className(self)
    def typeInfo(self): return _DataModel.Origin_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Origin_Cast
    if _newclass:Cast = staticmethod(_DataModel.Origin_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Origin_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Origin_ConstCast)
    def serialize(self, *args): return _DataModel.Origin_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Origin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Origin
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Origin_Create
    if _newclass:Create = staticmethod(_DataModel.Origin_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Origin_Find
    if _newclass:Find = staticmethod(_DataModel.Origin_Find)
    def __eq__(self, *args): return _DataModel.Origin___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Origin___ne__(self, *args)
    def equal(self, *args): return _DataModel.Origin_equal(self, *args)
    def setTime(self, *args): return _DataModel.Origin_setTime(self, *args)
    def time(self, *args): return _DataModel.Origin_time(self, *args)
    def setLatitude(self, *args): return _DataModel.Origin_setLatitude(self, *args)
    def latitude(self, *args): return _DataModel.Origin_latitude(self, *args)
    def setLongitude(self, *args): return _DataModel.Origin_setLongitude(self, *args)
    def longitude(self, *args): return _DataModel.Origin_longitude(self, *args)
    def setDepth(self, *args): return _DataModel.Origin_setDepth(self, *args)
    def depth(self, *args): return _DataModel.Origin_depth(self, *args)
    def setDepthType(self, *args): return _DataModel.Origin_setDepthType(self, *args)
    def depthType(self): return _DataModel.Origin_depthType(self)
    def setTimeFixed(self, *args): return _DataModel.Origin_setTimeFixed(self, *args)
    def timeFixed(self): return _DataModel.Origin_timeFixed(self)
    def setEpicenterFixed(self, *args): return _DataModel.Origin_setEpicenterFixed(self, *args)
    def epicenterFixed(self): return _DataModel.Origin_epicenterFixed(self)
    def setReferenceSystemID(self, *args): return _DataModel.Origin_setReferenceSystemID(self, *args)
    def referenceSystemID(self): return _DataModel.Origin_referenceSystemID(self)
    def setMethodID(self, *args): return _DataModel.Origin_setMethodID(self, *args)
    def methodID(self): return _DataModel.Origin_methodID(self)
    def setEarthModelID(self, *args): return _DataModel.Origin_setEarthModelID(self, *args)
    def earthModelID(self): return _DataModel.Origin_earthModelID(self)
    def setQuality(self, *args): return _DataModel.Origin_setQuality(self, *args)
    def quality(self, *args): return _DataModel.Origin_quality(self, *args)
    def setUncertainty(self, *args): return _DataModel.Origin_setUncertainty(self, *args)
    def uncertainty(self, *args): return _DataModel.Origin_uncertainty(self, *args)
    def setType(self, *args): return _DataModel.Origin_setType(self, *args)
    def type(self): return _DataModel.Origin_type(self)
    def setEvaluationMode(self, *args): return _DataModel.Origin_setEvaluationMode(self, *args)
    def evaluationMode(self): return _DataModel.Origin_evaluationMode(self)
    def setEvaluationStatus(self, *args): return _DataModel.Origin_setEvaluationStatus(self, *args)
    def evaluationStatus(self): return _DataModel.Origin_evaluationStatus(self)
    def setCreationInfo(self, *args): return _DataModel.Origin_setCreationInfo(self, *args)
    def creationInfo(self, *args): return _DataModel.Origin_creationInfo(self, *args)
    def add(self, *args): return _DataModel.Origin_add(self, *args)
    def remove(self, *args): return _DataModel.Origin_remove(self, *args)
    def removeComment(self, *args): return _DataModel.Origin_removeComment(self, *args)
    def removeCompositeTime(self, *args): return _DataModel.Origin_removeCompositeTime(self, *args)
    def removeArrival(self, *args): return _DataModel.Origin_removeArrival(self, *args)
    def removeStationMagnitude(self, *args): return _DataModel.Origin_removeStationMagnitude(self, *args)
    def removeMagnitude(self, *args): return _DataModel.Origin_removeMagnitude(self, *args)
    def commentCount(self): return _DataModel.Origin_commentCount(self)
    def compositeTimeCount(self): return _DataModel.Origin_compositeTimeCount(self)
    def arrivalCount(self): return _DataModel.Origin_arrivalCount(self)
    def stationMagnitudeCount(self): return _DataModel.Origin_stationMagnitudeCount(self)
    def magnitudeCount(self): return _DataModel.Origin_magnitudeCount(self)
    def comment(self, *args): return _DataModel.Origin_comment(self, *args)
    def compositeTime(self, *args): return _DataModel.Origin_compositeTime(self, *args)
    def arrival(self, *args): return _DataModel.Origin_arrival(self, *args)
    def stationMagnitude(self, *args): return _DataModel.Origin_stationMagnitude(self, *args)
    def magnitude(self, *args): return _DataModel.Origin_magnitude(self, *args)
    def findCompositeTime(self, *args): return _DataModel.Origin_findCompositeTime(self, *args)
    def findStationMagnitude(self, *args): return _DataModel.Origin_findStationMagnitude(self, *args)
    def findMagnitude(self, *args): return _DataModel.Origin_findMagnitude(self, *args)
    def eventParameters(self): return _DataModel.Origin_eventParameters(self)
    def assign(self, *args): return _DataModel.Origin_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Origin_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Origin_detachFrom(self, *args)
    def detach(self): return _DataModel.Origin_detach(self)
    def clone(self): return _DataModel.Origin_clone(self)
    def updateChild(self, *args): return _DataModel.Origin_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Origin_accept(self, *args)
Origin_swigregister = _DataModel.Origin_swigregister
Origin_swigregister(Origin)

def Origin_ClassName():
  return _DataModel.Origin_ClassName()
Origin_ClassName = _DataModel.Origin_ClassName

def Origin_TypeInfo():
  return _DataModel.Origin_TypeInfo()
Origin_TypeInfo = _DataModel.Origin_TypeInfo

def Origin_Cast(*args):
  return _DataModel.Origin_Cast(*args)
Origin_Cast = _DataModel.Origin_Cast

def Origin_ConstCast(*args):
  return _DataModel.Origin_ConstCast(*args)
Origin_ConstCast = _DataModel.Origin_ConstCast

def Origin_Create(*args):
  return _DataModel.Origin_Create(*args)
Origin_Create = _DataModel.Origin_Create

def Origin_Find(*args):
  return _DataModel.Origin_Find(*args)
Origin_Find = _DataModel.Origin_Find

class EventParameters(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParameters, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.EventParameters_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.EventParameters_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.EventParameters_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.EventParameters_TypeInfo)
    def className(self): return _DataModel.EventParameters_className(self)
    def typeInfo(self): return _DataModel.EventParameters_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.EventParameters_Cast
    if _newclass:Cast = staticmethod(_DataModel.EventParameters_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.EventParameters_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.EventParameters_ConstCast)
    def serialize(self, *args): return _DataModel.EventParameters_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_EventParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_EventParameters
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.EventParameters___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.EventParameters___ne__(self, *args)
    def equal(self, *args): return _DataModel.EventParameters_equal(self, *args)
    def add(self, *args): return _DataModel.EventParameters_add(self, *args)
    def remove(self, *args): return _DataModel.EventParameters_remove(self, *args)
    def removePick(self, *args): return _DataModel.EventParameters_removePick(self, *args)
    def removeAmplitude(self, *args): return _DataModel.EventParameters_removeAmplitude(self, *args)
    def removeReading(self, *args): return _DataModel.EventParameters_removeReading(self, *args)
    def removeOrigin(self, *args): return _DataModel.EventParameters_removeOrigin(self, *args)
    def removeFocalMechanism(self, *args): return _DataModel.EventParameters_removeFocalMechanism(self, *args)
    def removeEvent(self, *args): return _DataModel.EventParameters_removeEvent(self, *args)
    def pickCount(self): return _DataModel.EventParameters_pickCount(self)
    def amplitudeCount(self): return _DataModel.EventParameters_amplitudeCount(self)
    def readingCount(self): return _DataModel.EventParameters_readingCount(self)
    def originCount(self): return _DataModel.EventParameters_originCount(self)
    def focalMechanismCount(self): return _DataModel.EventParameters_focalMechanismCount(self)
    def eventCount(self): return _DataModel.EventParameters_eventCount(self)
    def pick(self, *args): return _DataModel.EventParameters_pick(self, *args)
    def amplitude(self, *args): return _DataModel.EventParameters_amplitude(self, *args)
    def reading(self, *args): return _DataModel.EventParameters_reading(self, *args)
    def origin(self, *args): return _DataModel.EventParameters_origin(self, *args)
    def focalMechanism(self, *args): return _DataModel.EventParameters_focalMechanism(self, *args)
    def event(self, *args): return _DataModel.EventParameters_event(self, *args)
    def findPick(self, *args): return _DataModel.EventParameters_findPick(self, *args)
    def findAmplitude(self, *args): return _DataModel.EventParameters_findAmplitude(self, *args)
    def findReading(self, *args): return _DataModel.EventParameters_findReading(self, *args)
    def findOrigin(self, *args): return _DataModel.EventParameters_findOrigin(self, *args)
    def findFocalMechanism(self, *args): return _DataModel.EventParameters_findFocalMechanism(self, *args)
    def findEvent(self, *args): return _DataModel.EventParameters_findEvent(self, *args)
    def assign(self, *args): return _DataModel.EventParameters_assign(self, *args)
    def attachTo(self, *args): return _DataModel.EventParameters_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.EventParameters_detachFrom(self, *args)
    def detach(self): return _DataModel.EventParameters_detach(self)
    def clone(self): return _DataModel.EventParameters_clone(self)
    def updateChild(self, *args): return _DataModel.EventParameters_updateChild(self, *args)
    def accept(self, *args): return _DataModel.EventParameters_accept(self, *args)
EventParameters_swigregister = _DataModel.EventParameters_swigregister
EventParameters_swigregister(EventParameters)

def EventParameters_ClassName():
  return _DataModel.EventParameters_ClassName()
EventParameters_ClassName = _DataModel.EventParameters_ClassName

def EventParameters_TypeInfo():
  return _DataModel.EventParameters_TypeInfo()
EventParameters_TypeInfo = _DataModel.EventParameters_TypeInfo

def EventParameters_Cast(*args):
  return _DataModel.EventParameters_Cast(*args)
EventParameters_Cast = _DataModel.EventParameters_Cast

def EventParameters_ConstCast(*args):
  return _DataModel.EventParameters_ConstCast(*args)
EventParameters_ConstCast = _DataModel.EventParameters_ConstCast

class Parameter(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Parameter_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Parameter_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Parameter_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Parameter_TypeInfo)
    def className(self): return _DataModel.Parameter_className(self)
    def typeInfo(self): return _DataModel.Parameter_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Parameter_Cast
    if _newclass:Cast = staticmethod(_DataModel.Parameter_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Parameter_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Parameter_ConstCast)
    def serialize(self, *args): return _DataModel.Parameter_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Parameter
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Parameter_Create
    if _newclass:Create = staticmethod(_DataModel.Parameter_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Parameter_Find
    if _newclass:Find = staticmethod(_DataModel.Parameter_Find)
    def __eq__(self, *args): return _DataModel.Parameter___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Parameter___ne__(self, *args)
    def equal(self, *args): return _DataModel.Parameter_equal(self, *args)
    def setName(self, *args): return _DataModel.Parameter_setName(self, *args)
    def name(self): return _DataModel.Parameter_name(self)
    def setValue(self, *args): return _DataModel.Parameter_setValue(self, *args)
    def value(self): return _DataModel.Parameter_value(self)
    def add(self, *args): return _DataModel.Parameter_add(self, *args)
    def remove(self, *args): return _DataModel.Parameter_remove(self, *args)
    def removeComment(self, *args): return _DataModel.Parameter_removeComment(self, *args)
    def commentCount(self): return _DataModel.Parameter_commentCount(self)
    def comment(self, *args): return _DataModel.Parameter_comment(self, *args)
    def parameterSet(self): return _DataModel.Parameter_parameterSet(self)
    def assign(self, *args): return _DataModel.Parameter_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Parameter_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Parameter_detachFrom(self, *args)
    def detach(self): return _DataModel.Parameter_detach(self)
    def clone(self): return _DataModel.Parameter_clone(self)
    def updateChild(self, *args): return _DataModel.Parameter_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Parameter_accept(self, *args)
Parameter_swigregister = _DataModel.Parameter_swigregister
Parameter_swigregister(Parameter)

def Parameter_ClassName():
  return _DataModel.Parameter_ClassName()
Parameter_ClassName = _DataModel.Parameter_ClassName

def Parameter_TypeInfo():
  return _DataModel.Parameter_TypeInfo()
Parameter_TypeInfo = _DataModel.Parameter_TypeInfo

def Parameter_Cast(*args):
  return _DataModel.Parameter_Cast(*args)
Parameter_Cast = _DataModel.Parameter_Cast

def Parameter_ConstCast(*args):
  return _DataModel.Parameter_ConstCast(*args)
Parameter_ConstCast = _DataModel.Parameter_ConstCast

def Parameter_Create(*args):
  return _DataModel.Parameter_Create(*args)
Parameter_Create = _DataModel.Parameter_Create

def Parameter_Find(*args):
  return _DataModel.Parameter_Find(*args)
Parameter_Find = _DataModel.Parameter_Find

class ParameterSet(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ParameterSet_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ParameterSet_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ParameterSet_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ParameterSet_TypeInfo)
    def className(self): return _DataModel.ParameterSet_className(self)
    def typeInfo(self): return _DataModel.ParameterSet_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ParameterSet_Cast
    if _newclass:Cast = staticmethod(_DataModel.ParameterSet_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ParameterSet_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ParameterSet_ConstCast)
    def serialize(self, *args): return _DataModel.ParameterSet_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ParameterSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ParameterSet
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ParameterSet_Create
    if _newclass:Create = staticmethod(_DataModel.ParameterSet_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ParameterSet_Find
    if _newclass:Find = staticmethod(_DataModel.ParameterSet_Find)
    def __eq__(self, *args): return _DataModel.ParameterSet___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ParameterSet___ne__(self, *args)
    def equal(self, *args): return _DataModel.ParameterSet_equal(self, *args)
    def setBaseID(self, *args): return _DataModel.ParameterSet_setBaseID(self, *args)
    def baseID(self): return _DataModel.ParameterSet_baseID(self)
    def setModuleID(self, *args): return _DataModel.ParameterSet_setModuleID(self, *args)
    def moduleID(self): return _DataModel.ParameterSet_moduleID(self)
    def setCreated(self, *args): return _DataModel.ParameterSet_setCreated(self, *args)
    def created(self): return _DataModel.ParameterSet_created(self)
    def add(self, *args): return _DataModel.ParameterSet_add(self, *args)
    def remove(self, *args): return _DataModel.ParameterSet_remove(self, *args)
    def removeParameter(self, *args): return _DataModel.ParameterSet_removeParameter(self, *args)
    def removeComment(self, *args): return _DataModel.ParameterSet_removeComment(self, *args)
    def parameterCount(self): return _DataModel.ParameterSet_parameterCount(self)
    def commentCount(self): return _DataModel.ParameterSet_commentCount(self)
    def parameter(self, *args): return _DataModel.ParameterSet_parameter(self, *args)
    def comment(self, *args): return _DataModel.ParameterSet_comment(self, *args)
    def findParameter(self, *args): return _DataModel.ParameterSet_findParameter(self, *args)
    def config(self): return _DataModel.ParameterSet_config(self)
    def assign(self, *args): return _DataModel.ParameterSet_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ParameterSet_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ParameterSet_detachFrom(self, *args)
    def detach(self): return _DataModel.ParameterSet_detach(self)
    def clone(self): return _DataModel.ParameterSet_clone(self)
    def updateChild(self, *args): return _DataModel.ParameterSet_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ParameterSet_accept(self, *args)
ParameterSet_swigregister = _DataModel.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)

def ParameterSet_ClassName():
  return _DataModel.ParameterSet_ClassName()
ParameterSet_ClassName = _DataModel.ParameterSet_ClassName

def ParameterSet_TypeInfo():
  return _DataModel.ParameterSet_TypeInfo()
ParameterSet_TypeInfo = _DataModel.ParameterSet_TypeInfo

def ParameterSet_Cast(*args):
  return _DataModel.ParameterSet_Cast(*args)
ParameterSet_Cast = _DataModel.ParameterSet_Cast

def ParameterSet_ConstCast(*args):
  return _DataModel.ParameterSet_ConstCast(*args)
ParameterSet_ConstCast = _DataModel.ParameterSet_ConstCast

def ParameterSet_Create(*args):
  return _DataModel.ParameterSet_Create(*args)
ParameterSet_Create = _DataModel.ParameterSet_Create

def ParameterSet_Find(*args):
  return _DataModel.ParameterSet_Find(*args)
ParameterSet_Find = _DataModel.ParameterSet_Find

class SetupIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetupIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetupIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_SetupIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.SetupIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SetupIndex___ne__(self, *args)
    __swig_setmethods__["name"] = _DataModel.SetupIndex_name_set
    __swig_getmethods__["name"] = _DataModel.SetupIndex_name_get
    if _newclass:name = _swig_property(_DataModel.SetupIndex_name_get, _DataModel.SetupIndex_name_set)
    __swig_destroy__ = _DataModel.delete_SetupIndex
    __del__ = lambda self : None;
SetupIndex_swigregister = _DataModel.SetupIndex_swigregister
SetupIndex_swigregister(SetupIndex)

class Setup(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Setup, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Setup, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Setup_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Setup_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Setup_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Setup_TypeInfo)
    def className(self): return _DataModel.Setup_className(self)
    def typeInfo(self): return _DataModel.Setup_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Setup_Cast
    if _newclass:Cast = staticmethod(_DataModel.Setup_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Setup_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Setup_ConstCast)
    def serialize(self, *args): return _DataModel.Setup_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Setup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Setup
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Setup___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Setup___ne__(self, *args)
    def equal(self, *args): return _DataModel.Setup_equal(self, *args)
    def setName(self, *args): return _DataModel.Setup_setName(self, *args)
    def name(self): return _DataModel.Setup_name(self)
    def setParameterSetID(self, *args): return _DataModel.Setup_setParameterSetID(self, *args)
    def parameterSetID(self): return _DataModel.Setup_parameterSetID(self)
    def setEnabled(self, *args): return _DataModel.Setup_setEnabled(self, *args)
    def enabled(self): return _DataModel.Setup_enabled(self)
    def index(self): return _DataModel.Setup_index(self)
    def equalIndex(self, *args): return _DataModel.Setup_equalIndex(self, *args)
    def configStation(self): return _DataModel.Setup_configStation(self)
    def assign(self, *args): return _DataModel.Setup_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Setup_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Setup_detachFrom(self, *args)
    def detach(self): return _DataModel.Setup_detach(self)
    def clone(self): return _DataModel.Setup_clone(self)
    def accept(self, *args): return _DataModel.Setup_accept(self, *args)
Setup_swigregister = _DataModel.Setup_swigregister
Setup_swigregister(Setup)

def Setup_ClassName():
  return _DataModel.Setup_ClassName()
Setup_ClassName = _DataModel.Setup_ClassName

def Setup_TypeInfo():
  return _DataModel.Setup_TypeInfo()
Setup_TypeInfo = _DataModel.Setup_TypeInfo

def Setup_Cast(*args):
  return _DataModel.Setup_Cast(*args)
Setup_Cast = _DataModel.Setup_Cast

def Setup_ConstCast(*args):
  return _DataModel.Setup_ConstCast(*args)
Setup_ConstCast = _DataModel.Setup_ConstCast

class ConfigStationIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_ConfigStationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.ConfigStationIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ConfigStationIndex___ne__(self, *args)
    __swig_setmethods__["networkCode"] = _DataModel.ConfigStationIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.ConfigStationIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.ConfigStationIndex_networkCode_get, _DataModel.ConfigStationIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.ConfigStationIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.ConfigStationIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.ConfigStationIndex_stationCode_get, _DataModel.ConfigStationIndex_stationCode_set)
    __swig_destroy__ = _DataModel.delete_ConfigStationIndex
    __del__ = lambda self : None;
ConfigStationIndex_swigregister = _DataModel.ConfigStationIndex_swigregister
ConfigStationIndex_swigregister(ConfigStationIndex)

class ConfigStation(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStation, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStation, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ConfigStation_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ConfigStation_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ConfigStation_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ConfigStation_TypeInfo)
    def className(self): return _DataModel.ConfigStation_className(self)
    def typeInfo(self): return _DataModel.ConfigStation_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ConfigStation_Cast
    if _newclass:Cast = staticmethod(_DataModel.ConfigStation_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ConfigStation_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ConfigStation_ConstCast)
    def serialize(self, *args): return _DataModel.ConfigStation_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ConfigStation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfigStation
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ConfigStation_Create
    if _newclass:Create = staticmethod(_DataModel.ConfigStation_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ConfigStation_Find
    if _newclass:Find = staticmethod(_DataModel.ConfigStation_Find)
    def __eq__(self, *args): return _DataModel.ConfigStation___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ConfigStation___ne__(self, *args)
    def equal(self, *args): return _DataModel.ConfigStation_equal(self, *args)
    def setNetworkCode(self, *args): return _DataModel.ConfigStation_setNetworkCode(self, *args)
    def networkCode(self): return _DataModel.ConfigStation_networkCode(self)
    def setStationCode(self, *args): return _DataModel.ConfigStation_setStationCode(self, *args)
    def stationCode(self): return _DataModel.ConfigStation_stationCode(self)
    def setEnabled(self, *args): return _DataModel.ConfigStation_setEnabled(self, *args)
    def enabled(self): return _DataModel.ConfigStation_enabled(self)
    def index(self): return _DataModel.ConfigStation_index(self)
    def equalIndex(self, *args): return _DataModel.ConfigStation_equalIndex(self, *args)
    def add(self, *args): return _DataModel.ConfigStation_add(self, *args)
    def remove(self, *args): return _DataModel.ConfigStation_remove(self, *args)
    def removeSetup(self, *args): return _DataModel.ConfigStation_removeSetup(self, *args)
    def setupCount(self): return _DataModel.ConfigStation_setupCount(self)
    def setup(self, *args): return _DataModel.ConfigStation_setup(self, *args)
    def configModule(self): return _DataModel.ConfigStation_configModule(self)
    def assign(self, *args): return _DataModel.ConfigStation_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ConfigStation_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ConfigStation_detachFrom(self, *args)
    def detach(self): return _DataModel.ConfigStation_detach(self)
    def clone(self): return _DataModel.ConfigStation_clone(self)
    def updateChild(self, *args): return _DataModel.ConfigStation_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ConfigStation_accept(self, *args)
ConfigStation_swigregister = _DataModel.ConfigStation_swigregister
ConfigStation_swigregister(ConfigStation)

def ConfigStation_ClassName():
  return _DataModel.ConfigStation_ClassName()
ConfigStation_ClassName = _DataModel.ConfigStation_ClassName

def ConfigStation_TypeInfo():
  return _DataModel.ConfigStation_TypeInfo()
ConfigStation_TypeInfo = _DataModel.ConfigStation_TypeInfo

def ConfigStation_Cast(*args):
  return _DataModel.ConfigStation_Cast(*args)
ConfigStation_Cast = _DataModel.ConfigStation_Cast

def ConfigStation_ConstCast(*args):
  return _DataModel.ConfigStation_ConstCast(*args)
ConfigStation_ConstCast = _DataModel.ConfigStation_ConstCast

def ConfigStation_Create(*args):
  return _DataModel.ConfigStation_Create(*args)
ConfigStation_Create = _DataModel.ConfigStation_Create

def ConfigStation_Find(*args):
  return _DataModel.ConfigStation_Find(*args)
ConfigStation_Find = _DataModel.ConfigStation_Find

class ConfigModule(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigModule, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigModule, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.ConfigModule_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.ConfigModule_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.ConfigModule_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.ConfigModule_TypeInfo)
    def className(self): return _DataModel.ConfigModule_className(self)
    def typeInfo(self): return _DataModel.ConfigModule_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.ConfigModule_Cast
    if _newclass:Cast = staticmethod(_DataModel.ConfigModule_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.ConfigModule_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.ConfigModule_ConstCast)
    def serialize(self, *args): return _DataModel.ConfigModule_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_ConfigModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfigModule
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.ConfigModule_Create
    if _newclass:Create = staticmethod(_DataModel.ConfigModule_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.ConfigModule_Find
    if _newclass:Find = staticmethod(_DataModel.ConfigModule_Find)
    def __eq__(self, *args): return _DataModel.ConfigModule___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.ConfigModule___ne__(self, *args)
    def equal(self, *args): return _DataModel.ConfigModule_equal(self, *args)
    def setName(self, *args): return _DataModel.ConfigModule_setName(self, *args)
    def name(self): return _DataModel.ConfigModule_name(self)
    def setParameterSetID(self, *args): return _DataModel.ConfigModule_setParameterSetID(self, *args)
    def parameterSetID(self): return _DataModel.ConfigModule_parameterSetID(self)
    def setEnabled(self, *args): return _DataModel.ConfigModule_setEnabled(self, *args)
    def enabled(self): return _DataModel.ConfigModule_enabled(self)
    def add(self, *args): return _DataModel.ConfigModule_add(self, *args)
    def remove(self, *args): return _DataModel.ConfigModule_remove(self, *args)
    def removeConfigStation(self, *args): return _DataModel.ConfigModule_removeConfigStation(self, *args)
    def configStationCount(self): return _DataModel.ConfigModule_configStationCount(self)
    def configStation(self, *args): return _DataModel.ConfigModule_configStation(self, *args)
    def findConfigStation(self, *args): return _DataModel.ConfigModule_findConfigStation(self, *args)
    def config(self): return _DataModel.ConfigModule_config(self)
    def assign(self, *args): return _DataModel.ConfigModule_assign(self, *args)
    def attachTo(self, *args): return _DataModel.ConfigModule_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.ConfigModule_detachFrom(self, *args)
    def detach(self): return _DataModel.ConfigModule_detach(self)
    def clone(self): return _DataModel.ConfigModule_clone(self)
    def updateChild(self, *args): return _DataModel.ConfigModule_updateChild(self, *args)
    def accept(self, *args): return _DataModel.ConfigModule_accept(self, *args)
ConfigModule_swigregister = _DataModel.ConfigModule_swigregister
ConfigModule_swigregister(ConfigModule)

def ConfigModule_ClassName():
  return _DataModel.ConfigModule_ClassName()
ConfigModule_ClassName = _DataModel.ConfigModule_ClassName

def ConfigModule_TypeInfo():
  return _DataModel.ConfigModule_TypeInfo()
ConfigModule_TypeInfo = _DataModel.ConfigModule_TypeInfo

def ConfigModule_Cast(*args):
  return _DataModel.ConfigModule_Cast(*args)
ConfigModule_Cast = _DataModel.ConfigModule_Cast

def ConfigModule_ConstCast(*args):
  return _DataModel.ConfigModule_ConstCast(*args)
ConfigModule_ConstCast = _DataModel.ConfigModule_ConstCast

def ConfigModule_Create(*args):
  return _DataModel.ConfigModule_Create(*args)
ConfigModule_Create = _DataModel.ConfigModule_Create

def ConfigModule_Find(*args):
  return _DataModel.ConfigModule_Find(*args)
ConfigModule_Find = _DataModel.ConfigModule_Find

class Config(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Config_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Config_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Config_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Config_TypeInfo)
    def className(self): return _DataModel.Config_className(self)
    def typeInfo(self): return _DataModel.Config_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Config_Cast
    if _newclass:Cast = staticmethod(_DataModel.Config_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Config_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Config_ConstCast)
    def serialize(self, *args): return _DataModel.Config_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Config
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Config___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Config___ne__(self, *args)
    def equal(self, *args): return _DataModel.Config_equal(self, *args)
    def add(self, *args): return _DataModel.Config_add(self, *args)
    def remove(self, *args): return _DataModel.Config_remove(self, *args)
    def removeParameterSet(self, *args): return _DataModel.Config_removeParameterSet(self, *args)
    def removeConfigModule(self, *args): return _DataModel.Config_removeConfigModule(self, *args)
    def parameterSetCount(self): return _DataModel.Config_parameterSetCount(self)
    def configModuleCount(self): return _DataModel.Config_configModuleCount(self)
    def parameterSet(self, *args): return _DataModel.Config_parameterSet(self, *args)
    def configModule(self, *args): return _DataModel.Config_configModule(self, *args)
    def findParameterSet(self, *args): return _DataModel.Config_findParameterSet(self, *args)
    def findConfigModule(self, *args): return _DataModel.Config_findConfigModule(self, *args)
    def assign(self, *args): return _DataModel.Config_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Config_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Config_detachFrom(self, *args)
    def detach(self): return _DataModel.Config_detach(self)
    def clone(self): return _DataModel.Config_clone(self)
    def updateChild(self, *args): return _DataModel.Config_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Config_accept(self, *args)
Config_swigregister = _DataModel.Config_swigregister
Config_swigregister(Config)

def Config_ClassName():
  return _DataModel.Config_ClassName()
Config_ClassName = _DataModel.Config_ClassName

def Config_TypeInfo():
  return _DataModel.Config_TypeInfo()
Config_TypeInfo = _DataModel.Config_TypeInfo

def Config_Cast(*args):
  return _DataModel.Config_Cast(*args)
Config_Cast = _DataModel.Config_Cast

def Config_ConstCast(*args):
  return _DataModel.Config_ConstCast(*args)
Config_ConstCast = _DataModel.Config_ConstCast

class RouteArclinkIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteArclinkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteArclinkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_RouteArclinkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.RouteArclinkIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RouteArclinkIndex___ne__(self, *args)
    __swig_setmethods__["address"] = _DataModel.RouteArclinkIndex_address_set
    __swig_getmethods__["address"] = _DataModel.RouteArclinkIndex_address_get
    if _newclass:address = _swig_property(_DataModel.RouteArclinkIndex_address_get, _DataModel.RouteArclinkIndex_address_set)
    __swig_setmethods__["start"] = _DataModel.RouteArclinkIndex_start_set
    __swig_getmethods__["start"] = _DataModel.RouteArclinkIndex_start_get
    if _newclass:start = _swig_property(_DataModel.RouteArclinkIndex_start_get, _DataModel.RouteArclinkIndex_start_set)
    __swig_destroy__ = _DataModel.delete_RouteArclinkIndex
    __del__ = lambda self : None;
RouteArclinkIndex_swigregister = _DataModel.RouteArclinkIndex_swigregister
RouteArclinkIndex_swigregister(RouteArclinkIndex)

class RouteArclink(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteArclink, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouteArclink, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.RouteArclink_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.RouteArclink_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.RouteArclink_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.RouteArclink_TypeInfo)
    def className(self): return _DataModel.RouteArclink_className(self)
    def typeInfo(self): return _DataModel.RouteArclink_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.RouteArclink_Cast
    if _newclass:Cast = staticmethod(_DataModel.RouteArclink_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.RouteArclink_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.RouteArclink_ConstCast)
    def serialize(self, *args): return _DataModel.RouteArclink_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_RouteArclink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RouteArclink
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.RouteArclink___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RouteArclink___ne__(self, *args)
    def equal(self, *args): return _DataModel.RouteArclink_equal(self, *args)
    def setAddress(self, *args): return _DataModel.RouteArclink_setAddress(self, *args)
    def address(self): return _DataModel.RouteArclink_address(self)
    def setStart(self, *args): return _DataModel.RouteArclink_setStart(self, *args)
    def start(self): return _DataModel.RouteArclink_start(self)
    def setEnd(self, *args): return _DataModel.RouteArclink_setEnd(self, *args)
    def end(self): return _DataModel.RouteArclink_end(self)
    def setPriority(self, *args): return _DataModel.RouteArclink_setPriority(self, *args)
    def priority(self): return _DataModel.RouteArclink_priority(self)
    def index(self): return _DataModel.RouteArclink_index(self)
    def equalIndex(self, *args): return _DataModel.RouteArclink_equalIndex(self, *args)
    def route(self): return _DataModel.RouteArclink_route(self)
    def assign(self, *args): return _DataModel.RouteArclink_assign(self, *args)
    def attachTo(self, *args): return _DataModel.RouteArclink_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.RouteArclink_detachFrom(self, *args)
    def detach(self): return _DataModel.RouteArclink_detach(self)
    def clone(self): return _DataModel.RouteArclink_clone(self)
    def accept(self, *args): return _DataModel.RouteArclink_accept(self, *args)
RouteArclink_swigregister = _DataModel.RouteArclink_swigregister
RouteArclink_swigregister(RouteArclink)

def RouteArclink_ClassName():
  return _DataModel.RouteArclink_ClassName()
RouteArclink_ClassName = _DataModel.RouteArclink_ClassName

def RouteArclink_TypeInfo():
  return _DataModel.RouteArclink_TypeInfo()
RouteArclink_TypeInfo = _DataModel.RouteArclink_TypeInfo

def RouteArclink_Cast(*args):
  return _DataModel.RouteArclink_Cast(*args)
RouteArclink_Cast = _DataModel.RouteArclink_Cast

def RouteArclink_ConstCast(*args):
  return _DataModel.RouteArclink_ConstCast(*args)
RouteArclink_ConstCast = _DataModel.RouteArclink_ConstCast

class RouteSeedlinkIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteSeedlinkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteSeedlinkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_RouteSeedlinkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.RouteSeedlinkIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RouteSeedlinkIndex___ne__(self, *args)
    __swig_setmethods__["address"] = _DataModel.RouteSeedlinkIndex_address_set
    __swig_getmethods__["address"] = _DataModel.RouteSeedlinkIndex_address_get
    if _newclass:address = _swig_property(_DataModel.RouteSeedlinkIndex_address_get, _DataModel.RouteSeedlinkIndex_address_set)
    __swig_destroy__ = _DataModel.delete_RouteSeedlinkIndex
    __del__ = lambda self : None;
RouteSeedlinkIndex_swigregister = _DataModel.RouteSeedlinkIndex_swigregister
RouteSeedlinkIndex_swigregister(RouteSeedlinkIndex)

class RouteSeedlink(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteSeedlink, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouteSeedlink, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.RouteSeedlink_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.RouteSeedlink_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.RouteSeedlink_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.RouteSeedlink_TypeInfo)
    def className(self): return _DataModel.RouteSeedlink_className(self)
    def typeInfo(self): return _DataModel.RouteSeedlink_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.RouteSeedlink_Cast
    if _newclass:Cast = staticmethod(_DataModel.RouteSeedlink_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.RouteSeedlink_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.RouteSeedlink_ConstCast)
    def serialize(self, *args): return _DataModel.RouteSeedlink_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_RouteSeedlink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RouteSeedlink
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.RouteSeedlink___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RouteSeedlink___ne__(self, *args)
    def equal(self, *args): return _DataModel.RouteSeedlink_equal(self, *args)
    def setAddress(self, *args): return _DataModel.RouteSeedlink_setAddress(self, *args)
    def address(self): return _DataModel.RouteSeedlink_address(self)
    def setPriority(self, *args): return _DataModel.RouteSeedlink_setPriority(self, *args)
    def priority(self): return _DataModel.RouteSeedlink_priority(self)
    def index(self): return _DataModel.RouteSeedlink_index(self)
    def equalIndex(self, *args): return _DataModel.RouteSeedlink_equalIndex(self, *args)
    def route(self): return _DataModel.RouteSeedlink_route(self)
    def assign(self, *args): return _DataModel.RouteSeedlink_assign(self, *args)
    def attachTo(self, *args): return _DataModel.RouteSeedlink_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.RouteSeedlink_detachFrom(self, *args)
    def detach(self): return _DataModel.RouteSeedlink_detach(self)
    def clone(self): return _DataModel.RouteSeedlink_clone(self)
    def accept(self, *args): return _DataModel.RouteSeedlink_accept(self, *args)
RouteSeedlink_swigregister = _DataModel.RouteSeedlink_swigregister
RouteSeedlink_swigregister(RouteSeedlink)

def RouteSeedlink_ClassName():
  return _DataModel.RouteSeedlink_ClassName()
RouteSeedlink_ClassName = _DataModel.RouteSeedlink_ClassName

def RouteSeedlink_TypeInfo():
  return _DataModel.RouteSeedlink_TypeInfo()
RouteSeedlink_TypeInfo = _DataModel.RouteSeedlink_TypeInfo

def RouteSeedlink_Cast(*args):
  return _DataModel.RouteSeedlink_Cast(*args)
RouteSeedlink_Cast = _DataModel.RouteSeedlink_Cast

def RouteSeedlink_ConstCast(*args):
  return _DataModel.RouteSeedlink_ConstCast(*args)
RouteSeedlink_ConstCast = _DataModel.RouteSeedlink_ConstCast

class RouteIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_RouteIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.RouteIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.RouteIndex___ne__(self, *args)
    __swig_setmethods__["networkCode"] = _DataModel.RouteIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.RouteIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.RouteIndex_networkCode_get, _DataModel.RouteIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.RouteIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.RouteIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.RouteIndex_stationCode_get, _DataModel.RouteIndex_stationCode_set)
    __swig_setmethods__["locationCode"] = _DataModel.RouteIndex_locationCode_set
    __swig_getmethods__["locationCode"] = _DataModel.RouteIndex_locationCode_get
    if _newclass:locationCode = _swig_property(_DataModel.RouteIndex_locationCode_get, _DataModel.RouteIndex_locationCode_set)
    __swig_setmethods__["streamCode"] = _DataModel.RouteIndex_streamCode_set
    __swig_getmethods__["streamCode"] = _DataModel.RouteIndex_streamCode_get
    if _newclass:streamCode = _swig_property(_DataModel.RouteIndex_streamCode_get, _DataModel.RouteIndex_streamCode_set)
    __swig_destroy__ = _DataModel.delete_RouteIndex
    __del__ = lambda self : None;
RouteIndex_swigregister = _DataModel.RouteIndex_swigregister
RouteIndex_swigregister(RouteIndex)

class Route(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Route, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Route, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Route_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Route_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Route_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Route_TypeInfo)
    def className(self): return _DataModel.Route_className(self)
    def typeInfo(self): return _DataModel.Route_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Route_Cast
    if _newclass:Cast = staticmethod(_DataModel.Route_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Route_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Route_ConstCast)
    def serialize(self, *args): return _DataModel.Route_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Route(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Route
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _DataModel.Route_Create
    if _newclass:Create = staticmethod(_DataModel.Route_Create)
    __swig_getmethods__["Find"] = lambda x: _DataModel.Route_Find
    if _newclass:Find = staticmethod(_DataModel.Route_Find)
    def __eq__(self, *args): return _DataModel.Route___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Route___ne__(self, *args)
    def equal(self, *args): return _DataModel.Route_equal(self, *args)
    def setNetworkCode(self, *args): return _DataModel.Route_setNetworkCode(self, *args)
    def networkCode(self): return _DataModel.Route_networkCode(self)
    def setStationCode(self, *args): return _DataModel.Route_setStationCode(self, *args)
    def stationCode(self): return _DataModel.Route_stationCode(self)
    def setLocationCode(self, *args): return _DataModel.Route_setLocationCode(self, *args)
    def locationCode(self): return _DataModel.Route_locationCode(self)
    def setStreamCode(self, *args): return _DataModel.Route_setStreamCode(self, *args)
    def streamCode(self): return _DataModel.Route_streamCode(self)
    def index(self): return _DataModel.Route_index(self)
    def equalIndex(self, *args): return _DataModel.Route_equalIndex(self, *args)
    def add(self, *args): return _DataModel.Route_add(self, *args)
    def remove(self, *args): return _DataModel.Route_remove(self, *args)
    def removeRouteArclink(self, *args): return _DataModel.Route_removeRouteArclink(self, *args)
    def removeRouteSeedlink(self, *args): return _DataModel.Route_removeRouteSeedlink(self, *args)
    def routeArclinkCount(self): return _DataModel.Route_routeArclinkCount(self)
    def routeSeedlinkCount(self): return _DataModel.Route_routeSeedlinkCount(self)
    def routeArclink(self, *args): return _DataModel.Route_routeArclink(self, *args)
    def routeSeedlink(self, *args): return _DataModel.Route_routeSeedlink(self, *args)
    def routing(self): return _DataModel.Route_routing(self)
    def assign(self, *args): return _DataModel.Route_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Route_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Route_detachFrom(self, *args)
    def detach(self): return _DataModel.Route_detach(self)
    def clone(self): return _DataModel.Route_clone(self)
    def updateChild(self, *args): return _DataModel.Route_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Route_accept(self, *args)
Route_swigregister = _DataModel.Route_swigregister
Route_swigregister(Route)

def Route_ClassName():
  return _DataModel.Route_ClassName()
Route_ClassName = _DataModel.Route_ClassName

def Route_TypeInfo():
  return _DataModel.Route_TypeInfo()
Route_TypeInfo = _DataModel.Route_TypeInfo

def Route_Cast(*args):
  return _DataModel.Route_Cast(*args)
Route_Cast = _DataModel.Route_Cast

def Route_ConstCast(*args):
  return _DataModel.Route_ConstCast(*args)
Route_ConstCast = _DataModel.Route_ConstCast

def Route_Create(*args):
  return _DataModel.Route_Create(*args)
Route_Create = _DataModel.Route_Create

def Route_Find(*args):
  return _DataModel.Route_Find(*args)
Route_Find = _DataModel.Route_Find

class AccessIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_AccessIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _DataModel.AccessIndex___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.AccessIndex___ne__(self, *args)
    __swig_setmethods__["networkCode"] = _DataModel.AccessIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.AccessIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.AccessIndex_networkCode_get, _DataModel.AccessIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.AccessIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.AccessIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.AccessIndex_stationCode_get, _DataModel.AccessIndex_stationCode_set)
    __swig_setmethods__["locationCode"] = _DataModel.AccessIndex_locationCode_set
    __swig_getmethods__["locationCode"] = _DataModel.AccessIndex_locationCode_get
    if _newclass:locationCode = _swig_property(_DataModel.AccessIndex_locationCode_get, _DataModel.AccessIndex_locationCode_set)
    __swig_setmethods__["streamCode"] = _DataModel.AccessIndex_streamCode_set
    __swig_getmethods__["streamCode"] = _DataModel.AccessIndex_streamCode_get
    if _newclass:streamCode = _swig_property(_DataModel.AccessIndex_streamCode_get, _DataModel.AccessIndex_streamCode_set)
    __swig_setmethods__["user"] = _DataModel.AccessIndex_user_set
    __swig_getmethods__["user"] = _DataModel.AccessIndex_user_get
    if _newclass:user = _swig_property(_DataModel.AccessIndex_user_get, _DataModel.AccessIndex_user_set)
    __swig_setmethods__["start"] = _DataModel.AccessIndex_start_set
    __swig_getmethods__["start"] = _DataModel.AccessIndex_start_get
    if _newclass:start = _swig_property(_DataModel.AccessIndex_start_get, _DataModel.AccessIndex_start_set)
    __swig_destroy__ = _DataModel.delete_AccessIndex
    __del__ = lambda self : None;
AccessIndex_swigregister = _DataModel.AccessIndex_swigregister
AccessIndex_swigregister(AccessIndex)

class Access(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Access_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Access_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Access_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Access_TypeInfo)
    def className(self): return _DataModel.Access_className(self)
    def typeInfo(self): return _DataModel.Access_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Access_Cast
    if _newclass:Cast = staticmethod(_DataModel.Access_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Access_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Access_ConstCast)
    def serialize(self, *args): return _DataModel.Access_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Access(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Access
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Access___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Access___ne__(self, *args)
    def equal(self, *args): return _DataModel.Access_equal(self, *args)
    def setNetworkCode(self, *args): return _DataModel.Access_setNetworkCode(self, *args)
    def networkCode(self): return _DataModel.Access_networkCode(self)
    def setStationCode(self, *args): return _DataModel.Access_setStationCode(self, *args)
    def stationCode(self): return _DataModel.Access_stationCode(self)
    def setLocationCode(self, *args): return _DataModel.Access_setLocationCode(self, *args)
    def locationCode(self): return _DataModel.Access_locationCode(self)
    def setStreamCode(self, *args): return _DataModel.Access_setStreamCode(self, *args)
    def streamCode(self): return _DataModel.Access_streamCode(self)
    def setUser(self, *args): return _DataModel.Access_setUser(self, *args)
    def user(self): return _DataModel.Access_user(self)
    def setStart(self, *args): return _DataModel.Access_setStart(self, *args)
    def start(self): return _DataModel.Access_start(self)
    def setEnd(self, *args): return _DataModel.Access_setEnd(self, *args)
    def end(self): return _DataModel.Access_end(self)
    def index(self): return _DataModel.Access_index(self)
    def equalIndex(self, *args): return _DataModel.Access_equalIndex(self, *args)
    def routing(self): return _DataModel.Access_routing(self)
    def assign(self, *args): return _DataModel.Access_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Access_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Access_detachFrom(self, *args)
    def detach(self): return _DataModel.Access_detach(self)
    def clone(self): return _DataModel.Access_clone(self)
    def accept(self, *args): return _DataModel.Access_accept(self, *args)
Access_swigregister = _DataModel.Access_swigregister
Access_swigregister(Access)

def Access_ClassName():
  return _DataModel.Access_ClassName()
Access_ClassName = _DataModel.Access_ClassName

def Access_TypeInfo():
  return _DataModel.Access_TypeInfo()
Access_TypeInfo = _DataModel.Access_TypeInfo

def Access_Cast(*args):
  return _DataModel.Access_Cast(*args)
Access_Cast = _DataModel.Access_Cast

def Access_ConstCast(*args):
  return _DataModel.Access_ConstCast(*args)
Access_ConstCast = _DataModel.Access_ConstCast

class Routing(PublicObject):
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Routing, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Routing, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ClassName"] = lambda x: _DataModel.Routing_ClassName
    if _newclass:ClassName = staticmethod(_DataModel.Routing_ClassName)
    __swig_getmethods__["TypeInfo"] = lambda x: _DataModel.Routing_TypeInfo
    if _newclass:TypeInfo = staticmethod(_DataModel.Routing_TypeInfo)
    def className(self): return _DataModel.Routing_className(self)
    def typeInfo(self): return _DataModel.Routing_typeInfo(self)
    __swig_getmethods__["Cast"] = lambda x: _DataModel.Routing_Cast
    if _newclass:Cast = staticmethod(_DataModel.Routing_Cast)
    __swig_getmethods__["ConstCast"] = lambda x: _DataModel.Routing_ConstCast
    if _newclass:ConstCast = staticmethod(_DataModel.Routing_ConstCast)
    def serialize(self, *args): return _DataModel.Routing_serialize(self, *args)
    def __init__(self, *args): 
        this = _DataModel.new_Routing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Routing
    __del__ = lambda self : None;
    def __eq__(self, *args): return _DataModel.Routing___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.Routing___ne__(self, *args)
    def equal(self, *args): return _DataModel.Routing_equal(self, *args)
    def add(self, *args): return _DataModel.Routing_add(self, *args)
    def remove(self, *args): return _DataModel.Routing_remove(self, *args)
    def removeRoute(self, *args): return _DataModel.Routing_removeRoute(self, *args)
    def removeAccess(self, *args): return _DataModel.Routing_removeAccess(self, *args)
    def routeCount(self): return _DataModel.Routing_routeCount(self)
    def accessCount(self): return _DataModel.Routing_accessCount(self)
    def route(self, *args): return _DataModel.Routing_route(self, *args)
    def access(self, *args): return _DataModel.Routing_access(self, *args)
    def findRoute(self, *args): return _DataModel.Routing_findRoute(self, *args)
    def assign(self, *args): return _DataModel.Routing_assign(self, *args)
    def attachTo(self, *args): return _DataModel.Routing_attachTo(self, *args)
    def detachFrom(self, *args): return _DataModel.Routing_detachFrom(self, *args)
    def detach(self): return _DataModel.Routing_detach(self)
    def clone(self): return _DataModel.Routing_clone(self)
    def updateChild(self, *args): return _DataModel.Routing_updateChild(self, *args)
    def accept(self, *args): return _DataModel.Routing_accept(self, *args)
Routing_swigregister = _DataModel.Routing_swigregister
Routing_swigregister(Routing)

def Routing_ClassName():
  return _DataModel.Routing_ClassName()
Routing_ClassName = _DataModel.Routing_ClassName

def Routing_TypeInfo():
  return _DataModel.Routing_TypeInfo()
Routing_TypeInfo = _DataModel.Routing_TypeInfo

def Routing_Cast(*args):
  return _DataModel.Routing_Cast(*args)
Routing_Cast = _DataModel.Routing_Cast

def Routing_ConstCast(*args):
  return _DataModel.Routing_ConstCast(*args)
Routing_ConstCast = _DataModel.Routing_ConstCast

class DatabaseReader(DatabaseArchive):
    __swig_setmethods__ = {}
    for _s in [DatabaseArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DatabaseArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DatabaseReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseReader
    __del__ = lambda self : None;
    def loadObject(self, *args): return _DataModel.DatabaseReader_loadObject(self, *args)
    def loadEventParameters(self): return _DataModel.DatabaseReader_loadEventParameters(self)
    def loadPicks(self, *args): return _DataModel.DatabaseReader_loadPicks(self, *args)
    def loadAmplitudes(self, *args): return _DataModel.DatabaseReader_loadAmplitudes(self, *args)
    def loadReadings(self, *args): return _DataModel.DatabaseReader_loadReadings(self, *args)
    def loadOrigins(self, *args): return _DataModel.DatabaseReader_loadOrigins(self, *args)
    def loadFocalMechanisms(self, *args): return _DataModel.DatabaseReader_loadFocalMechanisms(self, *args)
    def loadEvents(self, *args): return _DataModel.DatabaseReader_loadEvents(self, *args)
    def loadPickReferences(self, *args): return _DataModel.DatabaseReader_loadPickReferences(self, *args)
    def loadAmplitudeReferences(self, *args): return _DataModel.DatabaseReader_loadAmplitudeReferences(self, *args)
    def loadCompositeTimes(self, *args): return _DataModel.DatabaseReader_loadCompositeTimes(self, *args)
    def loadArrivals(self, *args): return _DataModel.DatabaseReader_loadArrivals(self, *args)
    def loadStationMagnitudes(self, *args): return _DataModel.DatabaseReader_loadStationMagnitudes(self, *args)
    def loadMagnitudes(self, *args): return _DataModel.DatabaseReader_loadMagnitudes(self, *args)
    def loadStationMagnitudeContributions(self, *args): return _DataModel.DatabaseReader_loadStationMagnitudeContributions(self, *args)
    def loadMomentTensors(self, *args): return _DataModel.DatabaseReader_loadMomentTensors(self, *args)
    def loadDataUseds(self, *args): return _DataModel.DatabaseReader_loadDataUseds(self, *args)
    def loadMomentTensorPhaseSettings(self, *args): return _DataModel.DatabaseReader_loadMomentTensorPhaseSettings(self, *args)
    def loadMomentTensorStationContributions(self, *args): return _DataModel.DatabaseReader_loadMomentTensorStationContributions(self, *args)
    def loadMomentTensorComponentContributions(self, *args): return _DataModel.DatabaseReader_loadMomentTensorComponentContributions(self, *args)
    def loadEventDescriptions(self, *args): return _DataModel.DatabaseReader_loadEventDescriptions(self, *args)
    def loadOriginReferences(self, *args): return _DataModel.DatabaseReader_loadOriginReferences(self, *args)
    def loadFocalMechanismReferences(self, *args): return _DataModel.DatabaseReader_loadFocalMechanismReferences(self, *args)
    def loadConfig(self): return _DataModel.DatabaseReader_loadConfig(self)
    def loadParameterSets(self, *args): return _DataModel.DatabaseReader_loadParameterSets(self, *args)
    def loadConfigModules(self, *args): return _DataModel.DatabaseReader_loadConfigModules(self, *args)
    def loadParameters(self, *args): return _DataModel.DatabaseReader_loadParameters(self, *args)
    def loadComments(self, *args): return _DataModel.DatabaseReader_loadComments(self, *args)
    def loadConfigStations(self, *args): return _DataModel.DatabaseReader_loadConfigStations(self, *args)
    def loadSetups(self, *args): return _DataModel.DatabaseReader_loadSetups(self, *args)
    def loadQualityControl(self): return _DataModel.DatabaseReader_loadQualityControl(self)
    def loadQCLogs(self, *args): return _DataModel.DatabaseReader_loadQCLogs(self, *args)
    def loadWaveformQualitys(self, *args): return _DataModel.DatabaseReader_loadWaveformQualitys(self, *args)
    def loadOutages(self, *args): return _DataModel.DatabaseReader_loadOutages(self, *args)
    def loadInventory(self): return _DataModel.DatabaseReader_loadInventory(self)
    def loadStationGroups(self, *args): return _DataModel.DatabaseReader_loadStationGroups(self, *args)
    def loadAuxDevices(self, *args): return _DataModel.DatabaseReader_loadAuxDevices(self, *args)
    def loadSensors(self, *args): return _DataModel.DatabaseReader_loadSensors(self, *args)
    def loadDataloggers(self, *args): return _DataModel.DatabaseReader_loadDataloggers(self, *args)
    def loadResponsePAZs(self, *args): return _DataModel.DatabaseReader_loadResponsePAZs(self, *args)
    def loadResponseFIRs(self, *args): return _DataModel.DatabaseReader_loadResponseFIRs(self, *args)
    def loadResponsePolynomials(self, *args): return _DataModel.DatabaseReader_loadResponsePolynomials(self, *args)
    def loadNetworks(self, *args): return _DataModel.DatabaseReader_loadNetworks(self, *args)
    def loadStationReferences(self, *args): return _DataModel.DatabaseReader_loadStationReferences(self, *args)
    def loadAuxSources(self, *args): return _DataModel.DatabaseReader_loadAuxSources(self, *args)
    def loadSensorCalibrations(self, *args): return _DataModel.DatabaseReader_loadSensorCalibrations(self, *args)
    def loadDataloggerCalibrations(self, *args): return _DataModel.DatabaseReader_loadDataloggerCalibrations(self, *args)
    def loadDecimations(self, *args): return _DataModel.DatabaseReader_loadDecimations(self, *args)
    def loadStations(self, *args): return _DataModel.DatabaseReader_loadStations(self, *args)
    def loadSensorLocations(self, *args): return _DataModel.DatabaseReader_loadSensorLocations(self, *args)
    def loadAuxStreams(self, *args): return _DataModel.DatabaseReader_loadAuxStreams(self, *args)
    def loadStreams(self, *args): return _DataModel.DatabaseReader_loadStreams(self, *args)
    def loadRouting(self): return _DataModel.DatabaseReader_loadRouting(self)
    def loadRoutes(self, *args): return _DataModel.DatabaseReader_loadRoutes(self, *args)
    def loadAccesss(self, *args): return _DataModel.DatabaseReader_loadAccesss(self, *args)
    def loadRouteArclinks(self, *args): return _DataModel.DatabaseReader_loadRouteArclinks(self, *args)
    def loadRouteSeedlinks(self, *args): return _DataModel.DatabaseReader_loadRouteSeedlinks(self, *args)
    def loadJournaling(self): return _DataModel.DatabaseReader_loadJournaling(self)
    def loadJournalEntrys(self, *args): return _DataModel.DatabaseReader_loadJournalEntrys(self, *args)
    def loadArclinkLog(self): return _DataModel.DatabaseReader_loadArclinkLog(self)
    def loadArclinkRequests(self, *args): return _DataModel.DatabaseReader_loadArclinkRequests(self, *args)
    def loadArclinkUsers(self, *args): return _DataModel.DatabaseReader_loadArclinkUsers(self, *args)
    def load(self, *args): return _DataModel.DatabaseReader_load(self, *args)
    def loadArclinkStatusLines(self, *args): return _DataModel.DatabaseReader_loadArclinkStatusLines(self, *args)
    def loadArclinkRequestLines(self, *args): return _DataModel.DatabaseReader_loadArclinkRequestLines(self, *args)
DatabaseReader_swigregister = _DataModel.DatabaseReader_swigregister
DatabaseReader_swigregister(DatabaseReader)

class DatabaseQuery(DatabaseReader):
    __swig_setmethods__ = {}
    for _s in [DatabaseReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [DatabaseReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseQuery, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DataModel.new_DatabaseQuery(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseQuery
    __del__ = lambda self : None;
    def getComponentGain(self, *args): return _DataModel.DatabaseQuery_getComponentGain(self, *args)
    def getStation(self, *args): return _DataModel.DatabaseQuery_getStation(self, *args)
    def getEvent(self, *args): return _DataModel.DatabaseQuery_getEvent(self, *args)
    def getEventByPreferredMagnitudeID(self, *args): return _DataModel.DatabaseQuery_getEventByPreferredMagnitudeID(self, *args)
    def getEventForFocalMechanism(self, *args): return _DataModel.DatabaseQuery_getEventForFocalMechanism(self, *args)
    def getEventByPublicID(self, *args): return _DataModel.DatabaseQuery_getEventByPublicID(self, *args)
    def getAmplitude(self, *args): return _DataModel.DatabaseQuery_getAmplitude(self, *args)
    def getAmplitudesForPick(self, *args): return _DataModel.DatabaseQuery_getAmplitudesForPick(self, *args)
    def getAmplitudesForOrigin(self, *args): return _DataModel.DatabaseQuery_getAmplitudesForOrigin(self, *args)
    def getOriginsForAmplitude(self, *args): return _DataModel.DatabaseQuery_getOriginsForAmplitude(self, *args)
    def getOriginByMagnitude(self, *args): return _DataModel.DatabaseQuery_getOriginByMagnitude(self, *args)
    def getArrivalsForAmplitude(self, *args): return _DataModel.DatabaseQuery_getArrivalsForAmplitude(self, *args)
    def getPicks(self, *args): return _DataModel.DatabaseQuery_getPicks(self, *args)
    def getWaveformQuality(self, *args): return _DataModel.DatabaseQuery_getWaveformQuality(self, *args)
    def getWaveformQualityDescending(self, *args): return _DataModel.DatabaseQuery_getWaveformQualityDescending(self, *args)
    def getOutage(self, *args): return _DataModel.DatabaseQuery_getOutage(self, *args)
    def getQCLog(self, *args): return _DataModel.DatabaseQuery_getQCLog(self, *args)
    def getPreferredOrigins(self, *args): return _DataModel.DatabaseQuery_getPreferredOrigins(self, *args)
    def getPreferredMagnitudes(self, *args): return _DataModel.DatabaseQuery_getPreferredMagnitudes(self, *args)
    def getEvents(self, *args): return _DataModel.DatabaseQuery_getEvents(self, *args)
    def getOrigins(self, *args): return _DataModel.DatabaseQuery_getOrigins(self, *args)
    def getOriginsDescending(self, *args): return _DataModel.DatabaseQuery_getOriginsDescending(self, *args)
    def getFocalMechanismsDescending(self, *args): return _DataModel.DatabaseQuery_getFocalMechanismsDescending(self, *args)
    def getEventPickIDs(self, *args): return _DataModel.DatabaseQuery_getEventPickIDs(self, *args)
    def getEventPickIDsByWeight(self, *args): return _DataModel.DatabaseQuery_getEventPickIDsByWeight(self, *args)
    def getEventPicks(self, *args): return _DataModel.DatabaseQuery_getEventPicks(self, *args)
    def getEventPicksByWeight(self, *args): return _DataModel.DatabaseQuery_getEventPicksByWeight(self, *args)
    def getConfigModule(self, *args): return _DataModel.DatabaseQuery_getConfigModule(self, *args)
    def getEquivalentPick(self, *args): return _DataModel.DatabaseQuery_getEquivalentPick(self, *args)
    def getJournal(self, *args): return _DataModel.DatabaseQuery_getJournal(self, *args)
    def getJournalAction(self, *args): return _DataModel.DatabaseQuery_getJournalAction(self, *args)
    def getArclinkRequestByStreamCode(self, *args): return _DataModel.DatabaseQuery_getArclinkRequestByStreamCode(self, *args)
    def getArclinkRequestByRequestID(self, *args): return _DataModel.DatabaseQuery_getArclinkRequestByRequestID(self, *args)
    def getArclinkRequestByUserID(self, *args): return _DataModel.DatabaseQuery_getArclinkRequestByUserID(self, *args)
    def getArclinkRequestByTime(self, *args): return _DataModel.DatabaseQuery_getArclinkRequestByTime(self, *args)
    def getArclinkRequest(self, *args): return _DataModel.DatabaseQuery_getArclinkRequest(self, *args)
    def getArclinkRequestRestricted(self, *args): return _DataModel.DatabaseQuery_getArclinkRequestRestricted(self, *args)
DatabaseQuery_swigregister = _DataModel.DatabaseQuery_swigregister
DatabaseQuery_swigregister(DatabaseQuery)

# This file is compatible with both classic and new-style classes.


