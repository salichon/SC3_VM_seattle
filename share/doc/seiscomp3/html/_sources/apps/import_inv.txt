.. highlight:: rst

.. _import_inv:

##########
import_inv
##########

**Imports inventory information from various sources.**


Description
===========

import_inv is a wrapper for inventory converters. Inventory converters convert
an input format such as

+-------------------+-------------------------------------------------------------------+
| Format            | Description                                                       |
+===================+===================================================================+
| sc3               | `SeisComP3 inventory XML <http://geofon.gfz-potsdam.de/schema/>`_ |
+-------------------+-------------------------------------------------------------------+
| key               | SeisComP station keys files (key version 2.5)                     |
+-------------------+-------------------------------------------------------------------+
| arclink           | Arclink inventory XML                                             |
+-------------------+-------------------------------------------------------------------+
| nettab            | GEOFON nettabs                                                    |
+-------------------+-------------------------------------------------------------------+
| dlsv              | `dataless SEED <http://www.iris.edu/data/dataless.htm>`_          |
+-------------------+-------------------------------------------------------------------+
| staxml            | `StationXML <http://www.data.scec.org/station/xml.html>`_         |
+-------------------+-------------------------------------------------------------------+

to SeisComP3 inventory XML which is the read by the trunk config module to
synchronize the local inventory file pool with the central inventory database.

If another format needs to be converted it is very easy to provide a new
converter.


Converter interface
-------------------

To make a new converter make with import_inv it must implement an interface
on shell level. Furthermore the converter program must be named :file:`{format}2inv`
and must live in :file:`SEISCOMP_ROOT/bin`.

The converter program must take the input location (file, directory, URL, ...)
as first parameter and the output file (SeisComP3 XML) as second parameter. The
output file must be optional and default to stdout.

To add a new converter for a new format, e.g. Excel, place the new converter
program at :file:`$SEISCOMP_ROOT/bin/excel2inv`. When
:program:`import_inv help formats` is called it globs for
:file:`$SEISCOMP_ROOT/bin/*2inv` and prints all available formats.



Configuration
=============

| :file:`etc/defaults/global.cfg`
| :file:`etc/defaults/import_inv.cfg`
| :file:`etc/global.cfg`
| :file:`etc/import_inv.cfg`
| :file:`~/.seiscomp3/global.cfg`
| :file:`~/.seiscomp3/import_inv.cfg`

import_inv inherits :ref:`global options<global-configuration>`.




Command-line
============

.. program:: import_inv

:program:`import_inv {FORMAT} input [output]`

:program:`import_inv help {topic}`

The first form takes the format as first parameter and the input
and output location. The input location is either a file or directory
depending on the format and its converter. If the output is not
given it defaults to seiscomp3\/etc\/inventory\/{input}.xml. To write
the output to stdout, \"\-\" must be used.

The second form provides help on a particular topic. The only topic
currently supported is \"formats\" which prints all available input
formats.


Generic
-------

.. option:: -h, --help

   show help message.

.. option:: -V, --version

   show version information

.. option:: --config-file arg

   Use alternative configuration file. When this option is used
   the loading of all stages is disabled. Only the given configuration
   file is parsed and used. To use another name for the configuration
   create a symbolic link of the application or copy it, eg scautopick \-> scautopick2.

.. option:: --plugins arg

   Load given plugins.

.. option:: -D, --daemon

   Run as daemon. This means the application will fork itself and
   doesn't need to be started with \&.

.. option:: --auto-shutdown arg

   Enable\/disable self\-shutdown because a master module shutdown. This only
   works when messaging is enabled and the master module sends a shutdown
   message \(enabled with \-\-start\-stop\-msg for the master module\).

.. option:: --shutdown-master-module arg

   Sets the name of the master\-module used for auto\-shutdown. This
   is the application name of the module actually started. If symlinks
   are used then it is the name of the symlinked application.

.. option:: --shutdown-master-username arg

   Sets the name of the master\-username of the messaging used for
   auto\-shutdown. If \"shutdown\-master\-module\" is given as well this
   parameter is ignored.


Verbosity
---------

.. option:: --verbosity arg

   Verbosity level [0..4]. 0:quiet, 1:error, 2:warning, 3:info, 4:debug

.. option:: -v, --v

   Increase verbosity level \(may be repeated, eg. \-vv\)

.. option:: -q, --quiet

   Quiet mode: no logging output

.. option:: --component arg

   Limits the logging to a certain component. This option can be given more than once.

.. option:: -s, --syslog

   Use syslog logging back end. The output usually goes to \/var\/lib\/messages.

.. option:: -l, --lockfile arg

   Path to lock file.

.. option:: --console arg

   Send log output to stdout.

.. option:: --debug

   Debug mode: \-\-verbosity\=4 \-\-console\=1

.. option:: --log-file arg

   Use alternative log file.

