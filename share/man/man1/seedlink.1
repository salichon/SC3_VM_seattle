.TH "SEEDLINK" "1" "January 21, 2014" "2014.016" "SeisComP3"
.SH NAME
seedlink \- SeisComP3 Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.sp
\fBReal\-time waveform server implementing the SeedLink protocol.\fP
.SH DESCRIPTION
.sp
SeedLink is a real\-time data acquisition protocol and a client\-server software
that implements this protocol. The SeedLink protocol is based on TCP. All
connections are initiated by the client. During handshaking phase the client can
subscribe to specific stations and streams using simple commands in ASCII coding.
When handshaking is completed, a stream of SeedLink "packets" consisting of a
8\-byte SeedLink header (containing the sequence number) followed by a 512\-byte
Mini\-SEED record, is sent to the client. The packets of each individual station
are always transferred in timely (FIFO) order. The SeedLink implementation used
in SeisComP is the oldest and most widely used, however, other implementations
exist. Another well\-known implementation is deployed in IRIS DMC and some
manufacturers have implemented SeedLink in their digitizer firmware. All
implementations are generally compatible, but not all of them support the full
SeedLink protocol. On the other hand IRIS DMC implements some extensions which
are not supported by other servers. In the following we use "SeedLink" to denote
the SeedLink implementation used in SeisComP. The data source of a SeedLink
server can be anything which is supported by a SeedLink plugin \- a small program
that sends data to the SeedLink server. Plugins are controlled by the SeedLink
server, e.g., a plugin is automatically restarted if it crashes or a timeout
occurs. Data supplied by a plugin can be a form of Mini\-SEED packets or just
raw integer samples with accompanying timing information. In the latter case,
the SeedLink server uses an inegrated "Stream Processor" to create the desired
data streams and assemble Mini\-SEED packets.
.TS
center;
|l|l|.
_
T{
Digitizer/DAS
T}	T{
Plugin Implementer
T}
_
T{
SeedLink
T}	T{
GFZ
T}
_
T{
LISS
T}	T{
Chad Trabant (IRIS)
T}
_
T{
Quanterra Q330
T}	T{
Jet Spring, Inc.; ISTI, Inc.; Chad Trabant (IRIS); GFZ
T}
_
T{
Quanterra Q380/Q680, Q4120, Q720   (not supported by SeisComp 3.0)
T}	T{
GFZ (based on Comserv by Quanterra, Inc.)
T}
_
T{
Earth Data PS2400/PS6\-24
T}	T{
GFZ
T}
_
T{
Lennartz M24
T}	T{
Lennartz Electronic GmbH
T}
_
T{
Geotech DR24
T}	T{
GFZ
T}
_
T{
Nanometrics HRD24
T}	T{
GFZ; Recai Yalgin
T}
_
T{
Guralp DM24
T}	T{
GFZ (based on libgcf2 from Guralp)
T}
_
T{
SARA SADC10/18/20/30
T}	T{
GFZ
T}
_
T{
RefTek RTPD
T}	T{
GFZ (based on software library provided by RefTek, Inc.)
T}
_
T{
NRTS
T}	T{
GFZ (based on ISI toolkit from David E. Chavez)
T}
_
T{
NAQS
T}	T{
Chad Trabant (IRIS; based on sample code from Nanometrics, Inc.); Matteo Quintiliani (INGV; nmxptool)
T}
_
T{
SCREAM
T}	T{
Reinoud Sleeman (KNMI)
T}
_
T{
Earthworm
T}	T{
Chad Trabant (IRIS)
T}
_
T{
Antelope
T}	T{
Chad Trabant (IRIS)
T}
_
T{
WIN
T}	T{
GFZ (based on source code of WIN system)
T}
_
T{
Lacrosse 2300 Weather Station
T}	T{
GFZ (based on open2300 library from Kenneth Lavrsen)
T}
_
T{
Reinhardt MWS5/MWS9 Weather Station
T}	T{
GFZ
T}
_
T{
Generic MODBUS/TCP devices
T}	T{
GFZ
T}
_
.TE
.SS Supported data sources
.sp
Table 5\-1 lists digitizers and data acquisition systems that are supported by
SeedLink plugins. More plugins (Kinemetrics K2, Lennartz MARS\-88, Lennartz PCM
5800, etc.) have been implemented by various users, but are not (yet) included
in the package. The included C language plugin interface is described in
section 5.1.1.5. Antelope, Earthworm and NAQS can also import data from
SeisComP. In SeisComP the class RecordStream is implemented that supports both
SeedLink and ArcLink sources; this class is used by all SeisComP modules that
work with waveform data. On a lower level, SeedLink clients can be implemented
using the libslink software library or its Java counterpart, JSeedLink. Libslink
supports Linux/UNIX, Windows and MacOS X platforms, and comes with an exhaustive
documentation in form of UNIX manual pages.
.SH PROTOCOL
.sp
A SeedLink session starts with opening the TCP/IP connection and ends with
closing the TCP/IP connection. During the session the following steps are
performed in order:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
opening the connection
.IP \(bu 2
handshaking
.IP \(bu 2
transferring SeedLink packets
.UNINDENT
.UNINDENT
.UNINDENT
.sp
We will take a closer look at the protocol. Note, the details are normally
hidden from the clients by the libslink software library; therefore it is not
necessary to be familiar with the protocol in order to implement clients.
.SS Handshaking
.sp
When the TCP/IP connection has been established the server will wait for the
client to start handshaking without initially sending any data to the client.
During handshaking the client sends SeedLink commands to the server. The
commands are used to set the connection into a particular mode, setup stream
selectors, request a packet sequence number to start with and eventually start
data transmission. SeedLink commands consist of an ASCII string followed by
zero or several arguments separated by spaces and terminated with carriage
return (<cr>, ASCII code 13) followed by an optional linefeed
(<lf>, ASCII code 10). The commands can be divided into two categories: "action
commands" and "modifier commands". Action commands perform a function such as
starting data transfer. Modifier commands are used to specialize or modify the
function performed by the action commands that follow. When a server receives a
modifier command it responds with the ASCII string "OK" followed by a carriage
return and a line feed to acknowledge that the command has been accepted. If
the command was not recognized by the server or has invalid parameters, then
the ASCII string "ERROR" is sent as a response to the client followed by a
carriage return and a line feed. The client should not send any further
commands before it has received a response to the previous modifier command. If
a network error or timeout occurs the client should close the connection and
start a new session. Data transmission is started when the server receives the
commands DATA, FETCH, TIME or END as described in section 5.1.1.3. Once the data
transfer has been started no more commands, except INFO, should be sent to the
server. The flow diagram of handshaking in uni\-station vs. multi\-station mode
is shown in \fI\%Handshaking in uni-station vs. multi-station mode.\fP.
.INDENT 0.0
.INDENT 2.5
[image]
Handshaking in uni\-station vs. multi\-station mode..UNINDENT
.UNINDENT
.SS Data Transfer
.sp
When handshaking has been completed the server starts sending data packets, each
consisting of an 8\-byte SeedLink header followed by a 512\-byte Mini\-SEED record.
The SeedLink header is an ASCII string consisting of the letters "SL" followed
by a six\-digit hexadecimal packet sequence number. Each station has its own
sequence numbers. If multiple stations are requested using a single TCP channel
the client should look at the contents of the Mini\-SEED header to determine the
station name (or to maintain the current sequence numbers for each station). A
sequence number in the same format is used as an argument to the commands "DATA"
or "FETCH" to start the data transfer from a particular packet. Each SeedLink
node re\-assigns sequence numbers for technical reasons. It is not possible to
use the same sequence numbers when communicating with alternative servers.
Within a particular node the sequence numbers of a single station are
consecutive and wrap around at FFFFFF. This can be used by the client to detect
"sequence gaps" (e.g., some data has been missed by the client due to long
network outage or a software bug). However, if stream selectors are used the
sequence numbers are only guaranteed to be in increasing order (with wrap)
because some packets might be filtered out by the server. In this case the
first packet is not necessarily the one requested, but the nearest packet (not
older than requested) that matches installed selectors.
The data is transferred as a continuous stream without any error detections or
flow control because these functions are performed by the TCP protocol. This
guarantees the highest data transfer rate that is possible with the particular
hardware and TCP/IP implementation.
Obviously, the average data transfer rate must be greater than the rate at
which new data becomes ready to send at the server. If this is the case, sooner
or later the server has sent all data available to the client. When this
happens, depending on the SeedLink mode, the server sends new data as soon as
it arrives or appends ASCII string "END" to the last packet and waits for the
client to close connection. The latter mode is called "dial\-up mode" because
it is normally used in conjunction with dial\-up lines to open the connection
periodically for a short time and download all data available. A SeedLink
packet can never start with "END" thus no ambiguity arises.
.SS Commands
.INDENT 0.0
.TP
.B HELLO
responds with a two\-line message (both lines terminated with <cr><lf>). The first line contains the version number of the SeedLink daemon, the second  line contains station or data center description specified in the configuration. HELLO is used mainly for testing a SeedLink server with "telnet". It is also used by libslink to determine the server version.
.TP
.B CAT
shows the station list. Used mainly for testing a SeedLink server with "telnet".
.TP
.B BYE
closes the connection. Used mainly for testing a SeedLink server with "telnet".
.TP
.B STATION station code [network code]
turns on multi\-station mode, used to transfer data of multiple stations over a single TCP channel. The STATION command, followed by SELECT (optional) and FETCH, DATA or TIME commands is repeated for each station and the handshaking is finished with END. STATION is a modifier command (it modifies the function of subsequent SELECT, and DATA, FETCH or TIME commands) so it responds with "OK" on success, "ERROR" otherwise.
.TP
.B END
end of handshaking in multi\-station mode. This is an action command, because it starts data transfer. No explicit response is sent.
.TP
.B SELECT [pattern]
when used without pattern, all selectors are canceled. Otherwise, the pattern is a positive selector to enable matching Mini\-SEED stream transfer. The pattern can be used as well as a negative selector with a leading "!" to prevent the transfer of some Mini\-SEED streams. Only one selector can be used in a single SELECT request. A SeedLink packet is sent to the client if it matches any positive selector and doesn’t match any negative selectors.
.UNINDENT
.sp
General format of selectors is LLCCC.T where LL is location, CCC is channel, and T is type (one of DECOTL for data, event, calibration, blockette, timing, and log records). "LL", ".T", and "LLCCC." can be omitted, meaning "any". It is also possible to use "?" in place of L and C. Some examples can be found in table 3\-1 in section 3.3.3.2.
SELECT is a modifier command (it modifies the function of subsequent DATA, FETCH or TIME commands) so a response follows with "OK" on success, "ERROR" otherwise.
.INDENT 0.0
.TP
.B DATA [n [begin time]]
in multi\-station mode this sets the current station into real\-time mode and (optionally) the current sequence number to n; in uni\-station mode this starts data transfer in real\-time mode from packet n or from the next packet available if used without arguments. If begin time is used, any older packets are filtered out. begin time should be in the form of 6 decimal numbers separated by commas in the form: year,month,day,hour,minute,second, e.g. ’2002,08,05,14,00’. DATA is a modifier command in multi\-station mode (responds with "OK" or "ERROR"); in uni\-station mode it is an action command (no explicit response is sent).
.TP
.B FETCH [n [begin time]]
works like DATA but sets the station to dial\-up mode instead of real\-time mode.
.TP
.B TIME [begin time [end time]]
extracts the time window from begin time to end time. The times are specified in the form of 6 decimal numbers separated by commas in the form: year,month,day,hour,minute,second, e.g. ’2002,08,05,14,00’.
.TP
.B INFO level
requests an INFO packet containing XML data embedded in a Mini\-SEED log record. level should be one of the following: ID, CAPABILITIES, STATIONS, STREAMS, GAPS, CONNECTIONS, ALL. The XML document conforms to the Document Type Definition (DTD) shown in section ???. The amount of info available depends on the configuration of the SeedLink server.
.UNINDENT
.SH PLUGIN INTERFACE
.sp
In order to implement a SeedLink plugin a developer needs two files included in the SeisComP distribution: plugin.h and plugin.c. In these files the following public functions are defined:
.INDENT 0.0
.TP
.B int send raw3(const char\fI\ *station\fP, const char\fI\ *channel\fP, const struct ptime\fI\ *pt\fP, int\fI\ usec_correction\fP, int\fI\ timing_quality\fP, const int32_t\fI\ *dataptr\fP, intnumber_of_samples)
.UNINDENT
.sp
is used to send a raw packet (array of 32\-bit integer samples) to SeedLink. The parameters are:
.INDENT 0.0
.TP
.B station
station ID, must match one of the defined stations in seedlink.ini. (Up to 10 characters.)
.TP
.B channel
channel ID, referenced by the "input" element in streams.xml. (Up to 10 characters.)
.TP
.B pt
time of the first sample in the array. If NULL then time is calculated relative to the previous send_raw3() call. struct ptime is defined in plugin.h.
.TP
.B usec_correction
time correction in microseconds to be written in the SEED data header. Can be useful if the digitizer is not phase locked to GPS.
.TP
.B timing_quality
timing quality in percent (0\-100). The number is directly written into Mini\-SEED header (blockette 1001). Semantics is implementation\-defined. Usually 100 means that GPS is in lock and 0 means there never was a GPS lock, so the timing is completely unreliable. When GPS goes out of lock, the value can slowly decrease reflecting a possible timedrift.
.TP
.B dataptr
Array of signed 32\-bit samples.
.TP
.B Number_of_samples
Length of the sample array.
.UNINDENT
.sp
Special cases:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
if timing_quality = \-1, blockette 1001 is omitted.
.IP \(bu 2
if number_of_samples = 0 & pt = NULL set new time without sending any data.
.IP \(bu 2
if dataptr = NULL send a gap (advance time as if number of samples was sent without sending any actual data).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B int send_raw_depoch(const char\fI\ *station\fP, const char\fI\ *channel\fP, double\fI\ depoch\fP, int\fI\ usec_correction\fP, int\fI\ timing_quality\fP, const int32_t\fI\ dataptr\fP, int\fI\ number_of_samples\fP)
.UNINDENT
.sp
same as send_raw3() except time is measured in seconds since 1/1/1970 (depoch). Leap seconds are ignored.
.INDENT 0.0
.TP
.B int send flush3(const char\fI\ *station\fP, const char\fI\ *channel\fP)
.UNINDENT
.sp
flushes all Mini\-SEED data streams associated with a channel. All buffered data is sent out creating "unfilled" Mini\-SEED records if necessary. The parameters are:
.INDENT 0.0
.TP
.B station
station ID.
.TP
.B Channel
channel ID.
.UNINDENT
.INDENT 0.0
.TP
.B int send_mseed(const char\fI\ *station\fP, const void\fI\ *dataptr\fP, int packet\fI\ size\fP)
.UNINDENT
.sp
is used to send a Mini\-SEED packet to SeedLink. Such packets are not further processed. The  parameters are:
.INDENT 0.0
.TP
.B station
station ID.
.TP
.B dataptr
pointer to 512\-byte Mini\-SEED packet.
.TP
.B packet size
must be 512.
.UNINDENT
.INDENT 0.0
.TP
.B int send_log3(const char\fI\ *station\fP, const struct ptime\fI\ *pt\fP, const char\fI\ *fmt\fP, ...)
.UNINDENT
.sp
is used to send a log message to SeedLink (LOG stream). It must be noted that encapsulating log messages in Mini\-SEED records is relatively inefficient because each message takes at least one record (512 bytes), regardless of message size. Due to 64\-byte Mini\-SEED header, up to 448 bytes per record can be used *  The parameters are:
.INDENT 0.0
.TP
.B station
station ID.
.TP
.B pt
the timestamp of the message.
.TP
.B fmt
format string, as used by printf(), followed by a variable number of arguments.
.UNINDENT
.SH COMPATIBILITY WITH EARLIER VERSIONS
.sp
It is possible to determine the version of the plugin interface by looking at the C macro PLUGIN_INTERFACE_VERSION. The current version is 3, therefore all functions that have changed since earlier versions end with "3". It is possible to enable full backward compatibility with earlier versions of the plugin interface by defining the C macro PLUGIN_COMPATIBILITY. In this case the old functions are also defined.
.SH SEEDLINK CONFIGURATION FILES
.sp
The following configuration files are used by SeedLink and its plugins.
.IP Warning
Some files such as seedlink.ini, plugin.ini and chain*.xml are generated by the seiscomp tool according
to the configuration in \fBetc/seedlink.cfg\fP and its bindings. They live in \fBvar/lib/seedlink\fP and should
not be modified. If modifications are necessary then the generator needs to be changed to better support
the desired user options.
.RE
.INDENT 0.0
.TP
.B plugins.ini
Configuration file for SeedLink plugins. Used by serial_plugin, fs_plugin and comserv_plugin.
.TP
.B seedlink.ini
Main configuration file for SeedLink. For more details see below.
.TP
.B filters.fir
Coefficients of SeedLink’s decimating FIR filters. If a filter’s name ends with "M", it is a minimum\-phase filter – causal filter with minimized (non\-constant) phase delay; since the filter is non\-symmetric all coefficients must be given. Otherwise the filter is a zero\-phase filter, i.e. a non\-causal filter with zero phase delay; in this case the filter is symmetric and so only half of the coefficients must be given (it is not possible to use a zero\-phase filter with an odd number of coefficients).
.UNINDENT
.IP Warning
The coefficients for non\-symmetric (minimum\-phase) FIR filters in the filters.fir file are stored
in reverse order. It is important to reverse the order of coefficients if the operator adds
a new minimum\-phase filter or uses the included minimum\-phase filters for another application.
The coefficients for symmetric (zero\-phase) FIR filters are not stored in reverse order. As a
sanity check for symmetric filters the largest coefficient is always in the middle of the symmetry.
.RE
.INDENT 0.0
.TP
.B streams.xml
SeedLink stream configuration file for the internal stream processor, referenced from seedlink.ini. For details see below.
.UNINDENT
.sp
*.ini files have a somewhat obscure syntax. They contain zero or more sections, each beginning with a section name
in squared brackets which should appear on a line of its own. Section name cannot contain spaces and squared brackets,
but it can be optionally surrounded by spaces. Each section consists of zero or more entries – definitions and assignments.
A definition consists of a keyword and a name separated by spaces (e.g. "station EDD"). An assignment consists of a
parameter and a value separated by the "=" sign and optionally surrounded by spaces (e.g. "network = GE").
.sp
The set of assignments that immediately follow a definition is in the scope of that definition. Assignments in the
beginning of a section are "global" – they are used to set some generic parameters and provide default values
(e.g. "network = GE" in the beginning of the section sets the default network that can be overridden in the scope
of a station definition).
.sp
Parameters and keywords are case insensitive and must not contain the symbols "=", "[", "]" or spaces. Names must
not contain "=" signs or spaces. Values must not contain "=" signs or spaces, unless enclosed in double quotes.
Double quotes that are part of the value itself must be preceded by "".
.sp
Each assignment must be complete on a single line, but several assignments can appear on one line, separated by spaces.
Any line beginning with a "#" or "*" character is regarded as a comment and ignored.
.SS seedlink.ini
.sp
seedlink.ini may contain several sections, but only one having the same name as
the executable to be used. A section in seedlink.ini has the following structure
(parameters are shown in courier, default values are shown in squared brackets,
but relying on them is not recommended):
.sp
seedlink.ini is generated from \fB~/.seiscomp3/seedlink.cfg\fP and
\fBetc/seedlink.cfg\fP.
.SS streams.xml
.sp
This file, like all XML documents, has a tree\-like structure. The root element
is called "stream" and it in turn contains "proc" elements which are referenced
by name in seedlink.ini. A "proc" element contains one or more "tree" elements,
which in turn contain "input" and "node" elements. There should be one "input"
element per plugin channel; if an "input" element is missing, the channel is
ignored and you will see a message like:
.sp
.nf
.ft C
Jun 24 12:56:28 st55 seedlink: EDD channel X ignored
.ft P
.fi
.sp
Here is the description of all elements and attributes:
.INDENT 0.0
.TP
.B \fBelement\fP streams
root element, has no attributes.
.TP
.B \fBelement\fP proc
defines a "proc" object (set of "stream trees"), referenced from seedlink.ini.
.TP
.B \fBattribute\fP name
name of "proc" object, for reference.
.TP
.B \fBelement\fP using
used to include all "stream trees" defined by one "proc" object in another "proc" object.
.TP
.B \fBattribute\fP name
the name of referenced "proc" object.
.TP
.B \fBelement\fP tree
defines a "stream tree" – a downsampling scheme of an input channel.
.TP
.B \fBelement\fP input
associates an input channel with the stream tree.
.TP
.B \fBattribute\fP name
name of the input channel; depends on the configuration of the particular plugin (usual channel names are "Z", "N" and "E").
.TP
.B \fBattribute\fP channel
name of the output channel (last letter of a Mini\-SEED stream name).
.TP
.B \fBattribute\fP location
Mini\-SEED location code of the output channel (up to two characters).
.TP
.B \fBattribute\fP rate
sampling rate of the input channel (must match the actual sampling rate, which is dependent on the configuration of the plugin and digitizer).
.TP
.B \fBelement\fP node
defines a node of a stream tree; this element is recursive, meaning that it may contain one or more "node" elements itself.
.TP
.B \fBattribute\fP filter
use the named filter for decimation; filters are defined in file filters.fir.
.TP
.B \fBattribute\fP stream
create Mini\-SEED output stream at this node. The value of the attribute should be a Mini\-SEED stream name without the last character (which is taken from the attribute "channel" of element "input").
.UNINDENT
.sp
\fBstreams.xml\fP is generated into \fBvar/lib/seedlink/streams.xml\fP. Each
data plugin provides templates with predefined procs. If e.g. the \fIchain\fP plugin
is configured with proc \fIstream100\fP then \fBshare/templates/seedlink/chain/streams_stream100.tpl\fP
is being read and generated into the final \fBstreams.xml\fP. Own proc definitions
can be added by creation a corresponding template file.
.sp
Again, the \fBsource\fP and \fBproc\fP definition is used to resolve the streams proc
template file at \fBshare/templates/seedlink/[source]/streams_[proc].tpl\fP.
.SH CONFIGURATION
.IP Note
seedlink is a standalone module and does not inherit \fIglobal options\fP.
.RE
.nf
\fBetc/defaults/seedlink.cfg\fP
\fBetc/seedlink.cfg\fP
\fB~/.seiscomp3/seedlink.cfg\fP
.fi
.sp
.INDENT 0.0
.TP
.B port
Type: \fIint\fP
.sp
Defines the Seedlink port to accept requests. If this port
is changed and other modules depend on it (slarchive, processing)
those ports must be updated as well!
Default is \fB18000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B filebase
Type: \fIdir\fP
.sp
Path to the base directory of SeedLink data files (disk buffer).
.UNINDENT
.INDENT 0.0
.TP
.B network
Type: \fIstring\fP
.sp
Default network code. Used when a network code is omitted by a client
in STATION request. Should be set to the network code of the majority
of configured stations. 1 or 2 characters long, uppercase.
.UNINDENT
.INDENT 0.0
.TP
.B trusted
Type: \fIlist:string\fP
.sp
List of trusted addresses.
Default is \fB127.0.0.0/8\fP.
.UNINDENT
.INDENT 0.0
.TP
.B stream_check
Type: \fIboolean\fP
.sp
Check start and end times of streams.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B gap_check_pattern
Type: \fIstring\fP
.sp
If stream_check = enabled, also check for gaps in all channels that
match given pattern. Register all gaps that are larger than +\-0.5 seconds.
gap_check_pattern = [EBLV][HLNG][ZNE]|S[NG][ZNE].
Disabled to save memory.
Default is \fBXXXXX\fP.
.UNINDENT
.INDENT 0.0
.TP
.B gap_treshold
Type: \fIint\fP
.sp
Time difference between records (microseconds) above which a gap is declared.
Default is \fB500000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B window_extraction
Type: \fIboolean\fP
.sp
Can be enabled or disabled. Required for slinktool option \-tw.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B window_extraction_trusted
Type: \fIboolean\fP
.sp
Same as window_extraction for trusted IP addresses.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B msrtsimul
Type: \fIboolean\fP
.sp
If activated Seedlink uses the mseedfifo to read records and
only the mseedfifo_plugin is started. This command is useful
to playback historic data by eg msrtsimul.
Default is \fBfalse\fP.
.UNINDENT
.INDENT 0.0
.TP
.B inventory_connection
Type: \fIstring\fP
.sp
Defines a database read connection to be used for Seedlink
station descriptions. If no database is to be used (the default;
configure with "") then the station code will be used. Example:
"mysql://sysop:sysop@localhost/seiscomp3". If a remote host is
specified, ensure that its database server is reachable from
this computer.
.UNINDENT
.INDENT 0.0
.TP
.B info
Type: \fIstring\fP
.sp
Info level provided to arbitrary hosts.
Default is \fBstreams\fP.
.UNINDENT
.INDENT 0.0
.TP
.B info_trusted
Type: \fIstring\fP
.sp
Info level provided to trusted hosts.
Default is \fBall\fP.
.UNINDENT
.INDENT 0.0
.TP
.B request_log
Type: \fIboolean\fP
.sp
Whether requests should be logged.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B proc_gap_warn
Type: \fIint\fP
.sp
Give warning if an input channel has time gap larger than this (microseconds).
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B proc_gap_flush
Type: \fIint\fP
.sp
Flush streams if an input channel has time gap larger than this (microseconds).
Default is \fB100000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B proc_gap_reset
Type: \fIint\fP
.sp
Reset FIR filters if an input channel has time gap larger than this (microseconds).
Default is \fB1000000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B backfill_buffer
Type: \fIfloat\fP
.sp
Enable backfilling buffer for out\-of\-order records.
This values defines its capacity in seconds.
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B seq_gap_limit
Type: \fIint\fP
.sp
Maximum allowed deviation from the sequence number of oldest packet if
packet with requested sequence number is not found. If seq_gap_limit is
exceeded, data flow starts from the next packet coming in, otherwise
from the oldest packet in buffer.
Default is \fB100000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B connections
Type: \fIint\fP
.sp
Total number of TCP/IP connections allowed.
Default is \fB500\fP.
.UNINDENT
.INDENT 0.0
.TP
.B connections_per_ip
Type: \fIint\fP
.sp
Maximum number of TCP/IP connections per IP.
Default is \fB20\fP.
.UNINDENT
.INDENT 0.0
.TP
.B bytespersec
Type: \fIint\fP
.sp
Maximum speed per connection (0: throttle disabled).
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B lockfile
Type: \fIstring\fP
.sp
Path to lockfile to prevent multiple instances.
Default is \fB@ROOTDIR@/var/run/seedlink.pid\fP.
.UNINDENT
.INDENT 0.0
.TP
.B buffers
Type: \fIint\fP
.sp
Size of memory buffer (number of recent Mini\-SEED records kept in RAM).
Default is \fB100\fP.
.UNINDENT
.INDENT 0.0
.TP
.B segments
Type: \fIint\fP
.sp
Number of disk buffer segments (files under <dir>/station/segments/
where <dir> is the directory given by the filebase parameter).
Default is \fB50\fP.
.UNINDENT
.INDENT 0.0
.TP
.B segsize
Type: \fIint\fP
.sp
Size of one disk buffer segment in the records (512\-byte units).
Default is \fB1000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B blanks
Type: \fIint\fP
.sp
Number of blank records to insert after the re\-scan of disk buffer
if <dir>/station/buffer.xml is not found (assuming the server
did not terminate correctly).
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B encoding
Type: \fIstring\fP
.sp
Encoding of Mini\-SEED records created by SeedLink. The value must be
steim1 or steim2. If omitted, the global encoding parameter is used.
Default is \fBsteim2\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sequence_file_cleanup
Type: \fIint\fP
.sp
If configured with a value greater than zero then all sequence files
created by the chain plugin are deleted which are older than X minutes
before Seedlink is started.
Default is \fB0\fP.
.UNINDENT
.SS q330 extension
.sp
Global options for the Q330 plugin
.INDENT 0.0
.TP
.B plugins.q330.udpbase
Type: \fIint\fP
.sp
UDP base port used when udp port is defined as "auto"
Default is \fB5500\fP.
.UNINDENT
.SS chain extension
.sp
Global options for the chain plugin
.INDENT 0.0
.TP
.B plugins.chain.dialupConnections
Type: \fIint\fP
.sp
Defines the maximum number of concurrent dial\-up
connections. A value of 0 does not limit the
concurrent connections.
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B plugins.chain.loadTimeTable
Type: \fIboolean\fP
.sp
If enabled load_timetable is used by the chain plugin to request
the available time windows of each stream in the Seedlink buffer
to discard older records.
Default is \fBtrue\fP.
.UNINDENT
.SH BINDINGS
.SS Configuration
.INDENT 0.0
.TP
.B access
Type: \fIlist:string\fP
.sp
List of IP addresses or IP/mask pairs (in ipchains/iptables syntax).
Only if a client\(aqs IP address
matches one of those the station is shown (slinktool \-L, etc.) and
accessible. If omitted, the global access parameter is used.
If the global access parameter is not set any client can access the station.
Default is \fB0.0.0.0/0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B buffers
Type: \fIint\fP
.sp
Size of memory buffer (number of recent Mini\-SEED records kept in RAM).
Default is \fB100\fP.
.UNINDENT
.INDENT 0.0
.TP
.B segments
Type: \fIint\fP
.sp
Number of disk buffer segments (files under <dir>/station/segments/
where <dir> is the directory given by the filebase parameter).
Default is \fB50\fP.
.UNINDENT
.INDENT 0.0
.TP
.B segsize
Type: \fIint\fP
.sp
Size of one disk buffer segment in the records (512\-byte units).
Default is \fB1000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B blanks
Type: \fIint\fP
.sp
Number of blank records to insert after the re\-scan of disk buffer
if <dir>/station/buffer.xml is not found (assuming the server
did not terminate correctly).
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B encoding
Type: \fIstring\fP
.sp
Encoding of Mini\-SEED records created by SeedLink. The value must be
steim1 or steim2. If omitted, the global encoding parameter is used.
.UNINDENT
.INDENT 0.0
.TP
.B backfill_buffer
Type: \fIfloat\fP
.sp
Enable backfilling buffer for out\-of\-order records when raw samples
are transmitted. This values defines its capacity in seconds.
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources
Type: \fIlist:string\fP
.sp
Defines a list of extension bindings to be used.
Each binding can then be configured individually.
.sp
Available identifiers: \fI\%chain\fP \fI\%dm24\fP \fI\%dr24\fP \fI\%edata\fP \fI\%ewexport\fP \fI\%ewexport_pasv\fP \fI\%fs_mseed\fP \fI\%hrd24\fP \fI\%liss\fP \fI\%m24\fP \fI\%mk6\fP \fI\%mseedscan\fP \fI\%mws\fP \fI\%naqs\fP \fI\%nmxp\fP \fI\%nrts\fP \fI\%orb\fP \fI\%q330\fP \fI\%reftek\fP \fI\%sadc\fP \fI\%scream\fP \fI\%scream_ring\fP \fI\%wago\fP \fI\%wave24\fP \fI\%win\fP
.sp
.nf
.ft C
# param1 and param2 are just placeholders.
sources = chain, dm24
sources.chain1.param1 = value11
sources.chain1.param2 = value12
sources.dm242.param1 = value21
sources.dm242.param2 = value22

# To use the same binding twice, aliases must be used.
# Aliases are created by prepending a unique name followed by a colon
sources = chain, chain_2:chain
sources.chain.param1 = value11
sources.chain.param2 = value12
sources.chain_2.param1 = value21
sources.chain_2.param2 = value22
.ft P
.fi
.UNINDENT
.SS chain
.sp
Seedlink server (TCP/IP)
.INDENT 0.0
.TP
.B sources.chain.address
Type: \fIstring\fP
.sp
Hostname or IP of the Seedlink server.
Default is \fBgeofon.gfz\-potsdam.de\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.port
Type: \fIint\fP
.sp
Port of the Seedlink server
Default is \fB18000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.selectors
Type: \fIlist:string\fP
.sp
List of stream selectors. If left empty all available
streams will be requested. See slinktool manpage for
more information.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.station
Type: \fIstring\fP
.sp
Defines the input station if different from the stations
code. Usually leave this parameter unconfigured. If
configured and different from the stations code
the station code will be renamed to match the local station
code.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.network
Type: \fIstring\fP
.sp
Defines the input network if different from the stations
network. Usually leave this parameter unconfigured. If
configured and different from the stations network code
the network code will be renamed to match the local network
code.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.group
Type: \fIstring\fP
.sp
Usually stations with the same source addresses and dialup
options are grouped together and managed by a chain plugin
process. You can give here an additional group ID. Available
placeholders are $NET and $STA that are replaced by the
network code or station code. Whitespaces are replaced by
underscores when generating chain.xml.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.defaultTimingQuality
Type: \fIint\fP
.sp
The default timing quality is used when unpacking data that
does not contain blockette 1001, that allows SeedLink to
construct blockette 1001 for downsampled data.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.overlapRemoval
Type: \fIstring\fP
.sp
If overlap removal is set to "initial" or "full", then
earlier records will be discarded (record number is used
in case several subsequent records have the same header time).
All other values are treated as "none". Leave this option
unset unless you know what you are doing.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.batchmode
Type: \fIboolean\fP
.sp
If enabled then the chain plugin tries to subscribe for
channels with the BATCH command which is magnitudes faster
than the old handshake. Not all SeedLink servers support
the BATCH mode so it needs to be turned off in case of
problems.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.dialup.enable
Type: \fIboolean\fP
.sp
Enables dialup mode. Needs schedule and uptime to be
set accordingly.
Default is \fBfalse\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.dialup.uptime
Type: \fIint\fP
.sp
Dialup uptime in seconds.
Default is \fB600\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.dialup.schedule
Type: \fIstring\fP
.sp
The dialup schedula in cron format.
Default is \fB0,30 * * * *\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.dialup.ifup
Type: \fIstring\fP
.sp
An optional dialup ifup script.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.dialup.ifdown
Type: \fIstring\fP
.sp
An optional dialup ifdown script.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.channels.rename
Type: \fIlist:string\fP
.sp
Allows to rename channels. This is a list of
strings where each item defines one mapping in the
format "SRC_LOCCHA:DST_LOCCHA". Either SRC_LOCCHA or
DST_LOCCHA may contain wildcard characters (question
mark) and the location code (LOC) in both identifiers
is optional.
.UNINDENT
.INDENT 0.0
.TP
.B sources.chain.channels.unpack
Type: \fIlist:string\fP
.sp
Allows to unpack channels instead of sending them as
miniseed to Seedlink. Unpacked streams can be downsampled
by Seedlink. This is a list of strings where each item
defines one unpack mapping  in the format
"SRC_LOCCHA:DST_ID:1" where DST_ID can
be an arbitrary channel id which must match the definition of
a stream in streams.xml. The last ":1" is optional and defines
if the unpacked data should be doubled (duplicate each sample).
In case rename mappings are active, SRC_LOCCHA referes to
the final channel name after renaming.
.UNINDENT
.SS dm24
.sp
Guralp DM24 (serial plugin)
.INDENT 0.0
.TP
.B sources.dm24.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.dm24.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB19200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.dm24.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBdm24_20\fP.
.UNINDENT
.SS dr24
.sp
Geotech DR24 (serial plugin)
.INDENT 0.0
.TP
.B sources.dr24.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.dr24.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB19200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.dr24.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBdr24_20\fP.
.UNINDENT
.SS edata
.sp
EarthData PS6\-24 (serial plugin)
.INDENT 0.0
.TP
.B sources.edata.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.edata.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB115200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.edata.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBedata_100\fP.
.UNINDENT
.SS ewexport
.sp
Earthworm export server (TCP/IP)
.INDENT 0.0
.TP
.B sources.ewexport.address
Type: \fIstring\fP
.sp
Hostname or IP of the Earthworm export server.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport.port
Type: \fIint\fP
.sp
Port of the Earthworm export server.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport.heartbeat.message
Type: \fIstring\fP
.sp
Text for heartbeat to server.
Default is \fBalive\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport.heartbeat.rate
Type: \fIint\fP
.sp
Rate at which to expect heartbeats from server in seconds.
Default is \fB120\fP.
.UNINDENT
.SS ewexport_pasv
.sp
Earthworm passive export server (TCP/IP)
.INDENT 0.0
.TP
.B sources.ewexport_pasv.address
Type: \fIstring\fP
.sp
Bind IP of the Earthworm passive export server.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport_pasv.port
Type: \fIint\fP
.sp
Port of the Earthworm passive export server.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport_pasv.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport_pasv.heartbeat.message
Type: \fIstring\fP
.sp
Text for heartbeat to server.
Default is \fBalive\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.ewexport_pasv.heartbeat.rate
Type: \fIint\fP
.sp
Rate at which to expect heartbeats from server in seconds.
Default is \fB120\fP.
.UNINDENT
.SS fs_mseed
.sp
Mini\-SEED file plugin
.INDENT 0.0
.TP
.B sources.fs_mseed.input_type
Type: \fIstring\fP
.sp
Default is \fBddb\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.data_format
Type: \fIstring\fP
.sp
Default is \fBmseed\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.location
Type: \fIpath\fP
.sp
Default is \fB@ROOTDIR@/var/lib/seedlink/indata\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.pattern
Type: \fIstring\fP
.sp
"pattern" is a POSIX extended regular expression that
must match input file names (useful for filtering out non\-data
files). For example "BH[NEZ]" would match any files
that contained "BHE", "BHN" or "BHZ".
If no pattern is specified all files will be processed.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.scan_level
Type: \fIint\fP
.sp
Look for data files at the 1st or 2nd directory level.
Default is \fB2\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.move_files
Type: \fIboolean\fP
.sp
Move file to subdirectory "processed" before starting to read it.
Default is \fBtrue\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.delete_files
Type: \fIboolean\fP
.sp
Delete processed files.
Default is \fBfalse\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.use_timestamp
Type: \fIboolean\fP
.sp
Look only for files that are newer than the last file processed.
Default is \fBfalse\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.timestamp_file
Type: \fIpath\fP
.sp
Timestamp file is used to save the modification time of the last
file processed.
Default is \fB@ROOTDIR@/var/run/seedlink/fs_mseed.tim\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.polltime
Type: \fIint\fP
.sp
New files are searched for every "polltime" seconds.
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.delay
Type: \fIint\fP
.sp
Wait until the file is at least n seconds old, before trying to
read it.
Default is \fB30\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.verbosity
Type: \fIint\fP
.sp
Tells how many debugging messages are printed.
Default is \fB1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.zero_sample_limit
Type: \fIint\fP
.sp
Maximum number of consecutive zeros in datastream before data
gap will be declared (\-1 = disabled).
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.default_timing_quality
Type: \fIint\fP
.sp
If timing quality is not available, use this value as default
(\-1 = disabled).
Default is \fB\-1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.fs_mseed.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.IP Note
\fBsources.fs_mseed.channels.*\fP
\fIChannel definitions (Mini\-SEED streams are defined in streams.xml,\fP
\fIlook for <proc name="generic_3x50">).\fP
.RE
.IP Note
\fBsources.fs_mseed.channels.$name.*\fP
$name is a placeholder for the name to be used.
.RE
.INDENT 0.0
.TP
.B sources.fs_mseed.channels.$name.source_id
Type: \fIstring\fP
.sp
\fINo description available\fP
.UNINDENT
.SS hrd24
.sp
Nanometrics HRD24 (serial plugin)
.INDENT 0.0
.TP
.B sources.hrd24.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.hrd24.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB19200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.hrd24.bundles
Type: \fIint\fP
.sp
Number of bundles in packet.
Default is \fB59\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.hrd24.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBhrd24_100\fP.
.UNINDENT
.SS liss
.sp
LISS server (TCP/IP)
.INDENT 0.0
.TP
.B sources.liss.address
Type: \fIstring\fP
.sp
Hostname or IP of the LISS server.
Default is \fB"$STATION.$NET.liss.org"\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.liss.port
Type: \fIint\fP
.sp
Port of the LISS server
Default is \fB4000\fP.
.UNINDENT
.SS m24
.sp
Lennartz M24
.INDENT 0.0
.TP
.B sources.m24.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.m24.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB19200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.m24.time_offset
Type: \fIint\fP
.sp
Time offset in usecs.
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.m24.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBm24_100\fP.
.UNINDENT
.SS mk6
.sp
MK6
.INDENT 0.0
.TP
.B sources.mk6.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.SS mseedscan
.sp
MseedScan
.INDENT 0.0
.TP
.B sources.mseedscan.dir
Type: \fIstring\fP
.sp
Directory to scan.
.UNINDENT
.SS mws
.sp
MWS (serial plugin)
.INDENT 0.0
.TP
.B sources.mws.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/weatherstation\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.mws.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB19200\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.mws.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBmws\fP.
.UNINDENT
.SS naqs
.sp
NAQS (TCP/IP)
.INDENT 0.0
.TP
.B sources.naqs.address
Type: \fIstring\fP
.sp
Address of server, required.
Default is \fBlocalhost\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.naqs.port
Type: \fIint\fP
.sp
Specify the NAQS control/data port.
Default is \fB28000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.naqs.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBnaqs_bb40_sm100\fP.
.UNINDENT
.SS nmxp
.sp
NAQS (TCP/IP) with nmxptool. nmxptool is not part of SeisComP3 and needs to be installed
under $INSTALLDIR/share/plugins/seedlink/.
.INDENT 0.0
.TP
.B sources.nmxp.address
Type: \fIstring\fP
.sp
Hostname or IP of the NAQS server.
Default is \fBidahub.ucsd.edu\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nmxp.port
Type: \fIint\fP
.sp
TCP port of the NAQS server.
Default is \fB28000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nmxp.max_latency
Type: \fIint\fP
.sp
Max latency in seconds (time to wait for missing packets).
Default is \fB300\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nmxp.short_term_completion
Type: \fIint\fP
.sp
Short\-Term\-Completion (default \-1).
.sp
\-1 is for Raw Stream, no Short\-Term\-Completion.
Packets contain compressed data.
.sp
0 decompressed packets are received in chronological order without
waiting for missing packets.
.sp
[1..300] decompressed packets are received in chronological order
but waiting for missing packets at most SECs seconds. This requires
NaqsServer version greater than 1.90.
Default is \fB\-1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nmxp.additional_options
Type: \fIstring\fP
.sp
Defines additional options passed to nmxptool.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nmxp.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBnaqs_bb40_sm100\fP.
.UNINDENT
.SS nrts
.sp
NRTS (TCP/IP)
.INDENT 0.0
.TP
.B sources.nrts.address
Type: \fIstring\fP
.sp
Hostname or IP of the NRTS server.
Default is \fBidahub.ucsd.edu\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nrts.port
Type: \fIint\fP
.sp
Port of the NRTS server.
Default is \fB39136\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nrts.streams
Type: \fIstring\fP
.sp
List of streams to request.
Default is \fBbhz.00,bhn.00,bhe.00\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.nrts.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBnrts\fP.
.UNINDENT
.SS orb
.sp
Antelope ORB (TCP/IP)
.INDENT 0.0
.TP
.B sources.orb.address
Type: \fIstring\fP
.sp
Hostname or IP of the Antelope ORB.
.UNINDENT
.INDENT 0.0
.TP
.B sources.orb.port
Type: \fIint\fP
.sp
Port of the Antelope ORB.
Default is \fB39136\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.orb.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.SS q330
.sp
Quanterra Q330 (UDP/IP)
.INDENT 0.0
.TP
.B sources.q330.address
Type: \fIstring\fP
.sp
Hostname or IP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.port
Type: \fIint\fP
.sp
Source port to receive data packets.
Default is \fB5330\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.udpport
Type: \fIstring\fP
.sp
UDP port.
Default is \fBauto\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.slot
Type: \fIint\fP
.sp
Default is \fB1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.serial
Type: \fIstring\fP
.sp
Default is \fB0x0100000123456789\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.q330.auth
Type: \fIstring\fP
.sp
Default is \fB0x00\fP.
.UNINDENT
.SS reftek
.sp
RefTek RTPD (TCP/IP)
.INDENT 0.0
.TP
.B sources.reftek.address
Type: \fIstring\fP
.sp
Hostname or IP of the RTPD server.
Default is \fB127.0.0.1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.port
Type: \fIint\fP
.sp
Port of the RTPD server.
Default is \fB2543\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.map
Type: \fIstring\fP
.sp
Defines an alternative unit mapping file. The default file
is in $INSTALLDIR/var/lib/seedlink/reftek2sl.map. If
this path is not an absolute path it will treated as relative
path to $INSTALLDIR/var/lib/seedlink. The map file is used
if the unit is not explictly given in the binding. Each line
in the file is one mapping from a unit to a station name. The
first column is the unit id e.g. 91F3 and the second column
the Seedlink station name e.g. ABCD.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.unit
Type: \fIstring\fP
.sp
The unit id.
Default is \fB91F3\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBreftek\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.timeout
Type: \fIint\fP
.sp
Timeout length in seconds. If no data is received from a Reftek
unit during this period, the plugin assumes that the unit is
disconnected.
Default is \fB60\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.default_tq
Type: \fIint\fP
.sp
Default timing quality in percents. This value will be used when
no timing quality information is available. Can be \-1 to omit
the blockette 1001 altogether.
Default is \fB40\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.unlock_tq
Type: \fIint\fP
.sp
Timing quality to use when GPS is out of lock.
Default is \fB10\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.reftek.log_soh
Type: \fIboolean\fP
.sp
Send Reftek state\-of\-health data as Mini\-SEED LOG stream.
Default is \fBtrue\fP.
.UNINDENT
.SS sadc
.sp
SADC10/18/20/30 (serial plugin)
.INDENT 0.0
.TP
.B sources.sadc.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.sadc.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB38400\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.sadc.pctime
Type: \fIint\fP
.sp
Use PC time for initial time setting.
Default is \fB0\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.sadc.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBsadc_100\fP.
.UNINDENT
.SS scream
.sp
SCREAM! server (TCP/UDP/IP) plugin that receives data via
the SCREAM! protocol and sends raw data to Seedlink. The mapping
from SCREAM! channel id\(aqs to Seedlink net.sta.loc.cha is defined
in $INSTALLDIR/var/lib/seedlink/config/scream2sl.map if not
specified otherwise (parameter \(aqmap\(aq).
.INDENT 0.0
.TP
.B sources.scream.address
Type: \fIstring\fP
.sp
IP of the SCREAM! server.
Default is \fB127.0.0.1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream.port
Type: \fIint\fP
.sp
Port of the SCREAM!
Default is \fB1567\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream.tcp
Type: \fIboolean\fP
.sp
Enables TCP/IP mode. By default the data is received via
UDP but TCP is used instead. This needs a propert
configuration of the SCREAM! server to accept TCP
connections.
Default is \fBfalse\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream.map
Type: \fIstring\fP
.sp
Defines an alternative stream mapping file. The default file
is in $INSTALLDIR/var/lib/seedlink/scream2sl.map. If
this path is not an absolute path it will treated as relative
path to $INSTALLDIR/var/lib/seedlink.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream.channels
Type: \fIlist:string\fP
.sp
Defines the channel mappings (ID:channel, ...) from SCREAM!
to the channel code used in streams.xml. If no channel mappings
are given, the map file defined in map (either default or custom)
is used.
.UNINDENT
.SS scream_ring
.sp
SCREAM! server plugin that receives data via
the SCREAM! protocol and sends raw data to Seedlink. The mapping
from SCREAM! channel id\(aqs to Seedlink net.sta.loc.cha is defined
in $INSTALLDIR/var/lib/seedlink/config/scream2sl.map if not
specified otherwise (parameter \(aqmap\(aq). This is the second revision
of the scream plugin which supports buffering for short\-term
completeness.
.INDENT 0.0
.TP
.B sources.scream_ring.address
Type: \fIstring\fP
.sp
IP of the SCREAM! server.
Default is \fB127.0.0.1\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream_ring.tcpport
Type: \fIint\fP
.sp
TCP port of the SCREAM!
Default is \fB1567\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream_ring.udpport
Type: \fIint\fP
.sp
UDP port of the SCREAM!
Default is \fB1567\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream_ring.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream_ring.map
Type: \fIstring\fP
.sp
Defines an alternative stream mapping file. The default file
is in $INSTALLDIR/var/lib/seedlink/scream2sl.map. If
this path is not an absolute path it will treated as relative
path to $INSTALLDIR/var/lib/seedlink.
.UNINDENT
.INDENT 0.0
.TP
.B sources.scream_ring.channels
Type: \fIlist:string\fP
.sp
Defines the channel mappings (ID:channel, ...) from SCREAM!
to the channel code used in streams.xml. If no channel mappings
are given, the map file defined in map (either default or custom)
is used.
.UNINDENT
.SS wago
.sp
WAGO Controller (T\-Elektronik)
.INDENT 0.0
.TP
.B sources.wago.address
Type: \fIstring\fP
.sp
Hostname or IP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.wago.port
Type: \fIint\fP
.sp
TCP port.
Default is \fB502\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.wago.channels
Type: \fIlist:string\fP
.sp
List of channels.
.UNINDENT
.INDENT 0.0
.TP
.B sources.wago.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBwago\fP.
.UNINDENT
.SS wave24
.sp
Wave24
.INDENT 0.0
.TP
.B sources.wave24.comport
Type: \fIstring\fP
.sp
Serial port.
Default is \fB/dev/data\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.wave24.baudrate
Type: \fIint\fP
.sp
Baud rate.
Default is \fB57600\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.wave24.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBwave24bb\fP.
.UNINDENT
.SS win
.sp
WIN server
.INDENT 0.0
.TP
.B sources.win.udpport
Type: \fIint\fP
.sp
UDP port to receive data packets.
Default is \fB18000\fP.
.UNINDENT
.INDENT 0.0
.TP
.B sources.win.map
Type: \fIstring\fP
.sp
Defines an alternative stream mapping file. The default file
is in $INSTALLDIR/var/lib/seedlink/win2sl.map. If
this path is not an absolute path it will treated as relative
path to $INSTALLDIR/var/lib/seedlink.
.UNINDENT
.INDENT 0.0
.TP
.B sources.win.channels
Type: \fIlist:string\fP
.sp
List of channels (hexID:name, ...). The name can either be a single
channel name or a combination of station and channel separated by
a whitespace, e.g. "ABCD BHZ". If no station name is given,
e.g. only BHZ is specified, the name of the station the plugin bound to
is used. The definition of a station name is important if the plugin
configuration is used as a profile and assigned to multiple stations.
In this case a mapping file would be the more appropriate solution.
.sp
If no channel mappings are given, the map file defined in map
(either default or custom) is used.
.UNINDENT
.INDENT 0.0
.TP
.B sources.win.proc
Type: \fIstring\fP
.sp
Name of the proc object (defined in streams.xml); used for processing
raw streams (streams submitted by a plugin as raw samples).
Default is \fBwin\fP.
.UNINDENT
.SH AUTHOR
GFZ Potsdam
.SH COPYRIGHT
2014, GFZ Potsdam, gempa GmbH
.\" Generated by docutils manpage writer.
.\" 
.
